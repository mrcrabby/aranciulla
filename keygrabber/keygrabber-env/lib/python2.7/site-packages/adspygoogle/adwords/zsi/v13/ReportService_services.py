################################################## 
# ReportService_services.py 
# generated by ZSI.generate.wsdl2python
##################################################


from ReportService_services_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
import ZSI

# Locator
class ReportServiceLocator:
    ReportInterface_address = "https://adwords.google.com:443/api/adwords/v13/ReportService"
    def getReportInterfaceAddress(self):
        return ReportServiceLocator.ReportInterface_address
    def getReportInterface(self, url=None, **kw):
        return ReportServiceSoapBindingSOAP(url or ReportServiceLocator.ReportInterface_address, **kw)

# Methods
class ReportServiceSoapBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: deleteReport
    def deleteReport(self, request):
        if isinstance(request, deleteReportRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(deleteReportResponse.typecode)
        return response

    # op: getAllJobs
    def getAllJobs(self, request):
        if isinstance(request, getAllJobsRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getAllJobsResponse.typecode)
        return response

    # op: getGzipReportDownloadUrl
    def getGzipReportDownloadUrl(self, request):
        if isinstance(request, getGzipReportDownloadUrlRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getGzipReportDownloadUrlResponse.typecode)
        return response

    # op: getReportDownloadUrl
    def getReportDownloadUrl(self, request):
        if isinstance(request, getReportDownloadUrlRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getReportDownloadUrlResponse.typecode)
        return response

    # op: getReportJobStatus
    def getReportJobStatus(self, request):
        if isinstance(request, getReportJobStatusRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getReportJobStatusResponse.typecode)
        return response

    # op: scheduleReportJob
    def scheduleReportJob(self, request):
        if isinstance(request, scheduleReportJobRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(scheduleReportJobResponse.typecode)
        return response

    # op: validateReportJob
    def validateReportJob(self, request):
        if isinstance(request, validateReportJobRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(validateReportJobResponse.typecode)
        return response

deleteReportRequest = ns0.deleteReport_Dec().pyclass

deleteReportResponse = ns0.deleteReportResponse_Dec().pyclass

getAllJobsRequest = ns0.getAllJobs_Dec().pyclass

getAllJobsResponse = ns0.getAllJobsResponse_Dec().pyclass

getGzipReportDownloadUrlRequest = ns0.getGzipReportDownloadUrl_Dec().pyclass

getGzipReportDownloadUrlResponse = ns0.getGzipReportDownloadUrlResponse_Dec().pyclass

getReportDownloadUrlRequest = ns0.getReportDownloadUrl_Dec().pyclass

getReportDownloadUrlResponse = ns0.getReportDownloadUrlResponse_Dec().pyclass

getReportJobStatusRequest = ns0.getReportJobStatus_Dec().pyclass

getReportJobStatusResponse = ns0.getReportJobStatusResponse_Dec().pyclass

scheduleReportJobRequest = ns0.scheduleReportJob_Dec().pyclass

scheduleReportJobResponse = ns0.scheduleReportJobResponse_Dec().pyclass

validateReportJobRequest = ns0.validateReportJob_Dec().pyclass

validateReportJobResponse = ns0.validateReportJobResponse_Dec().pyclass
