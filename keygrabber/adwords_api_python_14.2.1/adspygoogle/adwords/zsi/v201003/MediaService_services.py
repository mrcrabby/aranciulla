################################################## 
# MediaService_services.py 
# generated by ZSI.generate.wsdl2python
##################################################


from MediaService_services_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
import ZSI

# Locator
class MediaServiceLocator:
    MediaServiceInterface_address = "https://adwords.google.com:443/api/adwords/cm/v201003/MediaService"
    def getMediaServiceInterfaceAddress(self):
        return MediaServiceLocator.MediaServiceInterface_address
    def getMediaServiceInterface(self, url=None, **kw):
        return MediaServiceSoapBindingSOAP(url or MediaServiceLocator.MediaServiceInterface_address, **kw)

# Methods
class MediaServiceSoapBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # get: getMedia
    def getMedia(self, request):
        if isinstance(request, getMediaRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getMediaResponse.typecode)
        return response

    # op: upload
    def upload(self, request):
        if isinstance(request, uploadRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(uploadResponse.typecode)
        return response

getMediaRequest = ns0.getMedia_Dec().pyclass

getMediaResponse = ns0.getMediaResponse_Dec().pyclass

uploadRequest = ns0.upload_Dec().pyclass

uploadResponse = ns0.uploadResponse_Dec().pyclass
