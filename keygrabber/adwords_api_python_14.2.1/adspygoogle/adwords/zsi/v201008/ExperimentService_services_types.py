################################################## 
# ExperimentService_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# https://adwords.google.com/api/adwords/cm/v201008
##############################

class ns0:
    targetNamespace = "https://adwords.google.com/api/adwords/cm/v201008"

    class AuthenticationError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AuthenticationError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AuthenticationError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","AuthenticationError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AuthenticationError_Def.__bases__:
                bases = list(ns0.AuthenticationError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AuthenticationError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AuthorizationError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AuthorizationError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AuthorizationError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","AuthorizationError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AuthorizationError_Def.__bases__:
                bases = list(ns0.AuthorizationError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AuthorizationError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BudgetError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BudgetError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.BudgetError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","BudgetError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.BudgetError_Def.__bases__:
                bases = list(ns0.BudgetError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.BudgetError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ClientTermsError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ClientTermsError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ClientTermsError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","ClientTermsError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.ClientTermsError_Def.__bases__:
                bases = list(ns0.ClientTermsError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.ClientTermsError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DateError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "DateError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DateError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","DateError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.DateError_Def.__bases__:
                bases = list(ns0.DateError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.DateError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DistinctError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "DistinctError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DistinctError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","DistinctError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.DistinctError_Def.__bases__:
                bases = list(ns0.DistinctError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.DistinctError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class EntityNotFound_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "EntityNotFound")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.EntityNotFound_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","EntityNotFound.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.EntityNotFound_Def.__bases__:
                bases = list(ns0.EntityNotFound_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.EntityNotFound_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ExperimentServiceError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ExperimentServiceError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ExperimentServiceError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","ExperimentServiceError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.ExperimentServiceError_Def.__bases__:
                bases = list(ns0.ExperimentServiceError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.ExperimentServiceError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ExperimentSummaryStats_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ExperimentSummaryStats")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ExperimentSummaryStats_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"adGroupsCount"), aname="_adGroupsCount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"adGroupCriteriaCount"), aname="_adGroupCriteriaCount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._adGroupsCount = None
                    self._adGroupCriteriaCount = None
                    return
            Holder.__name__ = "ExperimentSummaryStats_Holder"
            self.pyclass = Holder

    class InternalApiError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "InternalApiError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.InternalApiError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","InternalApiError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.InternalApiError_Def.__bases__:
                bases = list(ns0.InternalApiError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.InternalApiError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NewEntityCreationError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NewEntityCreationError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NewEntityCreationError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","NewEntityCreationError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NewEntityCreationError_Def.__bases__:
                bases = list(ns0.NewEntityCreationError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NewEntityCreationError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NotEmptyError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NotEmptyError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NotEmptyError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","NotEmptyError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NotEmptyError_Def.__bases__:
                bases = list(ns0.NotEmptyError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NotEmptyError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NotWhitelistedError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NotWhitelistedError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NotWhitelistedError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","NotWhitelistedError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NotWhitelistedError_Def.__bases__:
                bases = list(ns0.NotWhitelistedError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NotWhitelistedError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NullError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NullError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NullError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","NullError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NullError_Def.__bases__:
                bases = list(ns0.NullError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NullError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class OperationAccessDenied_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "OperationAccessDenied")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.OperationAccessDenied_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","OperationAccessDenied.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.OperationAccessDenied_Def.__bases__:
                bases = list(ns0.OperationAccessDenied_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.OperationAccessDenied_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class OperatorError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "OperatorError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.OperatorError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","OperatorError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.OperatorError_Def.__bases__:
                bases = list(ns0.OperatorError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.OperatorError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class QuotaCheckError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "QuotaCheckError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.QuotaCheckError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","QuotaCheckError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.QuotaCheckError_Def.__bases__:
                bases = list(ns0.QuotaCheckError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.QuotaCheckError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class QuotaError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "QuotaError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.QuotaError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","QuotaError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"limit"), aname="_limit", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.QuotaError_Def.__bases__:
                bases = list(ns0.QuotaError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.QuotaError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RangeError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RangeError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RangeError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","RangeError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RangeError_Def.__bases__:
                bases = list(ns0.RangeError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RangeError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RateExceededError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RateExceededError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RateExceededError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","RateExceededError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"rateName"), aname="_rateName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"rateScope"), aname="_rateScope", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"retryAfterSeconds"), aname="_retryAfterSeconds", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RateExceededError_Def.__bases__:
                bases = list(ns0.RateExceededError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RateExceededError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ReadOnlyError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ReadOnlyError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ReadOnlyError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","ReadOnlyError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.ReadOnlyError_Def.__bases__:
                bases = list(ns0.ReadOnlyError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.ReadOnlyError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RejectedError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RejectedError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RejectedError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","RejectedError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RejectedError_Def.__bases__:
                bases = list(ns0.RejectedError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RejectedError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RequestError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RequestError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RequestError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","RequestError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RequestError_Def.__bases__:
                bases = list(ns0.RequestError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RequestError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RequiredError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RequiredError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RequiredError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","RequiredError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RequiredError_Def.__bases__:
                bases = list(ns0.RequiredError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RequiredError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SizeLimitError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "SizeLimitError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.SizeLimitError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","SizeLimitError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.SizeLimitError_Def.__bases__:
                bases = list(ns0.SizeLimitError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.SizeLimitError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SoapHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "SoapHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SoapHeader_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"authToken"), aname="_authToken", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clientCustomerId"), aname="_clientCustomerId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clientEmail"), aname="_clientEmail", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"developerToken"), aname="_developerToken", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userAgent"), aname="_userAgent", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"validateOnly"), aname="_validateOnly", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"partialFailure"), aname="_partialFailure", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._authToken = None
                    self._clientCustomerId = None
                    self._clientEmail = None
                    self._developerToken = None
                    self._userAgent = None
                    self._validateOnly = None
                    self._partialFailure = None
                    return
            Holder.__name__ = "SoapHeader_Holder"
            self.pyclass = Holder

    class SoapResponseHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "SoapResponseHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SoapResponseHeader_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"requestId"), aname="_requestId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"operations"), aname="_operations", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"responseTime"), aname="_responseTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"units"), aname="_units", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requestId = None
                    self._operations = None
                    self._responseTime = None
                    self._units = None
                    return
            Holder.__name__ = "SoapResponseHeader_Holder"
            self.pyclass = Holder

    class StringLengthError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "StringLengthError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.StringLengthError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","StringLengthError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.StringLengthError_Def.__bases__:
                bases = list(ns0.StringLengthError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.StringLengthError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DatabaseError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "DatabaseError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DatabaseError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","DatabaseError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.DatabaseError_Def.__bases__:
                bases = list(ns0.DatabaseError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.DatabaseError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Experiment_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Experiment")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Experiment_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"controlId"), aname="_controlId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"campaignId"), aname="_campaignId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","ExperimentStatus",lazy=False)(pname=(ns,"status"), aname="_status", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","ExperimentServingStatus",lazy=False)(pname=(ns,"servingStatus"), aname="_servingStatus", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"queryPercentage"), aname="_queryPercentage", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"startDateTime"), aname="_startDateTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"endDateTime"), aname="_endDateTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"lastModifiedDateTime"), aname="_lastModifiedDateTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","ExperimentSummaryStats",lazy=False)(pname=(ns,"experimentSummaryStats"), aname="_experimentSummaryStats", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._controlId = None
                    self._campaignId = None
                    self._name = None
                    self._status = None
                    self._servingStatus = None
                    self._queryPercentage = None
                    self._startDateTime = None
                    self._endDateTime = None
                    self._lastModifiedDateTime = None
                    self._experimentSummaryStats = None
                    return
            Holder.__name__ = "Experiment_Holder"
            self.pyclass = Holder

    class ExperimentOperation_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ExperimentOperation")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ExperimentOperation_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","Experiment",lazy=False)(pname=(ns,"operand"), aname="_operand", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Operation_Def not in ns0.ExperimentOperation_Def.__bases__:
                bases = list(ns0.ExperimentOperation_Def.__bases__)
                bases.insert(0, ns0.Operation_Def)
                ns0.ExperimentOperation_Def.__bases__ = tuple(bases)

            ns0.Operation_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ExperimentReturnValue_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ExperimentReturnValue")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ExperimentReturnValue_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","Experiment",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ListReturnValue_Def not in ns0.ExperimentReturnValue_Def.__bases__:
                bases = list(ns0.ExperimentReturnValue_Def.__bases__)
                bases.insert(0, ns0.ListReturnValue_Def)
                ns0.ExperimentReturnValue_Def.__bases__ = tuple(bases)

            ns0.ListReturnValue_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ExperimentSelector_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ExperimentSelector")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ExperimentSelector_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"experimentIds"), aname="_experimentIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"campaignIds"), aname="_campaignIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"includeStats"), aname="_includeStats", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._experimentIds = []
                    self._campaignIds = []
                    self._includeStats = None
                    return
            Holder.__name__ = "ExperimentSelector_Holder"
            self.pyclass = Holder

    class ListReturnValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ListReturnValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ListReturnValue_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"ListReturnValue.Type"), aname="_ListReturnValue_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ListReturnValue_Type = None
                    return
            Holder.__name__ = "ListReturnValue_Holder"
            self.pyclass = Holder

    class Operation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Operation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Operation_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","Operator",lazy=False)(pname=(ns,"operator"), aname="_operator", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Operation.Type"), aname="_Operation_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._operator = None
                    self._Operation_Type = None
                    return
            Holder.__name__ = "Operation_Holder"
            self.pyclass = Holder

    class ApiError_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ApiError")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ApiError_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"fieldPath"), aname="_fieldPath", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"trigger"), aname="_trigger", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"errorString"), aname="_errorString", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ApiError.Type"), aname="_ApiError_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fieldPath = None
                    self._trigger = None
                    self._errorString = None
                    self._ApiError_Type = None
                    return
            Holder.__name__ = "ApiError_Holder"
            self.pyclass = Holder

    class ApiException_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ApiException")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ApiException_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","ApiError",lazy=False)(pname=(ns,"errors"), aname="_errors", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApplicationException_Def not in ns0.ApiException_Def.__bases__:
                bases = list(ns0.ApiException_Def.__bases__)
                bases.insert(0, ns0.ApplicationException_Def)
                ns0.ApiException_Def.__bases__ = tuple(bases)

            ns0.ApplicationException_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ApplicationException_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ApplicationException")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ApplicationException_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ApplicationException.Type"), aname="_ApplicationException_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    self._ApplicationException_Type = None
                    return
            Holder.__name__ = "ApplicationException_Holder"
            self.pyclass = Holder

    class ExperimentPage_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ExperimentPage")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ExperimentPage_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","Experiment",lazy=False)(pname=(ns,"entries"), aname="_entries", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Page_Def not in ns0.ExperimentPage_Def.__bases__:
                bases = list(ns0.ExperimentPage_Def.__bases__)
                bases.insert(0, ns0.Page_Def)
                ns0.ExperimentPage_Def.__bases__ = tuple(bases)

            ns0.Page_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Page_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Page")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Page_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"totalNumEntries"), aname="_totalNumEntries", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Page.Type"), aname="_Page_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._totalNumEntries = None
                    self._Page_Type = None
                    return
            Holder.__name__ = "Page_Holder"
            self.pyclass = Holder

    class AuthenticationError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AuthenticationError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AuthorizationError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AuthorizationError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class BudgetError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BudgetError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ClientTermsError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ClientTermsError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DatabaseError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "DatabaseError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DateError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "DateError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DistinctError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "DistinctError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class EntityNotFound_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "EntityNotFound.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ExperimentServiceError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ExperimentServiceError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ExperimentServingStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ExperimentServingStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ExperimentStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ExperimentStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class InternalApiError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "InternalApiError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NewEntityCreationError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NewEntityCreationError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NotEmptyError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NotEmptyError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NotWhitelistedError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NotWhitelistedError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NullError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NullError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class OperationAccessDenied_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "OperationAccessDenied.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Operator_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Operator")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class OperatorError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "OperatorError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class QuotaCheckError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "QuotaCheckError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class QuotaError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "QuotaError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RangeError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RangeError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RateExceededError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RateExceededError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ReadOnlyError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ReadOnlyError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RejectedError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RejectedError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RequestError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RequestError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RequiredError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RequiredError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SizeLimitError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "SizeLimitError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class StringLengthError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "StringLengthError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class getExperiment_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getExperiment"
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        def __init__(self, **kw):
            ns = ns0.getExperiment_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","ExperimentSelector",lazy=False)(pname=(ns,"selector"), aname="_selector", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201008","get")
            kw["aname"] = "_get"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._selector = None
                    return
            Holder.__name__ = "get_Holder"
            self.pyclass = Holder

    class getExperimentResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getExperimentResponse"
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        def __init__(self, **kw):
            ns = ns0.getExperimentResponse_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","ExperimentPage",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201008","getResponse")
            kw["aname"] = "_getResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = None
                    return
            Holder.__name__ = "getExperimentResponse_Holder"
            self.pyclass = Holder

    class ApiExceptionFault_Dec(ElementDeclaration):
        literal = "ApiExceptionFault"
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201008","ApiExceptionFault")
            kw["aname"] = "_ApiExceptionFault"
            if ns0.ApiException_Def not in ns0.ApiExceptionFault_Dec.__bases__:
                bases = list(ns0.ApiExceptionFault_Dec.__bases__)
                bases.insert(0, ns0.ApiException_Def)
                ns0.ApiExceptionFault_Dec.__bases__ = tuple(bases)

            ns0.ApiException_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ApiExceptionFault_Dec_Holder"

    class mutateExperiment_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "mutateExperiment"
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        def __init__(self, **kw):
            ns = ns0.mutateExperiment_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","ExperimentOperation",lazy=False)(pname=(ns,"operations"), aname="_operations", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201008","mutate")
            kw["aname"] = "_mutate"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._operations = []
                    return
            Holder.__name__ = "mutate_Holder"
            self.pyclass = Holder

    class mutateExperimentResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "mutateExperimentResponse"
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        def __init__(self, **kw):
            ns = ns0.mutateExperimentResponse_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","ExperimentReturnValue",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201008","mutateResponse")
            kw["aname"] = "_mutateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = None
                    return
            Holder.__name__ = "mutateExperimentResponse_Holder"
            self.pyclass = Holder

    class RequestHeader_Dec(ElementDeclaration):
        literal = "RequestHeader"
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201008","RequestHeader")
            kw["aname"] = "_RequestHeader"
            if ns0.SoapHeader_Def not in ns0.RequestHeader_Dec.__bases__:
                bases = list(ns0.RequestHeader_Dec.__bases__)
                bases.insert(0, ns0.SoapHeader_Def)
                ns0.RequestHeader_Dec.__bases__ = tuple(bases)

            ns0.SoapHeader_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "RequestHeader_Dec_Holder"

    class ResponseHeader_Dec(ElementDeclaration):
        literal = "ResponseHeader"
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201008","ResponseHeader")
            kw["aname"] = "_ResponseHeader"
            if ns0.SoapResponseHeader_Def not in ns0.ResponseHeader_Dec.__bases__:
                bases = list(ns0.ResponseHeader_Dec.__bases__)
                bases.insert(0, ns0.SoapResponseHeader_Def)
                ns0.ResponseHeader_Dec.__bases__ = tuple(bases)

            ns0.SoapResponseHeader_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ResponseHeader_Dec_Holder"

# end class ns0 (tns: https://adwords.google.com/api/adwords/cm/v201008)
