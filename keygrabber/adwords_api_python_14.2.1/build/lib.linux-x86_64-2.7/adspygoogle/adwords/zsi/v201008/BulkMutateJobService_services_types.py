################################################## 
# BulkMutateJobService_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# https://adwords.google.com/api/adwords/cm/v201008
##############################

class ns0:
    targetNamespace = "https://adwords.google.com/api/adwords/cm/v201008"

    class Ad_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Ad")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Ad_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"url"), aname="_url", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"displayUrl"), aname="_displayUrl", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Ad.ApprovalStatus",lazy=False)(pname=(ns,"approvalStatus"), aname="_approvalStatus", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"disapprovalReasons"), aname="_disapprovalReasons", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"trademarkDisapproved"), aname="_trademarkDisapproved", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Ad.Type"), aname="_Ad_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._url = None
                    self._displayUrl = None
                    self._approvalStatus = None
                    self._disapprovalReasons = []
                    self._trademarkDisapproved = None
                    self._Ad_Type = None
                    return
            Holder.__name__ = "Ad_Holder"
            self.pyclass = Holder

    class AdError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","AdError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AdError_Def.__bases__:
                bases = list(ns0.AdError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AdError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdExtension_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdExtension")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AdExtension_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AdExtension.Type"), aname="_AdExtension_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._AdExtension_Type = None
                    return
            Holder.__name__ = "AdExtension_Holder"
            self.pyclass = Holder

    class AdExtensionError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdExtensionError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdExtensionError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","AdExtensionError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AdExtensionError_Def.__bases__:
                bases = list(ns0.AdExtensionError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AdExtensionError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdExtensionOverride_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdExtensionOverride")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AdExtensionOverride_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"adId"), aname="_adId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","AdExtension",lazy=False)(pname=(ns,"adExtension"), aname="_adExtension", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","OverrideInfo",lazy=False)(pname=(ns,"overrideInfo"), aname="_overrideInfo", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","AdExtensionOverride.Status",lazy=False)(pname=(ns,"status"), aname="_status", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","AdExtensionOverride.ApprovalStatus",lazy=False)(pname=(ns,"approvalStatus"), aname="_approvalStatus", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","AdExtensionOverrideStats",lazy=False)(pname=(ns,"stats"), aname="_stats", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._adId = None
                    self._adExtension = None
                    self._overrideInfo = None
                    self._status = None
                    self._approvalStatus = None
                    self._stats = None
                    return
            Holder.__name__ = "AdExtensionOverride_Holder"
            self.pyclass = Holder

    class AdExtensionOverrideError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdExtensionOverrideError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdExtensionOverrideError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","AdExtensionOverrideError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AdExtensionOverrideError_Def.__bases__:
                bases = list(ns0.AdExtensionOverrideError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AdExtensionOverrideError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdExtensionOverrideOperation_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdExtensionOverrideOperation")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdExtensionOverrideOperation_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","AdExtensionOverride",lazy=False)(pname=(ns,"operand"), aname="_operand", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Operation_Def not in ns0.AdExtensionOverrideOperation_Def.__bases__:
                bases = list(ns0.AdExtensionOverrideOperation_Def.__bases__)
                bases.insert(0, ns0.Operation_Def)
                ns0.AdExtensionOverrideOperation_Def.__bases__ = tuple(bases)

            ns0.Operation_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdExtensionOverrideStats_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdExtensionOverrideStats")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdExtensionOverrideStats_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Stats_Def not in ns0.AdExtensionOverrideStats_Def.__bases__:
                bases = list(ns0.AdExtensionOverrideStats_Def.__bases__)
                bases.insert(0, ns0.Stats_Def)
                ns0.AdExtensionOverrideStats_Def.__bases__ = tuple(bases)

            ns0.Stats_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdGroup_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdGroup")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AdGroup_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"campaignId"), aname="_campaignId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"campaignName"), aname="_campaignName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","AdGroup.Status",lazy=False)(pname=(ns,"status"), aname="_status", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","AdGroupBids",lazy=False)(pname=(ns,"bids"), aname="_bids", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","AdGroupExperimentData",lazy=False)(pname=(ns,"experimentData"), aname="_experimentData", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Stats",lazy=False)(pname=(ns,"stats"), aname="_stats", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._campaignId = None
                    self._campaignName = None
                    self._name = None
                    self._status = None
                    self._bids = None
                    self._experimentData = None
                    self._stats = None
                    return
            Holder.__name__ = "AdGroup_Holder"
            self.pyclass = Holder

    class AdGroupAd_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdGroupAd")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AdGroupAd_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"adGroupId"), aname="_adGroupId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Ad",lazy=False)(pname=(ns,"ad"), aname="_ad", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","AdGroupAd.Status",lazy=False)(pname=(ns,"status"), aname="_status", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","AdStats",lazy=False)(pname=(ns,"stats"), aname="_stats", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._adGroupId = None
                    self._ad = None
                    self._status = None
                    self._stats = None
                    return
            Holder.__name__ = "AdGroupAd_Holder"
            self.pyclass = Holder

    class AdGroupAdCountLimitExceeded_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdGroupAdCountLimitExceeded")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdGroupAdCountLimitExceeded_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.EntityCountLimitExceeded_Def not in ns0.AdGroupAdCountLimitExceeded_Def.__bases__:
                bases = list(ns0.AdGroupAdCountLimitExceeded_Def.__bases__)
                bases.insert(0, ns0.EntityCountLimitExceeded_Def)
                ns0.AdGroupAdCountLimitExceeded_Def.__bases__ = tuple(bases)

            ns0.EntityCountLimitExceeded_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdGroupAdError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdGroupAdError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdGroupAdError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","AdGroupAdError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AdGroupAdError_Def.__bases__:
                bases = list(ns0.AdGroupAdError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AdGroupAdError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdGroupAdOperation_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdGroupAdOperation")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdGroupAdOperation_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","AdGroupAd",lazy=False)(pname=(ns,"operand"), aname="_operand", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","ExemptionRequest",lazy=False)(pname=(ns,"exemptionRequests"), aname="_exemptionRequests", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Operation_Def not in ns0.AdGroupAdOperation_Def.__bases__:
                bases = list(ns0.AdGroupAdOperation_Def.__bases__)
                bases.insert(0, ns0.Operation_Def)
                ns0.AdGroupAdOperation_Def.__bases__ = tuple(bases)

            ns0.Operation_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdGroupBids_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdGroupBids")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AdGroupBids_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"AdGroupBids.Type"), aname="_AdGroupBids_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._AdGroupBids_Type = None
                    return
            Holder.__name__ = "AdGroupBids_Holder"
            self.pyclass = Holder

    class AdGroupCriterion_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdGroupCriterion")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AdGroupCriterion_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"adGroupId"), aname="_adGroupId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Criterion",lazy=False)(pname=(ns,"criterion"), aname="_criterion", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AdGroupCriterion.Type"), aname="_AdGroupCriterion_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._adGroupId = None
                    self._criterion = None
                    self._AdGroupCriterion_Type = None
                    return
            Holder.__name__ = "AdGroupCriterion_Holder"
            self.pyclass = Holder

    class AdGroupCriterionBids_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdGroupCriterionBids")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AdGroupCriterionBids_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"AdGroupCriterionBids.Type"), aname="_AdGroupCriterionBids_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._AdGroupCriterionBids_Type = None
                    return
            Holder.__name__ = "AdGroupCriterionBids_Holder"
            self.pyclass = Holder

    class AdGroupCriterionError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdGroupCriterionError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdGroupCriterionError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","AdGroupCriterionError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AdGroupCriterionError_Def.__bases__:
                bases = list(ns0.AdGroupCriterionError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AdGroupCriterionError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdGroupCriterionExperimentBidMultiplier_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdGroupCriterionExperimentBidMultiplier")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AdGroupCriterionExperimentBidMultiplier_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"AdGroupCriterionExperimentBidMultiplier.Type"), aname="_AdGroupCriterionExperimentBidMultiplier_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._AdGroupCriterionExperimentBidMultiplier_Type = None
                    return
            Holder.__name__ = "AdGroupCriterionExperimentBidMultiplier_Holder"
            self.pyclass = Holder

    class AdGroupCriterionLimitExceeded_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdGroupCriterionLimitExceeded")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdGroupCriterionLimitExceeded_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","AdGroupCriterionLimitExceeded.CriteriaLimitType",lazy=False)(pname=(ns,"limitType"), aname="_limitType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.EntityCountLimitExceeded_Def not in ns0.AdGroupCriterionLimitExceeded_Def.__bases__:
                bases = list(ns0.AdGroupCriterionLimitExceeded_Def.__bases__)
                bases.insert(0, ns0.EntityCountLimitExceeded_Def)
                ns0.AdGroupCriterionLimitExceeded_Def.__bases__ = tuple(bases)

            ns0.EntityCountLimitExceeded_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdGroupCriterionOperation_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdGroupCriterionOperation")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdGroupCriterionOperation_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","AdGroupCriterion",lazy=False)(pname=(ns,"operand"), aname="_operand", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","ExemptionRequest",lazy=False)(pname=(ns,"exemptionRequests"), aname="_exemptionRequests", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Operation_Def not in ns0.AdGroupCriterionOperation_Def.__bases__:
                bases = list(ns0.AdGroupCriterionOperation_Def.__bases__)
                bases.insert(0, ns0.Operation_Def)
                ns0.AdGroupCriterionOperation_Def.__bases__ = tuple(bases)

            ns0.Operation_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdGroupExperimentBidMultipliers_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdGroupExperimentBidMultipliers")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AdGroupExperimentBidMultipliers_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"AdGroupExperimentBidMultipliers.Type"), aname="_AdGroupExperimentBidMultipliers_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._AdGroupExperimentBidMultipliers_Type = None
                    return
            Holder.__name__ = "AdGroupExperimentBidMultipliers_Holder"
            self.pyclass = Holder

    class AdGroupExperimentData_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdGroupExperimentData")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AdGroupExperimentData_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"experimentId"), aname="_experimentId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","ExperimentDeltaStatus",lazy=False)(pname=(ns,"experimentDeltaStatus"), aname="_experimentDeltaStatus", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","ExperimentDataStatus",lazy=False)(pname=(ns,"experimentDataStatus"), aname="_experimentDataStatus", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","AdGroupExperimentBidMultipliers",lazy=False)(pname=(ns,"experimentBidMultipliers"), aname="_experimentBidMultipliers", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._experimentId = None
                    self._experimentDeltaStatus = None
                    self._experimentDataStatus = None
                    self._experimentBidMultipliers = None
                    return
            Holder.__name__ = "AdGroupExperimentData_Holder"
            self.pyclass = Holder

    class AdGroupOperation_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdGroupOperation")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdGroupOperation_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","AdGroup",lazy=False)(pname=(ns,"operand"), aname="_operand", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Operation_Def not in ns0.AdGroupOperation_Def.__bases__:
                bases = list(ns0.AdGroupOperation_Def.__bases__)
                bases.insert(0, ns0.Operation_Def)
                ns0.AdGroupOperation_Def.__bases__ = tuple(bases)

            ns0.Operation_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdGroupServiceError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdGroupServiceError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdGroupServiceError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","AdGroupServiceError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"adGroupId"), aname="_adGroupId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AdGroupServiceError_Def.__bases__:
                bases = list(ns0.AdGroupServiceError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AdGroupServiceError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdScheduleTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdScheduleTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdScheduleTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","DayOfWeek",lazy=False)(pname=(ns,"dayOfWeek"), aname="_dayOfWeek", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"startHour"), aname="_startHour", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","MinuteOfHour",lazy=False)(pname=(ns,"startMinute"), aname="_startMinute", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"endHour"), aname="_endHour", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","MinuteOfHour",lazy=False)(pname=(ns,"endMinute"), aname="_endMinute", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"bidMultiplier"), aname="_bidMultiplier", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.AdScheduleTarget_Def.__bases__:
                bases = list(ns0.AdScheduleTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.AdScheduleTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdScheduleTargetList_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdScheduleTargetList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdScheduleTargetList_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","AdScheduleTarget",lazy=False)(pname=(ns,"targets"), aname="_targets", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.TargetList_Def not in ns0.AdScheduleTargetList_Def.__bases__:
                bases = list(ns0.AdScheduleTargetList_Def.__bases__)
                bases.insert(0, ns0.TargetList_Def)
                ns0.AdScheduleTargetList_Def.__bases__ = tuple(bases)

            ns0.TargetList_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdStats_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdStats")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdStats_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"percentServed"), aname="_percentServed", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Stats_Def not in ns0.AdStats_Def.__bases__:
                bases = list(ns0.AdStats_Def.__bases__)
                bases.insert(0, ns0.Stats_Def)
                ns0.AdStats_Def.__bases__ = tuple(bases)

            ns0.Stats_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdUnionId_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdUnionId")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AdUnionId_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AdUnionId.Type"), aname="_AdUnionId_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._AdUnionId_Type = None
                    return
            Holder.__name__ = "AdUnionId_Holder"
            self.pyclass = Holder

    class Address_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Address")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Address_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"streetAddress"), aname="_streetAddress", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"streetAddress2"), aname="_streetAddress2", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"cityName"), aname="_cityName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"provinceCode"), aname="_provinceCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"provinceName"), aname="_provinceName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"postalCode"), aname="_postalCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._streetAddress = None
                    self._streetAddress2 = None
                    self._cityName = None
                    self._provinceCode = None
                    self._provinceName = None
                    self._postalCode = None
                    self._countryCode = None
                    return
            Holder.__name__ = "Address_Holder"
            self.pyclass = Holder

    class AgeTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AgeTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AgeTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","AgeTarget.Age",lazy=False)(pname=(ns,"age"), aname="_age", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.DemographicTarget_Def not in ns0.AgeTarget_Def.__bases__:
                bases = list(ns0.AgeTarget_Def.__bases__)
                bases.insert(0, ns0.DemographicTarget_Def)
                ns0.AgeTarget_Def.__bases__ = tuple(bases)

            ns0.DemographicTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ApiError_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ApiError")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ApiError_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"fieldPath"), aname="_fieldPath", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"trigger"), aname="_trigger", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"errorString"), aname="_errorString", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ApiError.Type"), aname="_ApiError_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fieldPath = None
                    self._trigger = None
                    self._errorString = None
                    self._ApiError_Type = None
                    return
            Holder.__name__ = "ApiError_Holder"
            self.pyclass = Holder

    class ApiErrorReason_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ApiErrorReason")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ApiErrorReason_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","AdError.Reason",lazy=False)(pname=(ns,"AdErrorReason"), aname="_AdErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","AdExtensionError.Reason",lazy=False)(pname=(ns,"AdExtensionErrorReason"), aname="_AdExtensionErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","AdExtensionOverrideError.Reason",lazy=False)(pname=(ns,"AdExtensionOverrideErrorReason"), aname="_AdExtensionOverrideErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","AdGroupAdError.Reason",lazy=False)(pname=(ns,"AdGroupAdErrorReason"), aname="_AdGroupAdErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","AdGroupCriterionError.Reason",lazy=False)(pname=(ns,"AdGroupCriterionErrorReason"), aname="_AdGroupCriterionErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","AdGroupServiceError.Reason",lazy=False)(pname=(ns,"AdGroupServiceErrorReason"), aname="_AdGroupServiceErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","AuthenticationError.Reason",lazy=False)(pname=(ns,"AuthenticationErrorReason"), aname="_AuthenticationErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","AuthorizationError.Reason",lazy=False)(pname=(ns,"AuthorizationErrorReason"), aname="_AuthorizationErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","BiddingError.Reason",lazy=False)(pname=(ns,"BiddingErrorReason"), aname="_BiddingErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","BiddingTransitionError.Reason",lazy=False)(pname=(ns,"BiddingTransitionErrorReason"), aname="_BiddingTransitionErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","BudgetError.Reason",lazy=False)(pname=(ns,"BudgetErrorReason"), aname="_BudgetErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","BulkMutateJobError.Reason",lazy=False)(pname=(ns,"BulkMutateJobErrorReason"), aname="_BulkMutateJobErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","CampaignAdExtensionError.Reason",lazy=False)(pname=(ns,"CampaignAdExtensionErrorReason"), aname="_CampaignAdExtensionErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","CampaignCriterionError.Reason",lazy=False)(pname=(ns,"CampaignCriterionErrorReason"), aname="_CampaignCriterionErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","CampaignError.Reason",lazy=False)(pname=(ns,"CampaignErrorReason"), aname="_CampaignErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","ClientTermsError.Reason",lazy=False)(pname=(ns,"ClientTermsErrorReason"), aname="_ClientTermsErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","DatabaseError.Reason",lazy=False)(pname=(ns,"DatabaseErrorReason"), aname="_DatabaseErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","DateError.Reason",lazy=False)(pname=(ns,"DateErrorReason"), aname="_DateErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","DistinctError.Reason",lazy=False)(pname=(ns,"DistinctErrorReason"), aname="_DistinctErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","EntityAccessDenied.Reason",lazy=False)(pname=(ns,"EntityAccessDeniedReason"), aname="_EntityAccessDeniedReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","EntityCountLimitExceeded.Reason",lazy=False)(pname=(ns,"EntityCountLimitExceededReason"), aname="_EntityCountLimitExceededReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","EntityNotFound.Reason",lazy=False)(pname=(ns,"EntityNotFoundReason"), aname="_EntityNotFoundReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","IdError.Reason",lazy=False)(pname=(ns,"IdErrorReason"), aname="_IdErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","ImageError.Reason",lazy=False)(pname=(ns,"ImageErrorReason"), aname="_ImageErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","InternalApiError.Reason",lazy=False)(pname=(ns,"InternalApiErrorReason"), aname="_InternalApiErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","JobError.Reason",lazy=False)(pname=(ns,"JobErrorReason"), aname="_JobErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","MediaError.Reason",lazy=False)(pname=(ns,"MediaErrorReason"), aname="_MediaErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","NewEntityCreationError.Reason",lazy=False)(pname=(ns,"NewEntityCreationErrorReason"), aname="_NewEntityCreationErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","NotEmptyError.Reason",lazy=False)(pname=(ns,"NotEmptyErrorReason"), aname="_NotEmptyErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","NotWhitelistedError.Reason",lazy=False)(pname=(ns,"NotWhitelistedErrorReason"), aname="_NotWhitelistedErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","NullError.Reason",lazy=False)(pname=(ns,"NullErrorReason"), aname="_NullErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","OperationAccessDenied.Reason",lazy=False)(pname=(ns,"OperationAccessDeniedReason"), aname="_OperationAccessDeniedReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","OperatorError.Reason",lazy=False)(pname=(ns,"OperatorErrorReason"), aname="_OperatorErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","PagingError.Reason",lazy=False)(pname=(ns,"PagingErrorReason"), aname="_PagingErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","PolicyViolationError.Reason",lazy=False)(pname=(ns,"PolicyViolationErrorReason"), aname="_PolicyViolationErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","QuotaCheckError.Reason",lazy=False)(pname=(ns,"QuotaCheckErrorReason"), aname="_QuotaCheckErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","QuotaError.Reason",lazy=False)(pname=(ns,"QuotaErrorReason"), aname="_QuotaErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","QuotaExceededError.Reason",lazy=False)(pname=(ns,"QuotaExceededErrorReason"), aname="_QuotaExceededErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","RangeError.Reason",lazy=False)(pname=(ns,"RangeErrorReason"), aname="_RangeErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","RateExceededError.Reason",lazy=False)(pname=(ns,"RateExceededErrorReason"), aname="_RateExceededErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","ReadOnlyError.Reason",lazy=False)(pname=(ns,"ReadOnlyErrorReason"), aname="_ReadOnlyErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","RegionCodeError.Reason",lazy=False)(pname=(ns,"RegionCodeErrorReason"), aname="_RegionCodeErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","RejectedError.Reason",lazy=False)(pname=(ns,"RejectedErrorReason"), aname="_RejectedErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","RequestError.Reason",lazy=False)(pname=(ns,"RequestErrorReason"), aname="_RequestErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","RequiredError.Reason",lazy=False)(pname=(ns,"RequiredErrorReason"), aname="_RequiredErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","SizeLimitError.Reason",lazy=False)(pname=(ns,"SizeLimitErrorReason"), aname="_SizeLimitErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","StatsQueryError.Reason",lazy=False)(pname=(ns,"StatsQueryErrorReason"), aname="_StatsQueryErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","StringLengthError.Reason",lazy=False)(pname=(ns,"StringLengthErrorReason"), aname="_StringLengthErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","TargetError.Reason",lazy=False)(pname=(ns,"TargetErrorReason"), aname="_TargetErrorReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._AdErrorReason = None
                    self._AdExtensionErrorReason = None
                    self._AdExtensionOverrideErrorReason = None
                    self._AdGroupAdErrorReason = None
                    self._AdGroupCriterionErrorReason = None
                    self._AdGroupServiceErrorReason = None
                    self._AuthenticationErrorReason = None
                    self._AuthorizationErrorReason = None
                    self._BiddingErrorReason = None
                    self._BiddingTransitionErrorReason = None
                    self._BudgetErrorReason = None
                    self._BulkMutateJobErrorReason = None
                    self._CampaignAdExtensionErrorReason = None
                    self._CampaignCriterionErrorReason = None
                    self._CampaignErrorReason = None
                    self._ClientTermsErrorReason = None
                    self._DatabaseErrorReason = None
                    self._DateErrorReason = None
                    self._DistinctErrorReason = None
                    self._EntityAccessDeniedReason = None
                    self._EntityCountLimitExceededReason = None
                    self._EntityNotFoundReason = None
                    self._IdErrorReason = None
                    self._ImageErrorReason = None
                    self._InternalApiErrorReason = None
                    self._JobErrorReason = None
                    self._MediaErrorReason = None
                    self._NewEntityCreationErrorReason = None
                    self._NotEmptyErrorReason = None
                    self._NotWhitelistedErrorReason = None
                    self._NullErrorReason = None
                    self._OperationAccessDeniedReason = None
                    self._OperatorErrorReason = None
                    self._PagingErrorReason = None
                    self._PolicyViolationErrorReason = None
                    self._QuotaCheckErrorReason = None
                    self._QuotaErrorReason = None
                    self._QuotaExceededErrorReason = None
                    self._RangeErrorReason = None
                    self._RateExceededErrorReason = None
                    self._ReadOnlyErrorReason = None
                    self._RegionCodeErrorReason = None
                    self._RejectedErrorReason = None
                    self._RequestErrorReason = None
                    self._RequiredErrorReason = None
                    self._SizeLimitErrorReason = None
                    self._StatsQueryErrorReason = None
                    self._StringLengthErrorReason = None
                    self._TargetErrorReason = None
                    return
            Holder.__name__ = "ApiErrorReason_Holder"
            self.pyclass = Holder

    class ApiException_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ApiException")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ApiException_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","ApiError",lazy=False)(pname=(ns,"errors"), aname="_errors", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApplicationException_Def not in ns0.ApiException_Def.__bases__:
                bases = list(ns0.ApiException_Def.__bases__)
                bases.insert(0, ns0.ApplicationException_Def)
                ns0.ApiException_Def.__bases__ = tuple(bases)

            ns0.ApplicationException_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ApplicationException_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ApplicationException")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ApplicationException_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ApplicationException.Type"), aname="_ApplicationException_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    self._ApplicationException_Type = None
                    return
            Holder.__name__ = "ApplicationException_Holder"
            self.pyclass = Holder

    class Audio_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Audio")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Audio_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"durationMillis"), aname="_durationMillis", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"streamingUrl"), aname="_streamingUrl", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"readyToPlayOnTheWeb"), aname="_readyToPlayOnTheWeb", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Media_Def not in ns0.Audio_Def.__bases__:
                bases = list(ns0.Audio_Def.__bases__)
                bases.insert(0, ns0.Media_Def)
                ns0.Audio_Def.__bases__ = tuple(bases)

            ns0.Media_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AuthenticationError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AuthenticationError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AuthenticationError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","AuthenticationError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AuthenticationError_Def.__bases__:
                bases = list(ns0.AuthenticationError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AuthenticationError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AuthorizationError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AuthorizationError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AuthorizationError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","AuthorizationError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AuthorizationError_Def.__bases__:
                bases = list(ns0.AuthorizationError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AuthorizationError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BatchFailureResult_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BatchFailureResult")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.BatchFailureResult_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"operationIndexInBatch"), aname="_operationIndexInBatch", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.OperationResult_Def not in ns0.BatchFailureResult_Def.__bases__:
                bases = list(ns0.BatchFailureResult_Def.__bases__)
                bases.insert(0, ns0.OperationResult_Def)
                ns0.BatchFailureResult_Def.__bases__ = tuple(bases)

            ns0.OperationResult_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Bid_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Bid")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Bid_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","Money",lazy=False)(pname=(ns,"amount"), aname="_amount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._amount = None
                    return
            Holder.__name__ = "Bid_Holder"
            self.pyclass = Holder

    class BidMultiplier_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BidMultiplier")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.BidMultiplier_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"multiplier"), aname="_multiplier", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Bid",lazy=False)(pname=(ns,"multipliedBid"), aname="_multipliedBid", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._multiplier = None
                    self._multipliedBid = None
                    return
            Holder.__name__ = "BidMultiplier_Holder"
            self.pyclass = Holder

    class BiddableAdGroupCriterion_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BiddableAdGroupCriterion")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.BiddableAdGroupCriterion_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","UserStatus",lazy=False)(pname=(ns,"userStatus"), aname="_userStatus", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","SystemServingStatus",lazy=False)(pname=(ns,"systemServingStatus"), aname="_systemServingStatus", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","ApprovalStatus",lazy=False)(pname=(ns,"approvalStatus"), aname="_approvalStatus", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"destinationUrl"), aname="_destinationUrl", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","AdGroupCriterionBids",lazy=False)(pname=(ns,"bids"), aname="_bids", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","BiddableAdGroupCriterionExperimentData",lazy=False)(pname=(ns,"experimentData"), aname="_experimentData", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Bid",lazy=False)(pname=(ns,"firstPageCpc"), aname="_firstPageCpc", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","QualityInfo",lazy=False)(pname=(ns,"qualityInfo"), aname="_qualityInfo", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Stats",lazy=False)(pname=(ns,"stats"), aname="_stats", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.AdGroupCriterion_Def not in ns0.BiddableAdGroupCriterion_Def.__bases__:
                bases = list(ns0.BiddableAdGroupCriterion_Def.__bases__)
                bases.insert(0, ns0.AdGroupCriterion_Def)
                ns0.BiddableAdGroupCriterion_Def.__bases__ = tuple(bases)

            ns0.AdGroupCriterion_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BiddableAdGroupCriterionExperimentData_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BiddableAdGroupCriterionExperimentData")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.BiddableAdGroupCriterionExperimentData_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"experimentId"), aname="_experimentId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","ExperimentDeltaStatus",lazy=False)(pname=(ns,"experimentDeltaStatus"), aname="_experimentDeltaStatus", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","ExperimentDataStatus",lazy=False)(pname=(ns,"experimentDataStatus"), aname="_experimentDataStatus", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","AdGroupCriterionExperimentBidMultiplier",lazy=False)(pname=(ns,"experimentBidMultiplier"), aname="_experimentBidMultiplier", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._experimentId = None
                    self._experimentDeltaStatus = None
                    self._experimentDataStatus = None
                    self._experimentBidMultiplier = None
                    return
            Holder.__name__ = "BiddableAdGroupCriterionExperimentData_Holder"
            self.pyclass = Holder

    class BiddingError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BiddingError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.BiddingError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","BiddingError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.BiddingError_Def.__bases__:
                bases = list(ns0.BiddingError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.BiddingError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BiddingStrategy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BiddingStrategy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.BiddingStrategy_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"BiddingStrategy.Type"), aname="_BiddingStrategy_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._BiddingStrategy_Type = None
                    return
            Holder.__name__ = "BiddingStrategy_Holder"
            self.pyclass = Holder

    class BiddingTransition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BiddingTransition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.BiddingTransition_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","BiddingStrategy",lazy=False)(pname=(ns,"targetBiddingStrategy"), aname="_targetBiddingStrategy", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","AdGroupBids",lazy=False)(pname=(ns,"explicitAdGroupBids"), aname="_explicitAdGroupBids", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"BiddingTransition.Type"), aname="_BiddingTransition_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._targetBiddingStrategy = None
                    self._explicitAdGroupBids = None
                    self._BiddingTransition_Type = None
                    return
            Holder.__name__ = "BiddingTransition_Holder"
            self.pyclass = Holder

    class BiddingTransitionError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BiddingTransitionError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.BiddingTransitionError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","BiddingTransitionError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.BiddingTransitionError_Def.__bases__:
                bases = list(ns0.BiddingTransitionError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.BiddingTransitionError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BillingSummary_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BillingSummary")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.BillingSummary_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"numOperations"), aname="_numOperations", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"numUnits"), aname="_numUnits", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._numOperations = None
                    self._numUnits = None
                    return
            Holder.__name__ = "BillingSummary_Holder"
            self.pyclass = Holder

    class Budget_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Budget")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Budget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","Budget.BudgetPeriod",lazy=False)(pname=(ns,"period"), aname="_period", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Money",lazy=False)(pname=(ns,"amount"), aname="_amount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Budget.BudgetDeliveryMethod",lazy=False)(pname=(ns,"deliveryMethod"), aname="_deliveryMethod", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._period = None
                    self._amount = None
                    self._deliveryMethod = None
                    return
            Holder.__name__ = "Budget_Holder"
            self.pyclass = Holder

    class BudgetError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BudgetError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.BudgetError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","BudgetError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.BudgetError_Def.__bases__:
                bases = list(ns0.BudgetError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.BudgetError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BudgetOptimizer_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BudgetOptimizer")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.BudgetOptimizer_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"enhancedCpcEnabled"), aname="_enhancedCpcEnabled", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Money",lazy=False)(pname=(ns,"bidCeiling"), aname="_bidCeiling", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.BiddingStrategy_Def not in ns0.BudgetOptimizer_Def.__bases__:
                bases = list(ns0.BudgetOptimizer_Def.__bases__)
                bases.insert(0, ns0.BiddingStrategy_Def)
                ns0.BudgetOptimizer_Def.__bases__ = tuple(bases)

            ns0.BiddingStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BudgetOptimizerAdGroupBids_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BudgetOptimizerAdGroupBids")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.BudgetOptimizerAdGroupBids_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","Bid",lazy=False)(pname=(ns,"proxyKeywordMaxCpc"), aname="_proxyKeywordMaxCpc", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Bid",lazy=False)(pname=(ns,"proxySiteMaxCpc"), aname="_proxySiteMaxCpc", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"enhancedCpcEnabled"), aname="_enhancedCpcEnabled", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.AdGroupBids_Def not in ns0.BudgetOptimizerAdGroupBids_Def.__bases__:
                bases = list(ns0.BudgetOptimizerAdGroupBids_Def.__bases__)
                bases.insert(0, ns0.AdGroupBids_Def)
                ns0.BudgetOptimizerAdGroupBids_Def.__bases__ = tuple(bases)

            ns0.AdGroupBids_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BudgetOptimizerAdGroupCriterionBids_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BudgetOptimizerAdGroupCriterionBids")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.BudgetOptimizerAdGroupCriterionBids_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","Bid",lazy=False)(pname=(ns,"proxyBid"), aname="_proxyBid", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"enhancedCpcEnabled"), aname="_enhancedCpcEnabled", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.AdGroupCriterionBids_Def not in ns0.BudgetOptimizerAdGroupCriterionBids_Def.__bases__:
                bases = list(ns0.BudgetOptimizerAdGroupCriterionBids_Def.__bases__)
                bases.insert(0, ns0.AdGroupCriterionBids_Def)
                ns0.BudgetOptimizerAdGroupCriterionBids_Def.__bases__ = tuple(bases)

            ns0.AdGroupCriterionBids_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BulkMutateJob_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BulkMutateJob")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.BulkMutateJob_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","BulkMutateJobPolicy",lazy=False)(pname=(ns,"policy"), aname="_policy", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","BulkMutateRequest",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","BasicJobStatus",lazy=False)(pname=(ns,"status"), aname="_status", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","BulkMutateJobEvent",lazy=False)(pname=(ns,"history"), aname="_history", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","BulkMutateResult",lazy=False)(pname=(ns,"result"), aname="_result", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"numRequestParts"), aname="_numRequestParts", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"numRequestPartsReceived"), aname="_numRequestPartsReceived", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Job_Def not in ns0.BulkMutateJob_Def.__bases__:
                bases = list(ns0.BulkMutateJob_Def.__bases__)
                bases.insert(0, ns0.Job_Def)
                ns0.BulkMutateJob_Def.__bases__ = tuple(bases)

            ns0.Job_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BulkMutateJobError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BulkMutateJobError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.BulkMutateJobError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","BulkMutateJobError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.BulkMutateJobError_Def.__bases__:
                bases = list(ns0.BulkMutateJobError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.BulkMutateJobError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BulkMutateJobEvent_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BulkMutateJobEvent")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.BulkMutateJobEvent_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","BasicJobStatus",lazy=False)(pname=(ns,"status"), aname="_status", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.JobEvent_Def not in ns0.BulkMutateJobEvent_Def.__bases__:
                bases = list(ns0.BulkMutateJobEvent_Def.__bases__)
                bases.insert(0, ns0.JobEvent_Def)
                ns0.BulkMutateJobEvent_Def.__bases__ = tuple(bases)

            ns0.JobEvent_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BulkMutateJobPolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BulkMutateJobPolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.BulkMutateJobPolicy_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"prerequisiteJobIds"), aname="_prerequisiteJobIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._prerequisiteJobIds = []
                    return
            Holder.__name__ = "BulkMutateJobPolicy_Holder"
            self.pyclass = Holder

    class BulkMutateJobSelector_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BulkMutateJobSelector")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.BulkMutateJobSelector_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"jobIds"), aname="_jobIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","BasicJobStatus",lazy=False)(pname=(ns,"jobStatuses"), aname="_jobStatuses", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"resultPartIndex"), aname="_resultPartIndex", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.JobSelector_Def not in ns0.BulkMutateJobSelector_Def.__bases__:
                bases = list(ns0.BulkMutateJobSelector_Def.__bases__)
                bases.insert(0, ns0.JobSelector_Def)
                ns0.BulkMutateJobSelector_Def.__bases__ = tuple(bases)

            ns0.JobSelector_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BulkMutateJobStats_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BulkMutateJobStats")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.BulkMutateJobStats_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"numOperations"), aname="_numOperations", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"numFailedOperations"), aname="_numFailedOperations", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"numUnprocessedOperations"), aname="_numUnprocessedOperations", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.JobStats_Def not in ns0.BulkMutateJobStats_Def.__bases__:
                bases = list(ns0.BulkMutateJobStats_Def.__bases__)
                bases.insert(0, ns0.JobStats_Def)
                ns0.BulkMutateJobStats_Def.__bases__ = tuple(bases)

            ns0.JobStats_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BulkMutateRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BulkMutateRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.BulkMutateRequest_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"partIndex"), aname="_partIndex", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","OperationStream",lazy=False)(pname=(ns,"operationStreams"), aname="_operationStreams", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._partIndex = None
                    self._operationStreams = []
                    return
            Holder.__name__ = "BulkMutateRequest_Holder"
            self.pyclass = Holder

    class BulkMutateResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BulkMutateResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.BulkMutateResult_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"partIndex"), aname="_partIndex", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","OperationStreamResult",lazy=False)(pname=(ns,"operationStreamResults"), aname="_operationStreamResults", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._partIndex = None
                    self._operationStreamResults = []
                    return
            Holder.__name__ = "BulkMutateResult_Holder"
            self.pyclass = Holder

    class Campaign_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Campaign")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Campaign_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","CampaignStatus",lazy=False)(pname=(ns,"status"), aname="_status", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","ServingStatus",lazy=False)(pname=(ns,"servingStatus"), aname="_servingStatus", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"startDate"), aname="_startDate", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"endDate"), aname="_endDate", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Budget",lazy=False)(pname=(ns,"budget"), aname="_budget", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","BiddingStrategy",lazy=False)(pname=(ns,"biddingStrategy"), aname="_biddingStrategy", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","ConversionOptimizerEligibility",lazy=False)(pname=(ns,"conversionOptimizerEligibility"), aname="_conversionOptimizerEligibility", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","CampaignStats",lazy=False)(pname=(ns,"campaignStats"), aname="_campaignStats", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","AdServingOptimizationStatus",lazy=False)(pname=(ns,"adServingOptimizationStatus"), aname="_adServingOptimizationStatus", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","FrequencyCap",lazy=False)(pname=(ns,"frequencyCap"), aname="_frequencyCap", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._name = None
                    self._status = None
                    self._servingStatus = None
                    self._startDate = None
                    self._endDate = None
                    self._budget = None
                    self._biddingStrategy = None
                    self._conversionOptimizerEligibility = None
                    self._campaignStats = None
                    self._adServingOptimizationStatus = None
                    self._frequencyCap = None
                    return
            Holder.__name__ = "Campaign_Holder"
            self.pyclass = Holder

    class CampaignAdExtension_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CampaignAdExtension")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CampaignAdExtension_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"campaignId"), aname="_campaignId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","AdExtension",lazy=False)(pname=(ns,"adExtension"), aname="_adExtension", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","CampaignAdExtension.Status",lazy=False)(pname=(ns,"status"), aname="_status", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","CampaignAdExtension.ApprovalStatus",lazy=False)(pname=(ns,"approvalStatus"), aname="_approvalStatus", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","CampaignAdExtensionStats",lazy=False)(pname=(ns,"stats"), aname="_stats", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._campaignId = None
                    self._adExtension = None
                    self._status = None
                    self._approvalStatus = None
                    self._stats = None
                    return
            Holder.__name__ = "CampaignAdExtension_Holder"
            self.pyclass = Holder

    class CampaignAdExtensionError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CampaignAdExtensionError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CampaignAdExtensionError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","CampaignAdExtensionError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.CampaignAdExtensionError_Def.__bases__:
                bases = list(ns0.CampaignAdExtensionError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.CampaignAdExtensionError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CampaignAdExtensionOperation_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CampaignAdExtensionOperation")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CampaignAdExtensionOperation_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","CampaignAdExtension",lazy=False)(pname=(ns,"operand"), aname="_operand", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Operation_Def not in ns0.CampaignAdExtensionOperation_Def.__bases__:
                bases = list(ns0.CampaignAdExtensionOperation_Def.__bases__)
                bases.insert(0, ns0.Operation_Def)
                ns0.CampaignAdExtensionOperation_Def.__bases__ = tuple(bases)

            ns0.Operation_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CampaignAdExtensionStats_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CampaignAdExtensionStats")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CampaignAdExtensionStats_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Stats_Def not in ns0.CampaignAdExtensionStats_Def.__bases__:
                bases = list(ns0.CampaignAdExtensionStats_Def.__bases__)
                bases.insert(0, ns0.Stats_Def)
                ns0.CampaignAdExtensionStats_Def.__bases__ = tuple(bases)

            ns0.Stats_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CampaignCriterion_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CampaignCriterion")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CampaignCriterion_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"campaignId"), aname="_campaignId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Criterion",lazy=False)(pname=(ns,"criterion"), aname="_criterion", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CampaignCriterion.Type"), aname="_CampaignCriterion_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._campaignId = None
                    self._criterion = None
                    self._CampaignCriterion_Type = None
                    return
            Holder.__name__ = "CampaignCriterion_Holder"
            self.pyclass = Holder

    class CampaignCriterionError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CampaignCriterionError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CampaignCriterionError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","CampaignCriterionError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.CampaignCriterionError_Def.__bases__:
                bases = list(ns0.CampaignCriterionError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.CampaignCriterionError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CampaignCriterionLimitExceeded_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CampaignCriterionLimitExceeded")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CampaignCriterionLimitExceeded_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","CampaignCriterionLimitExceeded.CriteriaLimitType",lazy=False)(pname=(ns,"limitType"), aname="_limitType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.EntityCountLimitExceeded_Def not in ns0.CampaignCriterionLimitExceeded_Def.__bases__:
                bases = list(ns0.CampaignCriterionLimitExceeded_Def.__bases__)
                bases.insert(0, ns0.EntityCountLimitExceeded_Def)
                ns0.CampaignCriterionLimitExceeded_Def.__bases__ = tuple(bases)

            ns0.EntityCountLimitExceeded_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CampaignCriterionOperation_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CampaignCriterionOperation")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CampaignCriterionOperation_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","CampaignCriterion",lazy=False)(pname=(ns,"operand"), aname="_operand", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Operation_Def not in ns0.CampaignCriterionOperation_Def.__bases__:
                bases = list(ns0.CampaignCriterionOperation_Def.__bases__)
                bases.insert(0, ns0.Operation_Def)
                ns0.CampaignCriterionOperation_Def.__bases__ = tuple(bases)

            ns0.Operation_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CampaignError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CampaignError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CampaignError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","CampaignError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.CampaignError_Def.__bases__:
                bases = list(ns0.CampaignError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.CampaignError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CampaignOperation_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CampaignOperation")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CampaignOperation_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","BiddingTransition",lazy=False)(pname=(ns,"biddingTransition"), aname="_biddingTransition", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Campaign",lazy=False)(pname=(ns,"operand"), aname="_operand", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Operation_Def not in ns0.CampaignOperation_Def.__bases__:
                bases = list(ns0.CampaignOperation_Def.__bases__)
                bases.insert(0, ns0.Operation_Def)
                ns0.CampaignOperation_Def.__bases__ = tuple(bases)

            ns0.Operation_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CampaignStats_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CampaignStats")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CampaignStats_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Stats_Def not in ns0.CampaignStats_Def.__bases__:
                bases = list(ns0.CampaignStats_Def.__bases__)
                bases.insert(0, ns0.Stats_Def)
                ns0.CampaignStats_Def.__bases__ = tuple(bases)

            ns0.Stats_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CampaignTargetOperation_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CampaignTargetOperation")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CampaignTargetOperation_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","TargetList",lazy=False)(pname=(ns,"operand"), aname="_operand", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Operation_Def not in ns0.CampaignTargetOperation_Def.__bases__:
                bases = list(ns0.CampaignTargetOperation_Def.__bases__)
                bases.insert(0, ns0.Operation_Def)
                ns0.CampaignTargetOperation_Def.__bases__ = tuple(bases)

            ns0.Operation_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CityTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CityTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CityTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"cityName"), aname="_cityName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"provinceCode"), aname="_provinceCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.GeoTarget_Def not in ns0.CityTarget_Def.__bases__:
                bases = list(ns0.CityTarget_Def.__bases__)
                bases.insert(0, ns0.GeoTarget_Def)
                ns0.CityTarget_Def.__bases__ = tuple(bases)

            ns0.GeoTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ClientTermsError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ClientTermsError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ClientTermsError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","ClientTermsError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.ClientTermsError_Def.__bases__:
                bases = list(ns0.ClientTermsError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.ClientTermsError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ComparableValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ComparableValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ComparableValue_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"ComparableValue.Type"), aname="_ComparableValue_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ComparableValue_Type = None
                    return
            Holder.__name__ = "ComparableValue_Holder"
            self.pyclass = Holder

    class ContentLabel_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ContentLabel")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ContentLabel_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","ContentLabelType",lazy=False)(pname=(ns,"contentLabelType"), aname="_contentLabelType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Criterion_Def not in ns0.ContentLabel_Def.__bases__:
                bases = list(ns0.ContentLabel_Def.__bases__)
                bases.insert(0, ns0.Criterion_Def)
                ns0.ContentLabel_Def.__bases__ = tuple(bases)

            ns0.Criterion_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ConversionOptimizer_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ConversionOptimizer")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ConversionOptimizer_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","PricingModel",lazy=False)(pname=(ns,"pricingModel"), aname="_pricingModel", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","ConversionOptimizerBidType",lazy=False)(pname=(ns,"conversionOptimizerBidType"), aname="_conversionOptimizerBidType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","ConversionDeduplicationMode",lazy=False)(pname=(ns,"deduplicationMode"), aname="_deduplicationMode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.BiddingStrategy_Def not in ns0.ConversionOptimizer_Def.__bases__:
                bases = list(ns0.ConversionOptimizer_Def.__bases__)
                bases.insert(0, ns0.BiddingStrategy_Def)
                ns0.ConversionOptimizer_Def.__bases__ = tuple(bases)

            ns0.BiddingStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ConversionOptimizerAdGroupBids_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ConversionOptimizerAdGroupBids")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ConversionOptimizerAdGroupBids_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","Bid",lazy=False)(pname=(ns,"targetCpa"), aname="_targetCpa", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","ConversionOptimizerBidType",lazy=False)(pname=(ns,"conversionOptimizerBidType"), aname="_conversionOptimizerBidType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","ConversionDeduplicationMode",lazy=False)(pname=(ns,"deduplicationMode"), aname="_deduplicationMode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.AdGroupBids_Def not in ns0.ConversionOptimizerAdGroupBids_Def.__bases__:
                bases = list(ns0.ConversionOptimizerAdGroupBids_Def.__bases__)
                bases.insert(0, ns0.AdGroupBids_Def)
                ns0.ConversionOptimizerAdGroupBids_Def.__bases__ = tuple(bases)

            ns0.AdGroupBids_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ConversionOptimizerAdGroupCriterionBids_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ConversionOptimizerAdGroupCriterionBids")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ConversionOptimizerAdGroupCriterionBids_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.AdGroupCriterionBids_Def not in ns0.ConversionOptimizerAdGroupCriterionBids_Def.__bases__:
                bases = list(ns0.ConversionOptimizerAdGroupCriterionBids_Def.__bases__)
                bases.insert(0, ns0.AdGroupCriterionBids_Def)
                ns0.ConversionOptimizerAdGroupCriterionBids_Def.__bases__ = tuple(bases)

            ns0.AdGroupCriterionBids_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ConversionOptimizerBiddingTransition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ConversionOptimizerBiddingTransition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ConversionOptimizerBiddingTransition_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"useSavedBids"), aname="_useSavedBids", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.BiddingTransition_Def not in ns0.ConversionOptimizerBiddingTransition_Def.__bases__:
                bases = list(ns0.ConversionOptimizerBiddingTransition_Def.__bases__)
                bases.insert(0, ns0.BiddingTransition_Def)
                ns0.ConversionOptimizerBiddingTransition_Def.__bases__ = tuple(bases)

            ns0.BiddingTransition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ConversionOptimizerEligibility_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ConversionOptimizerEligibility")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ConversionOptimizerEligibility_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"eligible"), aname="_eligible", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","ConversionOptimizerEligibility.RejectionReason",lazy=False)(pname=(ns,"rejectionReasons"), aname="_rejectionReasons", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._eligible = None
                    self._rejectionReasons = []
                    return
            Holder.__name__ = "ConversionOptimizerEligibility_Holder"
            self.pyclass = Holder

    class CountryTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CountryTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CountryTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.GeoTarget_Def not in ns0.CountryTarget_Def.__bases__:
                bases = list(ns0.CountryTarget_Def.__bases__)
                bases.insert(0, ns0.GeoTarget_Def)
                ns0.CountryTarget_Def.__bases__ = tuple(bases)

            ns0.GeoTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Criterion_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Criterion")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Criterion_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Criterion.Type"), aname="_Criterion_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._Criterion_Type = None
                    return
            Holder.__name__ = "Criterion_Holder"
            self.pyclass = Holder

    class CriterionPolicyError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CriterionPolicyError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CriterionPolicyError_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.PolicyViolationError_Def not in ns0.CriterionPolicyError_Def.__bases__:
                bases = list(ns0.CriterionPolicyError_Def.__bases__)
                bases.insert(0, ns0.PolicyViolationError_Def)
                ns0.CriterionPolicyError_Def.__bases__ = tuple(bases)

            ns0.PolicyViolationError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DatabaseError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "DatabaseError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DatabaseError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","DatabaseError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.DatabaseError_Def.__bases__:
                bases = list(ns0.DatabaseError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.DatabaseError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DateError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "DateError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DateError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","DateError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.DateError_Def.__bases__:
                bases = list(ns0.DateError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.DateError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DemographicTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "DemographicTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DemographicTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"bidModifier"), aname="_bidModifier", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.DemographicTarget_Def.__bases__:
                bases = list(ns0.DemographicTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.DemographicTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DemographicTargetList_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "DemographicTargetList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DemographicTargetList_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","DemographicTarget",lazy=False)(pname=(ns,"targets"), aname="_targets", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.TargetList_Def not in ns0.DemographicTargetList_Def.__bases__:
                bases = list(ns0.DemographicTargetList_Def.__bases__)
                bases.insert(0, ns0.TargetList_Def)
                ns0.DemographicTargetList_Def.__bases__ = tuple(bases)

            ns0.TargetList_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DeprecatedAd_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "DeprecatedAd")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DeprecatedAd_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","DeprecatedAd.Type",lazy=False)(pname=(ns,"type"), aname="_type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Ad_Def not in ns0.DeprecatedAd_Def.__bases__:
                bases = list(ns0.DeprecatedAd_Def.__bases__)
                bases.insert(0, ns0.Ad_Def)
                ns0.DeprecatedAd_Def.__bases__ = tuple(bases)

            ns0.Ad_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Dimensions_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Dimensions")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Dimensions_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"width"), aname="_width", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"height"), aname="_height", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._width = None
                    self._height = None
                    return
            Holder.__name__ = "Dimensions_Holder"
            self.pyclass = Holder

    class DistinctError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "DistinctError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DistinctError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","DistinctError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.DistinctError_Def.__bases__:
                bases = list(ns0.DistinctError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.DistinctError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DoubleValue_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "DoubleValue")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DoubleValue_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"number"), aname="_number", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.NumberValue_Def not in ns0.DoubleValue_Def.__bases__:
                bases = list(ns0.DoubleValue_Def.__bases__)
                bases.insert(0, ns0.NumberValue_Def)
                ns0.DoubleValue_Def.__bases__ = tuple(bases)

            ns0.NumberValue_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class EntityAccessDenied_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "EntityAccessDenied")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.EntityAccessDenied_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","EntityAccessDenied.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.EntityAccessDenied_Def.__bases__:
                bases = list(ns0.EntityAccessDenied_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.EntityAccessDenied_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class EntityCountLimitExceeded_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "EntityCountLimitExceeded")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.EntityCountLimitExceeded_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","EntityCountLimitExceeded.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"enclosingId"), aname="_enclosingId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"limit"), aname="_limit", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.EntityCountLimitExceeded_Def.__bases__:
                bases = list(ns0.EntityCountLimitExceeded_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.EntityCountLimitExceeded_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class EntityId_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "EntityId")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.EntityId_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","EntityId.Type",lazy=False)(pname=(ns,"type"), aname="_type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._type = None
                    self._value = None
                    return
            Holder.__name__ = "EntityId_Holder"
            self.pyclass = Holder

    class EntityNotFound_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "EntityNotFound")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.EntityNotFound_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","EntityNotFound.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.EntityNotFound_Def.__bases__:
                bases = list(ns0.EntityNotFound_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.EntityNotFound_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ExemptionRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ExemptionRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ExemptionRequest_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","PolicyViolationKey",lazy=False)(pname=(ns,"key"), aname="_key", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._key = None
                    return
            Holder.__name__ = "ExemptionRequest_Holder"
            self.pyclass = Holder

    class FailureResult_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "FailureResult")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FailureResult_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","ApiException",lazy=False)(pname=(ns,"cause"), aname="_cause", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.OperationResult_Def not in ns0.FailureResult_Def.__bases__:
                bases = list(ns0.FailureResult_Def.__bases__)
                bases.insert(0, ns0.OperationResult_Def)
                ns0.FailureResult_Def.__bases__ = tuple(bases)

            ns0.OperationResult_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FrequencyCap_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "FrequencyCap")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FrequencyCap_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"impressions"), aname="_impressions", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","TimeUnit",lazy=False)(pname=(ns,"timeUnit"), aname="_timeUnit", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Level",lazy=False)(pname=(ns,"level"), aname="_level", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._impressions = None
                    self._timeUnit = None
                    self._level = None
                    return
            Holder.__name__ = "FrequencyCap_Holder"
            self.pyclass = Holder

    class GenderTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "GenderTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.GenderTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","GenderTarget.Gender",lazy=False)(pname=(ns,"gender"), aname="_gender", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.DemographicTarget_Def not in ns0.GenderTarget_Def.__bases__:
                bases = list(ns0.GenderTarget_Def.__bases__)
                bases.insert(0, ns0.DemographicTarget_Def)
                ns0.GenderTarget_Def.__bases__ = tuple(bases)

            ns0.DemographicTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GeoPoint_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "GeoPoint")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GeoPoint_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"latitudeInMicroDegrees"), aname="_latitudeInMicroDegrees", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"longitudeInMicroDegrees"), aname="_longitudeInMicroDegrees", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._latitudeInMicroDegrees = None
                    self._longitudeInMicroDegrees = None
                    return
            Holder.__name__ = "GeoPoint_Holder"
            self.pyclass = Holder

    class GeoTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "GeoTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.GeoTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"excluded"), aname="_excluded", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.GeoTarget_Def.__bases__:
                bases = list(ns0.GeoTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.GeoTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GeoTargetList_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "GeoTargetList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.GeoTargetList_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","GeoTarget",lazy=False)(pname=(ns,"targets"), aname="_targets", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.TargetList_Def not in ns0.GeoTargetList_Def.__bases__:
                bases = list(ns0.GeoTargetList_Def.__bases__)
                bases.insert(0, ns0.TargetList_Def)
                ns0.GeoTargetList_Def.__bases__ = tuple(bases)

            ns0.TargetList_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class IdError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "IdError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.IdError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","IdError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.IdError_Def.__bases__:
                bases = list(ns0.IdError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.IdError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Image_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Image")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Image_Def.schema
            TClist = [ZSI.TC.Base64String(pname=(ns,"data"), aname="_data", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Media_Def not in ns0.Image_Def.__bases__:
                bases = list(ns0.Image_Def.__bases__)
                bases.insert(0, ns0.Media_Def)
                ns0.Image_Def.__bases__ = tuple(bases)

            ns0.Media_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ImageAd_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ImageAd")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ImageAd_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","Image",lazy=False)(pname=(ns,"image"), aname="_image", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"adToCopyImageFrom"), aname="_adToCopyImageFrom", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Ad_Def not in ns0.ImageAd_Def.__bases__:
                bases = list(ns0.ImageAd_Def.__bases__)
                bases.insert(0, ns0.Ad_Def)
                ns0.ImageAd_Def.__bases__ = tuple(bases)

            ns0.Ad_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ImageError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ImageError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ImageError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","ImageError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.ImageError_Def.__bases__:
                bases = list(ns0.ImageError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.ImageError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class InternalApiError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "InternalApiError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.InternalApiError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","InternalApiError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.InternalApiError_Def.__bases__:
                bases = list(ns0.InternalApiError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.InternalApiError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Job_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Job")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Job_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"customerJobKey"), aname="_customerJobKey", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","JobContext",lazy=False)(pname=(ns,"context"), aname="_context", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","ApiErrorReason",lazy=False)(pname=(ns,"failureReason"), aname="_failureReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","JobStats",lazy=False)(pname=(ns,"stats"), aname="_stats", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","BillingSummary",lazy=False)(pname=(ns,"billingSummary"), aname="_billingSummary", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Job.Type"), aname="_Job_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._customerJobKey = None
                    self._context = None
                    self._failureReason = None
                    self._stats = None
                    self._billingSummary = None
                    self._Job_Type = None
                    return
            Holder.__name__ = "Job_Holder"
            self.pyclass = Holder

    class JobContext_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "JobContext")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.JobContext_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"authenticatedUserEmail"), aname="_authenticatedUserEmail", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"effectiveCustomerId"), aname="_effectiveCustomerId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._authenticatedUserEmail = None
                    self._effectiveCustomerId = None
                    return
            Holder.__name__ = "JobContext_Holder"
            self.pyclass = Holder

    class JobError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "JobError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.JobError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","JobError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.JobError_Def.__bases__:
                bases = list(ns0.JobError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.JobError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class JobEvent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "JobEvent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.JobEvent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"dateTime"), aname="_dateTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"JobEvent.Type"), aname="_JobEvent_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._dateTime = None
                    self._JobEvent_Type = None
                    return
            Holder.__name__ = "JobEvent_Holder"
            self.pyclass = Holder

    class JobOperation_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "JobOperation")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.JobOperation_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","Job",lazy=False)(pname=(ns,"operand"), aname="_operand", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Operation_Def not in ns0.JobOperation_Def.__bases__:
                bases = list(ns0.JobOperation_Def.__bases__)
                bases.insert(0, ns0.Operation_Def)
                ns0.JobOperation_Def.__bases__ = tuple(bases)

            ns0.Operation_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class JobSelector_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "JobSelector")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.JobSelector_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"customerJobKeys"), aname="_customerJobKeys", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"includeJobsSubmittedByOtherUsers"), aname="_includeJobsSubmittedByOtherUsers", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"includeHistory"), aname="_includeHistory", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"includeStats"), aname="_includeStats", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"JobSelector.Type"), aname="_JobSelector_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._customerJobKeys = []
                    self._includeJobsSubmittedByOtherUsers = None
                    self._includeHistory = None
                    self._includeStats = None
                    self._JobSelector_Type = None
                    return
            Holder.__name__ = "JobSelector_Holder"
            self.pyclass = Holder

    class JobStats_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "JobStats")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.JobStats_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"progressPercent"), aname="_progressPercent", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"pendingTimeMillis"), aname="_pendingTimeMillis", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"processingTimeMillis"), aname="_processingTimeMillis", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"JobStats.Type"), aname="_JobStats_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._progressPercent = None
                    self._pendingTimeMillis = None
                    self._processingTimeMillis = None
                    self._JobStats_Type = None
                    return
            Holder.__name__ = "JobStats_Holder"
            self.pyclass = Holder

    class Keyword_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Keyword")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Keyword_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"text"), aname="_text", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","KeywordMatchType",lazy=False)(pname=(ns,"matchType"), aname="_matchType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Criterion_Def not in ns0.Keyword_Def.__bases__:
                bases = list(ns0.Keyword_Def.__bases__)
                bases.insert(0, ns0.Criterion_Def)
                ns0.Keyword_Def.__bases__ = tuple(bases)

            ns0.Criterion_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LanguageTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "LanguageTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.LanguageTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"languageCode"), aname="_languageCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.LanguageTarget_Def.__bases__:
                bases = list(ns0.LanguageTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.LanguageTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LanguageTargetList_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "LanguageTargetList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.LanguageTargetList_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","LanguageTarget",lazy=False)(pname=(ns,"targets"), aname="_targets", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.TargetList_Def not in ns0.LanguageTargetList_Def.__bases__:
                bases = list(ns0.LanguageTargetList_Def.__bases__)
                bases.insert(0, ns0.TargetList_Def)
                ns0.LanguageTargetList_Def.__bases__ = tuple(bases)

            ns0.TargetList_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LocalBusinessAd_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "LocalBusinessAd")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.LocalBusinessAd_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"fullBusinessName"), aname="_fullBusinessName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"phoneNumber"), aname="_phoneNumber", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"streetAddress"), aname="_streetAddress", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"city"), aname="_city", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"region"), aname="_region", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"regionCode"), aname="_regionCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"postalCode"), aname="_postalCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"businessName"), aname="_businessName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description1"), aname="_description1", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description2"), aname="_description2", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","ProximityTarget",lazy=False)(pname=(ns,"target"), aname="_target", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Image",lazy=False)(pname=(ns,"businessImage"), aname="_businessImage", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Image",lazy=False)(pname=(ns,"icon"), aname="_icon", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Ad_Def not in ns0.LocalBusinessAd_Def.__bases__:
                bases = list(ns0.LocalBusinessAd_Def.__bases__)
                bases.insert(0, ns0.Ad_Def)
                ns0.LocalBusinessAd_Def.__bases__ = tuple(bases)

            ns0.Ad_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LocationExtension_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "LocationExtension")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.LocationExtension_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","Address",lazy=False)(pname=(ns,"address"), aname="_address", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","GeoPoint",lazy=False)(pname=(ns,"geoPoint"), aname="_geoPoint", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64String(pname=(ns,"encodedLocation"), aname="_encodedLocation", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"companyName"), aname="_companyName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"phoneNumber"), aname="_phoneNumber", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","LocationExtension.Source",lazy=False)(pname=(ns,"source"), aname="_source", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"iconMediaId"), aname="_iconMediaId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"imageMediaId"), aname="_imageMediaId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.AdExtension_Def not in ns0.LocationExtension_Def.__bases__:
                bases = list(ns0.LocationExtension_Def.__bases__)
                bases.insert(0, ns0.AdExtension_Def)
                ns0.LocationExtension_Def.__bases__ = tuple(bases)

            ns0.AdExtension_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LocationOverrideInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "LocationOverrideInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.LocationOverrideInfo_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"radius"), aname="_radius", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","LocationOverrideInfo.RadiusUnits",lazy=False)(pname=(ns,"radiusUnits"), aname="_radiusUnits", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._radius = None
                    self._radiusUnits = None
                    return
            Holder.__name__ = "LocationOverrideInfo_Holder"
            self.pyclass = Holder

    class LocationSyncExtension_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "LocationSyncExtension")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.LocationSyncExtension_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"email"), aname="_email", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"authToken"), aname="_authToken", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"iconMediaId"), aname="_iconMediaId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shouldSyncUrl"), aname="_shouldSyncUrl", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.AdExtension_Def not in ns0.LocationSyncExtension_Def.__bases__:
                bases = list(ns0.LocationSyncExtension_Def.__bases__)
                bases.insert(0, ns0.AdExtension_Def)
                ns0.LocationSyncExtension_Def.__bases__ = tuple(bases)

            ns0.AdExtension_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LongValue_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "LongValue")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.LongValue_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"number"), aname="_number", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.NumberValue_Def not in ns0.LongValue_Def.__bases__:
                bases = list(ns0.LongValue_Def.__bases__)
                bases.insert(0, ns0.NumberValue_Def)
                ns0.LongValue_Def.__bases__ = tuple(bases)

            ns0.NumberValue_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LostResult_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "LostResult")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.LostResult_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.OperationResult_Def not in ns0.LostResult_Def.__bases__:
                bases = list(ns0.LostResult_Def.__bases__)
                bases.insert(0, ns0.OperationResult_Def)
                ns0.LostResult_Def.__bases__ = tuple(bases)

            ns0.OperationResult_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ManualCPC_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ManualCPC")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ManualCPC_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"enhancedCpcEnabled"), aname="_enhancedCpcEnabled", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","PositionPreference",lazy=False)(pname=(ns,"positionPreference"), aname="_positionPreference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.BiddingStrategy_Def not in ns0.ManualCPC_Def.__bases__:
                bases = list(ns0.ManualCPC_Def.__bases__)
                bases.insert(0, ns0.BiddingStrategy_Def)
                ns0.ManualCPC_Def.__bases__ = tuple(bases)

            ns0.BiddingStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ManualCPCAdGroupBids_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ManualCPCAdGroupBids")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ManualCPCAdGroupBids_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","Bid",lazy=False)(pname=(ns,"keywordMaxCpc"), aname="_keywordMaxCpc", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Bid",lazy=False)(pname=(ns,"keywordContentMaxCpc"), aname="_keywordContentMaxCpc", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Bid",lazy=False)(pname=(ns,"siteMaxCpc"), aname="_siteMaxCpc", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"enhancedCpcEnabled"), aname="_enhancedCpcEnabled", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.AdGroupBids_Def not in ns0.ManualCPCAdGroupBids_Def.__bases__:
                bases = list(ns0.ManualCPCAdGroupBids_Def.__bases__)
                bases.insert(0, ns0.AdGroupBids_Def)
                ns0.ManualCPCAdGroupBids_Def.__bases__ = tuple(bases)

            ns0.AdGroupBids_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ManualCPCAdGroupCriterionBids_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ManualCPCAdGroupCriterionBids")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ManualCPCAdGroupCriterionBids_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","Bid",lazy=False)(pname=(ns,"maxCpc"), aname="_maxCpc", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","BidSource",lazy=False)(pname=(ns,"bidSource"), aname="_bidSource", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","PositionPreferenceAdGroupCriterionBids",lazy=False)(pname=(ns,"positionPreferenceBids"), aname="_positionPreferenceBids", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"enhancedCpcEnabled"), aname="_enhancedCpcEnabled", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.AdGroupCriterionBids_Def not in ns0.ManualCPCAdGroupCriterionBids_Def.__bases__:
                bases = list(ns0.ManualCPCAdGroupCriterionBids_Def.__bases__)
                bases.insert(0, ns0.AdGroupCriterionBids_Def)
                ns0.ManualCPCAdGroupCriterionBids_Def.__bases__ = tuple(bases)

            ns0.AdGroupCriterionBids_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ManualCPCAdGroupCriterionExperimentBidMultiplier_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ManualCPCAdGroupCriterionExperimentBidMultiplier")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ManualCPCAdGroupCriterionExperimentBidMultiplier_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","BidMultiplier",lazy=False)(pname=(ns,"maxCpcMultiplier"), aname="_maxCpcMultiplier", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","MultiplierSource",lazy=False)(pname=(ns,"multiplierSource"), aname="_multiplierSource", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.AdGroupCriterionExperimentBidMultiplier_Def not in ns0.ManualCPCAdGroupCriterionExperimentBidMultiplier_Def.__bases__:
                bases = list(ns0.ManualCPCAdGroupCriterionExperimentBidMultiplier_Def.__bases__)
                bases.insert(0, ns0.AdGroupCriterionExperimentBidMultiplier_Def)
                ns0.ManualCPCAdGroupCriterionExperimentBidMultiplier_Def.__bases__ = tuple(bases)

            ns0.AdGroupCriterionExperimentBidMultiplier_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ManualCPCAdGroupExperimentBidMultipliers_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ManualCPCAdGroupExperimentBidMultipliers")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ManualCPCAdGroupExperimentBidMultipliers_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","BidMultiplier",lazy=False)(pname=(ns,"maxCpcMultiplier"), aname="_maxCpcMultiplier", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","BidMultiplier",lazy=False)(pname=(ns,"maxContentCpcMultiplier"), aname="_maxContentCpcMultiplier", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.AdGroupExperimentBidMultipliers_Def not in ns0.ManualCPCAdGroupExperimentBidMultipliers_Def.__bases__:
                bases = list(ns0.ManualCPCAdGroupExperimentBidMultipliers_Def.__bases__)
                bases.insert(0, ns0.AdGroupExperimentBidMultipliers_Def)
                ns0.ManualCPCAdGroupExperimentBidMultipliers_Def.__bases__ = tuple(bases)

            ns0.AdGroupExperimentBidMultipliers_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ManualCPM_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ManualCPM")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ManualCPM_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.BiddingStrategy_Def not in ns0.ManualCPM_Def.__bases__:
                bases = list(ns0.ManualCPM_Def.__bases__)
                bases.insert(0, ns0.BiddingStrategy_Def)
                ns0.ManualCPM_Def.__bases__ = tuple(bases)

            ns0.BiddingStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ManualCPMAdGroupBids_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ManualCPMAdGroupBids")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ManualCPMAdGroupBids_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","Bid",lazy=False)(pname=(ns,"maxCpm"), aname="_maxCpm", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.AdGroupBids_Def not in ns0.ManualCPMAdGroupBids_Def.__bases__:
                bases = list(ns0.ManualCPMAdGroupBids_Def.__bases__)
                bases.insert(0, ns0.AdGroupBids_Def)
                ns0.ManualCPMAdGroupBids_Def.__bases__ = tuple(bases)

            ns0.AdGroupBids_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ManualCPMAdGroupCriterionBids_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ManualCPMAdGroupCriterionBids")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ManualCPMAdGroupCriterionBids_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","Bid",lazy=False)(pname=(ns,"maxCpm"), aname="_maxCpm", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","BidSource",lazy=False)(pname=(ns,"bidSource"), aname="_bidSource", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.AdGroupCriterionBids_Def not in ns0.ManualCPMAdGroupCriterionBids_Def.__bases__:
                bases = list(ns0.ManualCPMAdGroupCriterionBids_Def.__bases__)
                bases.insert(0, ns0.AdGroupCriterionBids_Def)
                ns0.ManualCPMAdGroupCriterionBids_Def.__bases__ = tuple(bases)

            ns0.AdGroupCriterionBids_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ManualCPMAdGroupExperimentBidMultipliers_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ManualCPMAdGroupExperimentBidMultipliers")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ManualCPMAdGroupExperimentBidMultipliers_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","BidMultiplier",lazy=False)(pname=(ns,"maxCpmMultiplier"), aname="_maxCpmMultiplier", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.AdGroupExperimentBidMultipliers_Def not in ns0.ManualCPMAdGroupExperimentBidMultipliers_Def.__bases__:
                bases = list(ns0.ManualCPMAdGroupExperimentBidMultipliers_Def.__bases__)
                bases.insert(0, ns0.AdGroupExperimentBidMultipliers_Def)
                ns0.ManualCPMAdGroupExperimentBidMultipliers_Def.__bases__ = tuple(bases)

            ns0.AdGroupExperimentBidMultipliers_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Media_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Media")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Media_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"mediaId"), aname="_mediaId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Media.MediaType",lazy=False)(pname=(ns,"type"), aname="_type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"referenceId"), aname="_referenceId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Media_Size_DimensionsMapEntry",lazy=False)(pname=(ns,"dimensions"), aname="_dimensions", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Media_Size_StringMapEntry",lazy=False)(pname=(ns,"urls"), aname="_urls", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Media.MimeType",lazy=False)(pname=(ns,"mimeType"), aname="_mimeType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sourceUrl"), aname="_sourceUrl", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fileSize"), aname="_fileSize", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"creationTime"), aname="_creationTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Media.Type"), aname="_Media_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._mediaId = None
                    self._type = None
                    self._referenceId = None
                    self._dimensions = []
                    self._urls = []
                    self._mimeType = None
                    self._sourceUrl = None
                    self._name = None
                    self._fileSize = None
                    self._creationTime = None
                    self._Media_Type = None
                    return
            Holder.__name__ = "Media_Holder"
            self.pyclass = Holder

    class MediaError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "MediaError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MediaError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","MediaError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.MediaError_Def.__bases__:
                bases = list(ns0.MediaError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.MediaError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Media_Size_DimensionsMapEntry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Media_Size_DimensionsMapEntry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Media_Size_DimensionsMapEntry_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","Media.Size",lazy=False)(pname=(ns,"key"), aname="_key", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Dimensions",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._key = None
                    self._value = None
                    return
            Holder.__name__ = "Media_Size_DimensionsMapEntry_Holder"
            self.pyclass = Holder

    class Media_Size_StringMapEntry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Media_Size_StringMapEntry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Media_Size_StringMapEntry_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","Media.Size",lazy=False)(pname=(ns,"key"), aname="_key", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._key = None
                    self._value = None
                    return
            Holder.__name__ = "Media_Size_StringMapEntry_Holder"
            self.pyclass = Holder

    class MetroTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "MetroTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MetroTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"metroCode"), aname="_metroCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.GeoTarget_Def not in ns0.MetroTarget_Def.__bases__:
                bases = list(ns0.MetroTarget_Def.__bases__)
                bases.insert(0, ns0.GeoTarget_Def)
                ns0.MetroTarget_Def.__bases__ = tuple(bases)

            ns0.GeoTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MobileAd_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "MobileAd")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MobileAd_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"headline"), aname="_headline", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","MarkupLanguageType",lazy=False)(pname=(ns,"markupLanguages"), aname="_markupLanguages", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"mobileCarriers"), aname="_mobileCarriers", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"businessName"), aname="_businessName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"phoneNumber"), aname="_phoneNumber", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Ad_Def not in ns0.MobileAd_Def.__bases__:
                bases = list(ns0.MobileAd_Def.__bases__)
                bases.insert(0, ns0.Ad_Def)
                ns0.MobileAd_Def.__bases__ = tuple(bases)

            ns0.Ad_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MobileCarrierTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "MobileCarrierTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MobileCarrierTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"carrierName"), aname="_carrierName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.MobileTarget_Def not in ns0.MobileCarrierTarget_Def.__bases__:
                bases = list(ns0.MobileCarrierTarget_Def.__bases__)
                bases.insert(0, ns0.MobileTarget_Def)
                ns0.MobileCarrierTarget_Def.__bases__ = tuple(bases)

            ns0.MobileTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MobileExtension_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "MobileExtension")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MobileExtension_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"phoneNumber"), aname="_phoneNumber", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.AdExtension_Def not in ns0.MobileExtension_Def.__bases__:
                bases = list(ns0.MobileExtension_Def.__bases__)
                bases.insert(0, ns0.AdExtension_Def)
                ns0.MobileExtension_Def.__bases__ = tuple(bases)

            ns0.AdExtension_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MobileImageAd_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "MobileImageAd")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MobileImageAd_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","MarkupLanguageType",lazy=False)(pname=(ns,"markupLanguages"), aname="_markupLanguages", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"mobileCarriers"), aname="_mobileCarriers", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Image",lazy=False)(pname=(ns,"image"), aname="_image", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Ad_Def not in ns0.MobileImageAd_Def.__bases__:
                bases = list(ns0.MobileImageAd_Def.__bases__)
                bases.insert(0, ns0.Ad_Def)
                ns0.MobileImageAd_Def.__bases__ = tuple(bases)

            ns0.Ad_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MobilePlatformTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "MobilePlatformTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MobilePlatformTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"platformName"), aname="_platformName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.MobileTarget_Def not in ns0.MobilePlatformTarget_Def.__bases__:
                bases = list(ns0.MobilePlatformTarget_Def.__bases__)
                bases.insert(0, ns0.MobileTarget_Def)
                ns0.MobilePlatformTarget_Def.__bases__ = tuple(bases)

            ns0.MobileTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MobileTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "MobileTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MobileTarget_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.MobileTarget_Def.__bases__:
                bases = list(ns0.MobileTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.MobileTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MobileTargetList_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "MobileTargetList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MobileTargetList_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","MobileTarget",lazy=False)(pname=(ns,"targets"), aname="_targets", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.TargetList_Def not in ns0.MobileTargetList_Def.__bases__:
                bases = list(ns0.MobileTargetList_Def.__bases__)
                bases.insert(0, ns0.TargetList_Def)
                ns0.MobileTargetList_Def.__bases__ = tuple(bases)

            ns0.TargetList_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Money_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Money")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Money_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"microAmount"), aname="_microAmount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ComparableValue_Def not in ns0.Money_Def.__bases__:
                bases = list(ns0.Money_Def.__bases__)
                bases.insert(0, ns0.ComparableValue_Def)
                ns0.Money_Def.__bases__ = tuple(bases)

            ns0.ComparableValue_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NegativeAdGroupCriterion_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NegativeAdGroupCriterion")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NegativeAdGroupCriterion_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.AdGroupCriterion_Def not in ns0.NegativeAdGroupCriterion_Def.__bases__:
                bases = list(ns0.NegativeAdGroupCriterion_Def.__bases__)
                bases.insert(0, ns0.AdGroupCriterion_Def)
                ns0.NegativeAdGroupCriterion_Def.__bases__ = tuple(bases)

            ns0.AdGroupCriterion_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NegativeCampaignCriterion_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NegativeCampaignCriterion")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NegativeCampaignCriterion_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.CampaignCriterion_Def not in ns0.NegativeCampaignCriterion_Def.__bases__:
                bases = list(ns0.NegativeCampaignCriterion_Def.__bases__)
                bases.insert(0, ns0.CampaignCriterion_Def)
                ns0.NegativeCampaignCriterion_Def.__bases__ = tuple(bases)

            ns0.CampaignCriterion_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NetworkTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NetworkTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NetworkTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","NetworkCoverageType",lazy=False)(pname=(ns,"networkCoverageType"), aname="_networkCoverageType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.NetworkTarget_Def.__bases__:
                bases = list(ns0.NetworkTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.NetworkTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NetworkTargetList_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NetworkTargetList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NetworkTargetList_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","NetworkTarget",lazy=False)(pname=(ns,"targets"), aname="_targets", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.TargetList_Def not in ns0.NetworkTargetList_Def.__bases__:
                bases = list(ns0.NetworkTargetList_Def.__bases__)
                bases.insert(0, ns0.TargetList_Def)
                ns0.NetworkTargetList_Def.__bases__ = tuple(bases)

            ns0.TargetList_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NewEntityCreationError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NewEntityCreationError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NewEntityCreationError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","NewEntityCreationError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NewEntityCreationError_Def.__bases__:
                bases = list(ns0.NewEntityCreationError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NewEntityCreationError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NotEmptyError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NotEmptyError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NotEmptyError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","NotEmptyError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NotEmptyError_Def.__bases__:
                bases = list(ns0.NotEmptyError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NotEmptyError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NotWhitelistedError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NotWhitelistedError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NotWhitelistedError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","NotWhitelistedError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NotWhitelistedError_Def.__bases__:
                bases = list(ns0.NotWhitelistedError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NotWhitelistedError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NullError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NullError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NullError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","NullError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NullError_Def.__bases__:
                bases = list(ns0.NullError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NullError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NumberValue_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NumberValue")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NumberValue_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ComparableValue_Def not in ns0.NumberValue_Def.__bases__:
                bases = list(ns0.NumberValue_Def.__bases__)
                bases.insert(0, ns0.ComparableValue_Def)
                ns0.NumberValue_Def.__bases__ = tuple(bases)

            ns0.ComparableValue_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Operand_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Operand")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Operand_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","AdExtensionOverride",lazy=False)(pname=(ns,"AdExtensionOverride"), aname="_AdExtensionOverride", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","AdGroupAd",lazy=False)(pname=(ns,"AdGroupAd"), aname="_AdGroupAd", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","AdGroupCriterion",lazy=False)(pname=(ns,"AdGroupCriterion"), aname="_AdGroupCriterion", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","AdGroup",lazy=False)(pname=(ns,"AdGroup"), aname="_AdGroup", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Ad",lazy=False)(pname=(ns,"Ad"), aname="_Ad", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","CampaignAdExtension",lazy=False)(pname=(ns,"CampaignAdExtension"), aname="_CampaignAdExtension", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","CampaignCriterion",lazy=False)(pname=(ns,"CampaignCriterion"), aname="_CampaignCriterion", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Campaign",lazy=False)(pname=(ns,"Campaign"), aname="_Campaign", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Job",lazy=False)(pname=(ns,"Job"), aname="_Job", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Media",lazy=False)(pname=(ns,"Media"), aname="_Media", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","TargetList",lazy=False)(pname=(ns,"TargetList"), aname="_TargetList", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Target",lazy=False)(pname=(ns,"Target"), aname="_Target", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._AdExtensionOverride = None
                    self._AdGroupAd = None
                    self._AdGroupCriterion = None
                    self._AdGroup = None
                    self._Ad = None
                    self._CampaignAdExtension = None
                    self._CampaignCriterion = None
                    self._Campaign = None
                    self._Job = None
                    self._Media = None
                    self._TargetList = None
                    self._Target = None
                    return
            Holder.__name__ = "Operand_Holder"
            self.pyclass = Holder

    class Operation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Operation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Operation_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","Operator",lazy=False)(pname=(ns,"operator"), aname="_operator", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Operation.Type"), aname="_Operation_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._operator = None
                    self._Operation_Type = None
                    return
            Holder.__name__ = "Operation_Holder"
            self.pyclass = Holder

    class OperationAccessDenied_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "OperationAccessDenied")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.OperationAccessDenied_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","OperationAccessDenied.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.OperationAccessDenied_Def.__bases__:
                bases = list(ns0.OperationAccessDenied_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.OperationAccessDenied_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class OperationResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "OperationResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.OperationResult_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"OperationResult.Type"), aname="_OperationResult_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._OperationResult_Type = None
                    return
            Holder.__name__ = "OperationResult_Holder"
            self.pyclass = Holder

    class OperationStream_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "OperationStream")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.OperationStream_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","EntityId",lazy=False)(pname=(ns,"scopingEntityId"), aname="_scopingEntityId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Operation",lazy=False)(pname=(ns,"operations"), aname="_operations", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._scopingEntityId = None
                    self._operations = []
                    return
            Holder.__name__ = "OperationStream_Holder"
            self.pyclass = Holder

    class OperationStreamResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "OperationStreamResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.OperationStreamResult_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","OperationResult",lazy=False)(pname=(ns,"operationResults"), aname="_operationResults", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._operationResults = []
                    return
            Holder.__name__ = "OperationStreamResult_Holder"
            self.pyclass = Holder

    class OperatorError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "OperatorError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.OperatorError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","OperatorError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.OperatorError_Def.__bases__:
                bases = list(ns0.OperatorError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.OperatorError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class OverrideInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "OverrideInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.OverrideInfo_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","LocationOverrideInfo",lazy=False)(pname=(ns,"LocationOverrideInfo"), aname="_LocationOverrideInfo", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._LocationOverrideInfo = None
                    return
            Holder.__name__ = "OverrideInfo_Holder"
            self.pyclass = Holder

    class PagingError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "PagingError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.PagingError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","PagingError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.PagingError_Def.__bases__:
                bases = list(ns0.PagingError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.PagingError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PercentCPA_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "PercentCPA")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.PercentCPA_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.BiddingStrategy_Def not in ns0.PercentCPA_Def.__bases__:
                bases = list(ns0.PercentCPA_Def.__bases__)
                bases.insert(0, ns0.BiddingStrategy_Def)
                ns0.PercentCPA_Def.__bases__ = tuple(bases)

            ns0.BiddingStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PercentCPAAdGroupBids_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "PercentCPAAdGroupBids")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.PercentCPAAdGroupBids_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"percentCpa"), aname="_percentCpa", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.AdGroupBids_Def not in ns0.PercentCPAAdGroupBids_Def.__bases__:
                bases = list(ns0.PercentCPAAdGroupBids_Def.__bases__)
                bases.insert(0, ns0.AdGroupBids_Def)
                ns0.PercentCPAAdGroupBids_Def.__bases__ = tuple(bases)

            ns0.AdGroupBids_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PercentCPAAdGroupCriterionBids_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "PercentCPAAdGroupCriterionBids")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.PercentCPAAdGroupCriterionBids_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"percentCpa"), aname="_percentCpa", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","BidSource",lazy=False)(pname=(ns,"source"), aname="_source", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.AdGroupCriterionBids_Def not in ns0.PercentCPAAdGroupCriterionBids_Def.__bases__:
                bases = list(ns0.PercentCPAAdGroupCriterionBids_Def.__bases__)
                bases.insert(0, ns0.AdGroupCriterionBids_Def)
                ns0.PercentCPAAdGroupCriterionBids_Def.__bases__ = tuple(bases)

            ns0.AdGroupCriterionBids_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Placement_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Placement")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Placement_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"url"), aname="_url", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Criterion_Def not in ns0.Placement_Def.__bases__:
                bases = list(ns0.Placement_Def.__bases__)
                bases.insert(0, ns0.Criterion_Def)
                ns0.Placement_Def.__bases__ = tuple(bases)

            ns0.Criterion_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PlatformTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "PlatformTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.PlatformTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","PlatformType",lazy=False)(pname=(ns,"platformType"), aname="_platformType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.PlatformTarget_Def.__bases__:
                bases = list(ns0.PlatformTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.PlatformTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PlatformTargetList_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "PlatformTargetList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.PlatformTargetList_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","PlatformTarget",lazy=False)(pname=(ns,"targets"), aname="_targets", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.TargetList_Def not in ns0.PlatformTargetList_Def.__bases__:
                bases = list(ns0.PlatformTargetList_Def.__bases__)
                bases.insert(0, ns0.TargetList_Def)
                ns0.PlatformTargetList_Def.__bases__ = tuple(bases)

            ns0.TargetList_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PolicyViolationError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "PolicyViolationError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.PolicyViolationError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","PolicyViolationKey",lazy=False)(pname=(ns,"key"), aname="_key", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"externalPolicyName"), aname="_externalPolicyName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"externalPolicyUrl"), aname="_externalPolicyUrl", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"externalPolicyDescription"), aname="_externalPolicyDescription", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"isExemptable"), aname="_isExemptable", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","PolicyViolationError.Part",lazy=False)(pname=(ns,"violatingParts"), aname="_violatingParts", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.PolicyViolationError_Def.__bases__:
                bases = list(ns0.PolicyViolationError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.PolicyViolationError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PolicyViolationError_Part_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "PolicyViolationError.Part")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PolicyViolationError_Part_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"index"), aname="_index", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"length"), aname="_length", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._index = None
                    self._length = None
                    return
            Holder.__name__ = "PolicyViolationError.Part_Holder"
            self.pyclass = Holder

    class PolicyViolationKey_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "PolicyViolationKey")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PolicyViolationKey_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"policyName"), aname="_policyName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"violatingText"), aname="_violatingText", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._policyName = None
                    self._violatingText = None
                    return
            Holder.__name__ = "PolicyViolationKey_Holder"
            self.pyclass = Holder

    class PolygonTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "PolygonTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.PolygonTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","GeoPoint",lazy=False)(pname=(ns,"vertices"), aname="_vertices", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.GeoTarget_Def not in ns0.PolygonTarget_Def.__bases__:
                bases = list(ns0.PolygonTarget_Def.__bases__)
                bases.insert(0, ns0.GeoTarget_Def)
                ns0.PolygonTarget_Def.__bases__ = tuple(bases)

            ns0.GeoTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PositionPreferenceAdGroupCriterionBids_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "PositionPreferenceAdGroupCriterionBids")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PositionPreferenceAdGroupCriterionBids_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","Bid",lazy=False)(pname=(ns,"proxyMaxCpc"), aname="_proxyMaxCpc", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"preferredPosition"), aname="_preferredPosition", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"bottomPosition"), aname="_bottomPosition", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._proxyMaxCpc = None
                    self._preferredPosition = None
                    self._bottomPosition = None
                    return
            Holder.__name__ = "PositionPreferenceAdGroupCriterionBids_Holder"
            self.pyclass = Holder

    class Product_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Product")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Product_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","ProductCondition",lazy=False)(pname=(ns,"conditions"), aname="_conditions", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"text"), aname="_text", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Criterion_Def not in ns0.Product_Def.__bases__:
                bases = list(ns0.Product_Def.__bases__)
                bases.insert(0, ns0.Criterion_Def)
                ns0.Product_Def.__bases__ = tuple(bases)

            ns0.Criterion_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ProductAd_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ProductAd")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ProductAd_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"promotionLine"), aname="_promotionLine", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Ad_Def not in ns0.ProductAd_Def.__bases__:
                bases = list(ns0.ProductAd_Def.__bases__)
                bases.insert(0, ns0.Ad_Def)
                ns0.ProductAd_Def.__bases__ = tuple(bases)

            ns0.Ad_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ProductCondition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ProductCondition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ProductCondition_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"argument"), aname="_argument", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","ProductConditionOperand",lazy=False)(pname=(ns,"operand"), aname="_operand", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._argument = None
                    self._operand = None
                    return
            Holder.__name__ = "ProductCondition_Holder"
            self.pyclass = Holder

    class ProductConditionAndGroup_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ProductConditionAndGroup")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ProductConditionAndGroup_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","ProductCondition",lazy=False)(pname=(ns,"conditions"), aname="_conditions", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._conditions = []
                    return
            Holder.__name__ = "ProductConditionAndGroup_Holder"
            self.pyclass = Holder

    class ProductConditionOperand_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ProductConditionOperand")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ProductConditionOperand_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"operand"), aname="_operand", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._operand = None
                    return
            Holder.__name__ = "ProductConditionOperand_Holder"
            self.pyclass = Holder

    class ProductExtension_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ProductExtension")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ProductExtension_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"googleBaseCustomerId"), aname="_googleBaseCustomerId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"advertiserName"), aname="_advertiserName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","ProductConditionAndGroup",lazy=False)(pname=(ns,"productSelection"), aname="_productSelection", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.AdExtension_Def not in ns0.ProductExtension_Def.__bases__:
                bases = list(ns0.ProductExtension_Def.__bases__)
                bases.insert(0, ns0.AdExtension_Def)
                ns0.ProductExtension_Def.__bases__ = tuple(bases)

            ns0.AdExtension_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ProvinceTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ProvinceTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ProvinceTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"provinceCode"), aname="_provinceCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.GeoTarget_Def not in ns0.ProvinceTarget_Def.__bases__:
                bases = list(ns0.ProvinceTarget_Def.__bases__)
                bases.insert(0, ns0.GeoTarget_Def)
                ns0.ProvinceTarget_Def.__bases__ = tuple(bases)

            ns0.GeoTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ProximityTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ProximityTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ProximityTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","GeoPoint",lazy=False)(pname=(ns,"geoPoint"), aname="_geoPoint", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","ProximityTarget.DistanceUnits",lazy=False)(pname=(ns,"radiusDistanceUnits"), aname="_radiusDistanceUnits", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"radiusInUnits"), aname="_radiusInUnits", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Address",lazy=False)(pname=(ns,"address"), aname="_address", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"allowServiceOfAddress"), aname="_allowServiceOfAddress", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.GeoTarget_Def not in ns0.ProximityTarget_Def.__bases__:
                bases = list(ns0.ProximityTarget_Def.__bases__)
                bases.insert(0, ns0.GeoTarget_Def)
                ns0.ProximityTarget_Def.__bases__ = tuple(bases)

            ns0.GeoTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class QualityInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "QualityInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.QualityInfo_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"isKeywordAdRelevanceAcceptable"), aname="_isKeywordAdRelevanceAcceptable", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"isLandingPageQualityAcceptable"), aname="_isLandingPageQualityAcceptable", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"isLandingPageLatencyAcceptable"), aname="_isLandingPageLatencyAcceptable", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"qualityScore"), aname="_qualityScore", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._isKeywordAdRelevanceAcceptable = None
                    self._isLandingPageQualityAcceptable = None
                    self._isLandingPageLatencyAcceptable = None
                    self._qualityScore = None
                    return
            Holder.__name__ = "QualityInfo_Holder"
            self.pyclass = Holder

    class QuotaCheckError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "QuotaCheckError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.QuotaCheckError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","QuotaCheckError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.QuotaCheckError_Def.__bases__:
                bases = list(ns0.QuotaCheckError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.QuotaCheckError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class QuotaError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "QuotaError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.QuotaError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","QuotaError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"limit"), aname="_limit", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.QuotaError_Def.__bases__:
                bases = list(ns0.QuotaError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.QuotaError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RangeError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RangeError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RangeError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","RangeError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RangeError_Def.__bases__:
                bases = list(ns0.RangeError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RangeError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RateExceededError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RateExceededError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RateExceededError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","RateExceededError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"rateName"), aname="_rateName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"rateScope"), aname="_rateScope", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"retryAfterSeconds"), aname="_retryAfterSeconds", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RateExceededError_Def.__bases__:
                bases = list(ns0.RateExceededError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RateExceededError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ReadOnlyError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ReadOnlyError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ReadOnlyError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","ReadOnlyError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.ReadOnlyError_Def.__bases__:
                bases = list(ns0.ReadOnlyError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.ReadOnlyError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RegionCodeError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RegionCodeError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RegionCodeError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","RegionCodeError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RegionCodeError_Def.__bases__:
                bases = list(ns0.RegionCodeError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RegionCodeError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RejectedError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RejectedError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RejectedError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","RejectedError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RejectedError_Def.__bases__:
                bases = list(ns0.RejectedError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RejectedError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RequestError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RequestError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RequestError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","RequestError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RequestError_Def.__bases__:
                bases = list(ns0.RequestError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RequestError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RequiredError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RequiredError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RequiredError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","RequiredError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RequiredError_Def.__bases__:
                bases = list(ns0.RequiredError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RequiredError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ReturnValueResult_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ReturnValueResult")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ReturnValueResult_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","Operand",lazy=False)(pname=(ns,"returnValue"), aname="_returnValue", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.OperationResult_Def not in ns0.ReturnValueResult_Def.__bases__:
                bases = list(ns0.ReturnValueResult_Def.__bases__)
                bases.insert(0, ns0.OperationResult_Def)
                ns0.ReturnValueResult_Def.__bases__ = tuple(bases)

            ns0.OperationResult_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RichMediaAd_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RichMediaAd")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RichMediaAd_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Dimensions",lazy=False)(pname=(ns,"dimensions"), aname="_dimensions", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"snippet"), aname="_snippet", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"impressionBeaconUrl"), aname="_impressionBeaconUrl", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"certifiedVendorFormatId"), aname="_certifiedVendorFormatId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Ad_Def not in ns0.RichMediaAd_Def.__bases__:
                bases = list(ns0.RichMediaAd_Def.__bases__)
                bases.insert(0, ns0.Ad_Def)
                ns0.RichMediaAd_Def.__bases__ = tuple(bases)

            ns0.Ad_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Sitelink_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Sitelink")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Sitelink_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"displayText"), aname="_displayText", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"destinationUrl"), aname="_destinationUrl", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._displayText = None
                    self._destinationUrl = None
                    return
            Holder.__name__ = "Sitelink_Holder"
            self.pyclass = Holder

    class SitelinksExtension_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "SitelinksExtension")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.SitelinksExtension_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","Sitelink",lazy=False)(pname=(ns,"sitelinks"), aname="_sitelinks", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.AdExtension_Def not in ns0.SitelinksExtension_Def.__bases__:
                bases = list(ns0.SitelinksExtension_Def.__bases__)
                bases.insert(0, ns0.AdExtension_Def)
                ns0.SitelinksExtension_Def.__bases__ = tuple(bases)

            ns0.AdExtension_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SizeLimitError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "SizeLimitError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.SizeLimitError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","SizeLimitError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.SizeLimitError_Def.__bases__:
                bases = list(ns0.SizeLimitError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.SizeLimitError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SoapHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "SoapHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SoapHeader_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"authToken"), aname="_authToken", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clientCustomerId"), aname="_clientCustomerId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clientEmail"), aname="_clientEmail", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"developerToken"), aname="_developerToken", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userAgent"), aname="_userAgent", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"validateOnly"), aname="_validateOnly", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"partialFailure"), aname="_partialFailure", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._authToken = None
                    self._clientCustomerId = None
                    self._clientEmail = None
                    self._developerToken = None
                    self._userAgent = None
                    self._validateOnly = None
                    self._partialFailure = None
                    return
            Holder.__name__ = "SoapHeader_Holder"
            self.pyclass = Holder

    class SoapResponseHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "SoapResponseHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SoapResponseHeader_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"requestId"), aname="_requestId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"operations"), aname="_operations", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"responseTime"), aname="_responseTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"units"), aname="_units", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requestId = None
                    self._operations = None
                    self._responseTime = None
                    self._units = None
                    return
            Holder.__name__ = "SoapResponseHeader_Holder"
            self.pyclass = Holder

    class Stats_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Stats")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Stats_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"startDate"), aname="_startDate", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"endDate"), aname="_endDate", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Stats.Network",lazy=False)(pname=(ns,"network"), aname="_network", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clicks"), aname="_clicks", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"impressions"), aname="_impressions", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Money",lazy=False)(pname=(ns,"cost"), aname="_cost", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"averagePosition"), aname="_averagePosition", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Money",lazy=False)(pname=(ns,"averageCpc"), aname="_averageCpc", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Money",lazy=False)(pname=(ns,"averageCpm"), aname="_averageCpm", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ctr"), aname="_ctr", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"conversions"), aname="_conversions", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"conversionRate"), aname="_conversionRate", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Money",lazy=False)(pname=(ns,"costPerConversion"), aname="_costPerConversion", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"conversionsManyPerClick"), aname="_conversionsManyPerClick", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"conversionRateManyPerClick"), aname="_conversionRateManyPerClick", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Money",lazy=False)(pname=(ns,"costPerConversionManyPerClick"), aname="_costPerConversionManyPerClick", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"viewThroughConversions"), aname="_viewThroughConversions", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"totalConvValue"), aname="_totalConvValue", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"valuePerConv"), aname="_valuePerConv", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"valuePerConvManyPerClick"), aname="_valuePerConvManyPerClick", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Stats.Type"), aname="_Stats_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._startDate = None
                    self._endDate = None
                    self._network = None
                    self._clicks = None
                    self._impressions = None
                    self._cost = None
                    self._averagePosition = None
                    self._averageCpc = None
                    self._averageCpm = None
                    self._ctr = None
                    self._conversions = None
                    self._conversionRate = None
                    self._costPerConversion = None
                    self._conversionsManyPerClick = None
                    self._conversionRateManyPerClick = None
                    self._costPerConversionManyPerClick = None
                    self._viewThroughConversions = None
                    self._totalConvValue = None
                    self._valuePerConv = None
                    self._valuePerConvManyPerClick = None
                    self._Stats_Type = None
                    return
            Holder.__name__ = "Stats_Holder"
            self.pyclass = Holder

    class StatsQueryError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "StatsQueryError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.StatsQueryError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","StatsQueryError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.StatsQueryError_Def.__bases__:
                bases = list(ns0.StatsQueryError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.StatsQueryError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class StringLengthError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "StringLengthError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.StringLengthError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","StringLengthError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.StringLengthError_Def.__bases__:
                bases = list(ns0.StringLengthError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.StringLengthError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Target_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Target")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Target_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Target.Type"), aname="_Target_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Target_Type = None
                    return
            Holder.__name__ = "Target_Holder"
            self.pyclass = Holder

    class TargetError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "TargetError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.TargetError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","TargetError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.TargetError_Def.__bases__:
                bases = list(ns0.TargetError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.TargetError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TargetList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "TargetList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.TargetList_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"campaignId"), aname="_campaignId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"TargetList.Type"), aname="_TargetList_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._campaignId = None
                    self._TargetList_Type = None
                    return
            Holder.__name__ = "TargetList_Holder"
            self.pyclass = Holder

    class TempAdUnionId_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "TempAdUnionId")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.TempAdUnionId_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.AdUnionId_Def not in ns0.TempAdUnionId_Def.__bases__:
                bases = list(ns0.TempAdUnionId_Def.__bases__)
                bases.insert(0, ns0.AdUnionId_Def)
                ns0.TempAdUnionId_Def.__bases__ = tuple(bases)

            ns0.AdUnionId_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TemplateAd_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "TemplateAd")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.TemplateAd_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"templateId"), aname="_templateId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","AdUnionId",lazy=False)(pname=(ns,"adUnionId"), aname="_adUnionId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","TemplateElement",lazy=False)(pname=(ns,"templateElements"), aname="_templateElements", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Dimensions",lazy=False)(pname=(ns,"dimensions"), aname="_dimensions", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"duration"), aname="_duration", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Ad_Def not in ns0.TemplateAd_Def.__bases__:
                bases = list(ns0.TemplateAd_Def.__bases__)
                bases.insert(0, ns0.Ad_Def)
                ns0.TemplateAd_Def.__bases__ = tuple(bases)

            ns0.Ad_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TemplateElement_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "TemplateElement")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.TemplateElement_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"uniqueName"), aname="_uniqueName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","TemplateElementField",lazy=False)(pname=(ns,"fields"), aname="_fields", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._uniqueName = None
                    self._fields = []
                    return
            Holder.__name__ = "TemplateElement_Holder"
            self.pyclass = Holder

    class TemplateElementField_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "TemplateElementField")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.TemplateElementField_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","TemplateElementField.Type",lazy=False)(pname=(ns,"type"), aname="_type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fieldText"), aname="_fieldText", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Media",lazy=False)(pname=(ns,"fieldMedia"), aname="_fieldMedia", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._type = None
                    self._fieldText = None
                    self._fieldMedia = None
                    return
            Holder.__name__ = "TemplateElementField_Holder"
            self.pyclass = Holder

    class TextAd_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "TextAd")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.TextAd_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"headline"), aname="_headline", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description1"), aname="_description1", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description2"), aname="_description2", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Ad_Def not in ns0.TextAd_Def.__bases__:
                bases = list(ns0.TextAd_Def.__bases__)
                bases.insert(0, ns0.Ad_Def)
                ns0.TextAd_Def.__bases__ = tuple(bases)

            ns0.Ad_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ThirdPartyRedirectAd_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ThirdPartyRedirectAd")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ThirdPartyRedirectAd_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"isCookieTargeted"), aname="_isCookieTargeted", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"isUserInterestTargeted"), aname="_isUserInterestTargeted", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"isTagged"), aname="_isTagged", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","VideoType",lazy=False)(pname=(ns,"videoTypes"), aname="_videoTypes", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.RichMediaAd_Def not in ns0.ThirdPartyRedirectAd_Def.__bases__:
                bases = list(ns0.ThirdPartyRedirectAd_Def.__bases__)
                bases.insert(0, ns0.RichMediaAd_Def)
                ns0.ThirdPartyRedirectAd_Def.__bases__ = tuple(bases)

            ns0.RichMediaAd_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UnprocessedResult_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "UnprocessedResult")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.UnprocessedResult_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.OperationResult_Def not in ns0.UnprocessedResult_Def.__bases__:
                bases = list(ns0.UnprocessedResult_Def.__bases__)
                bases.insert(0, ns0.OperationResult_Def)
                ns0.UnprocessedResult_Def.__bases__ = tuple(bases)

            ns0.OperationResult_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CriterionUserInterest_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CriterionUserInterest")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CriterionUserInterest_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"userInterestId"), aname="_userInterestId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userInterestName"), aname="_userInterestName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Criterion_Def not in ns0.CriterionUserInterest_Def.__bases__:
                bases = list(ns0.CriterionUserInterest_Def.__bases__)
                bases.insert(0, ns0.Criterion_Def)
                ns0.CriterionUserInterest_Def.__bases__ = tuple(bases)

            ns0.Criterion_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CriterionUserList_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CriterionUserList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CriterionUserList_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"userListId"), aname="_userListId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userListName"), aname="_userListName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","CriterionUserList.MembershipStatus",lazy=False)(pname=(ns,"userListMembershipStatus"), aname="_userListMembershipStatus", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userListSize"), aname="_userListSize", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Criterion_Def not in ns0.CriterionUserList_Def.__bases__:
                bases = list(ns0.CriterionUserList_Def.__bases__)
                bases.insert(0, ns0.Criterion_Def)
                ns0.CriterionUserList_Def.__bases__ = tuple(bases)

            ns0.Criterion_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Vertical_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Vertical")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Vertical_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"path"), aname="_path", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Criterion_Def not in ns0.Vertical_Def.__bases__:
                bases = list(ns0.Vertical_Def.__bases__)
                bases.insert(0, ns0.Criterion_Def)
                ns0.Vertical_Def.__bases__ = tuple(bases)

            ns0.Criterion_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Video_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Video")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Video_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"durationMillis"), aname="_durationMillis", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"streamingUrl"), aname="_streamingUrl", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"readyToPlayOnTheWeb"), aname="_readyToPlayOnTheWeb", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"industryStandardCommercialIdentifier"), aname="_industryStandardCommercialIdentifier", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"advertisingId"), aname="_advertisingId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"youTubeVideoIdString"), aname="_youTubeVideoIdString", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Media_Def not in ns0.Video_Def.__bases__:
                bases = list(ns0.Video_Def.__bases__)
                bases.insert(0, ns0.Media_Def)
                ns0.Video_Def.__bases__ = tuple(bases)

            ns0.Media_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Ad_ApprovalStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Ad.ApprovalStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdExtensionError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdExtensionError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdExtensionOverride_ApprovalStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdExtensionOverride.ApprovalStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdExtensionOverride_Status_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdExtensionOverride.Status")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdExtensionOverrideError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdExtensionOverrideError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdGroup_Status_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdGroup.Status")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdGroupAd_Status_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdGroupAd.Status")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdGroupAdError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdGroupAdError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdGroupCriterionError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdGroupCriterionError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdGroupCriterionLimitExceeded_CriteriaLimitType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdGroupCriterionLimitExceeded.CriteriaLimitType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdGroupServiceError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdGroupServiceError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdServingOptimizationStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdServingOptimizationStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AgeTarget_Age_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AgeTarget.Age")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ApprovalStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ApprovalStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AuthenticationError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AuthenticationError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AuthorizationError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AuthorizationError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class BasicJobStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BasicJobStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class BidSource_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BidSource")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class BiddingError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BiddingError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class BiddingTransitionError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BiddingTransitionError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Budget_BudgetDeliveryMethod_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Budget.BudgetDeliveryMethod")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Budget_BudgetPeriod_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Budget.BudgetPeriod")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class BudgetError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BudgetError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class BulkMutateJobError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BulkMutateJobError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CampaignAdExtension_ApprovalStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CampaignAdExtension.ApprovalStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CampaignAdExtension_Status_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CampaignAdExtension.Status")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CampaignAdExtensionError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CampaignAdExtensionError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CampaignCriterionError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CampaignCriterionError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CampaignCriterionLimitExceeded_CriteriaLimitType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CampaignCriterionLimitExceeded.CriteriaLimitType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CampaignError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CampaignError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CampaignStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CampaignStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ClientTermsError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ClientTermsError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ContentLabelType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ContentLabelType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ConversionDeduplicationMode_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ConversionDeduplicationMode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ConversionOptimizerBidType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ConversionOptimizerBidType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ConversionOptimizerEligibility_RejectionReason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ConversionOptimizerEligibility.RejectionReason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DatabaseError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "DatabaseError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DateError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "DateError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DayOfWeek_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "DayOfWeek")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DeprecatedAd_Type_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "DeprecatedAd.Type")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DistinctError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "DistinctError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class EntityAccessDenied_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "EntityAccessDenied.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class EntityCountLimitExceeded_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "EntityCountLimitExceeded.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class EntityId_Type_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "EntityId.Type")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class EntityNotFound_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "EntityNotFound.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ExperimentDataStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ExperimentDataStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ExperimentDeltaStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ExperimentDeltaStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GenderTarget_Gender_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "GenderTarget.Gender")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class IdError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "IdError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ImageError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ImageError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class InternalApiError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "InternalApiError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class JobError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "JobError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class KeywordMatchType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "KeywordMatchType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Level_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Level")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LocationExtension_Source_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "LocationExtension.Source")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LocationOverrideInfo_RadiusUnits_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "LocationOverrideInfo.RadiusUnits")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MarkupLanguageType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "MarkupLanguageType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Media_MediaType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Media.MediaType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Media_MimeType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Media.MimeType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Media_Size_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Media.Size")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MediaError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "MediaError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MinuteOfHour_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "MinuteOfHour")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MultiplierSource_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "MultiplierSource")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NetworkCoverageType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NetworkCoverageType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NewEntityCreationError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NewEntityCreationError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NotEmptyError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NotEmptyError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NotWhitelistedError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NotWhitelistedError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NullError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NullError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class OperationAccessDenied_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "OperationAccessDenied.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Operator_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Operator")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class OperatorError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "OperatorError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PagingError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "PagingError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PlatformType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "PlatformType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PolicyViolationError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "PolicyViolationError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PositionPreference_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "PositionPreference")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PricingModel_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "PricingModel")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ProximityTarget_DistanceUnits_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ProximityTarget.DistanceUnits")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class QuotaCheckError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "QuotaCheckError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class QuotaError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "QuotaError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class QuotaExceededError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "QuotaExceededError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RangeError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RangeError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RateExceededError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RateExceededError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ReadOnlyError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ReadOnlyError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RegionCodeError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RegionCodeError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RejectedError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RejectedError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RequestError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RequestError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RequiredError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RequiredError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ServingStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ServingStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SizeLimitError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "SizeLimitError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Stats_Network_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Stats.Network")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class StatsQueryError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "StatsQueryError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class StringLengthError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "StringLengthError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SystemServingStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "SystemServingStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class TargetError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "TargetError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class TemplateElementField_Type_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "TemplateElementField.Type")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class TimeUnit_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "TimeUnit")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CriterionUserList_MembershipStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CriterionUserList.MembershipStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class UserStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "UserStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class VideoType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "VideoType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class getBulkMutateJob_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getBulkMutateJob"
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        def __init__(self, **kw):
            ns = ns0.getBulkMutateJob_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","BulkMutateJobSelector",lazy=False)(pname=(ns,"selector"), aname="_selector", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201008","get")
            kw["aname"] = "_get"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._selector = None
                    return
            Holder.__name__ = "get_Holder"
            self.pyclass = Holder

    class getBulkMutateJobResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getBulkMutateJobResponse"
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        def __init__(self, **kw):
            ns = ns0.getBulkMutateJobResponse_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","BulkMutateJob",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201008","getResponse")
            kw["aname"] = "_getResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = []
                    return
            Holder.__name__ = "getBulkMutateJobResponse_Holder"
            self.pyclass = Holder

    class ApiExceptionFault_Dec(ElementDeclaration):
        literal = "ApiExceptionFault"
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201008","ApiExceptionFault")
            kw["aname"] = "_ApiExceptionFault"
            if ns0.ApiException_Def not in ns0.ApiExceptionFault_Dec.__bases__:
                bases = list(ns0.ApiExceptionFault_Dec.__bases__)
                bases.insert(0, ns0.ApiException_Def)
                ns0.ApiExceptionFault_Dec.__bases__ = tuple(bases)

            ns0.ApiException_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ApiExceptionFault_Dec_Holder"

    class mutateBulkMutateJob_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "mutateBulkMutateJob"
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        def __init__(self, **kw):
            ns = ns0.mutateBulkMutateJob_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","JobOperation",lazy=False)(pname=(ns,"operation"), aname="_operation", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201008","mutate")
            kw["aname"] = "_mutate"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._operation = None
                    return
            Holder.__name__ = "mutate_Holder"
            self.pyclass = Holder

    class mutateBulkMutateJobResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "mutateBulkMutateJobResponse"
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        def __init__(self, **kw):
            ns = ns0.mutateBulkMutateJobResponse_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","BulkMutateJob",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201008","mutateResponse")
            kw["aname"] = "_mutateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = None
                    return
            Holder.__name__ = "mutateBulkMutateJobResponse_Holder"
            self.pyclass = Holder

    class RequestHeader_Dec(ElementDeclaration):
        literal = "RequestHeader"
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201008","RequestHeader")
            kw["aname"] = "_RequestHeader"
            if ns0.SoapHeader_Def not in ns0.RequestHeader_Dec.__bases__:
                bases = list(ns0.RequestHeader_Dec.__bases__)
                bases.insert(0, ns0.SoapHeader_Def)
                ns0.RequestHeader_Dec.__bases__ = tuple(bases)

            ns0.SoapHeader_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "RequestHeader_Dec_Holder"

    class ResponseHeader_Dec(ElementDeclaration):
        literal = "ResponseHeader"
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201008","ResponseHeader")
            kw["aname"] = "_ResponseHeader"
            if ns0.SoapResponseHeader_Def not in ns0.ResponseHeader_Dec.__bases__:
                bases = list(ns0.ResponseHeader_Dec.__bases__)
                bases.insert(0, ns0.SoapResponseHeader_Def)
                ns0.ResponseHeader_Dec.__bases__ = tuple(bases)

            ns0.SoapResponseHeader_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ResponseHeader_Dec_Holder"

# end class ns0 (tns: https://adwords.google.com/api/adwords/cm/v201008)
