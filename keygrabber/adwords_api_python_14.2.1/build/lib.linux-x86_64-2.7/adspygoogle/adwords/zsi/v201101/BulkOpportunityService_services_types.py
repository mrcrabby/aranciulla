################################################## 
# BulkOpportunityService_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# https://adwords.google.com/api/adwords/cm/v201101
##############################

class ns0:
    targetNamespace = "https://adwords.google.com/api/adwords/cm/v201101"

    class AdGroupBidLandscape_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "AdGroupBidLandscape")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdGroupBidLandscape_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201101","AdGroupBidLandscape.Type",lazy=False)(pname=(ns,"type"), aname="_type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"landscapeCurrent"), aname="_landscapeCurrent", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.BidLandscape_Def not in ns0.AdGroupBidLandscape_Def.__bases__:
                bases = list(ns0.AdGroupBidLandscape_Def.__bases__)
                bases.insert(0, ns0.BidLandscape_Def)
                ns0.AdGroupBidLandscape_Def.__bases__ = tuple(bases)

            ns0.BidLandscape_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ApiError_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "ApiError")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ApiError_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"fieldPath"), aname="_fieldPath", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"trigger"), aname="_trigger", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"errorString"), aname="_errorString", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ApiError.Type"), aname="_ApiError_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fieldPath = None
                    self._trigger = None
                    self._errorString = None
                    self._ApiError_Type = None
                    return
            Holder.__name__ = "ApiError_Holder"
            self.pyclass = Holder

    class ApiException_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "ApiException")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ApiException_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201101","ApiError",lazy=False)(pname=(ns,"errors"), aname="_errors", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApplicationException_Def not in ns0.ApiException_Def.__bases__:
                bases = list(ns0.ApiException_Def.__bases__)
                bases.insert(0, ns0.ApplicationException_Def)
                ns0.ApiException_Def.__bases__ = tuple(bases)

            ns0.ApplicationException_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ApplicationException_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "ApplicationException")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ApplicationException_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ApplicationException.Type"), aname="_ApplicationException_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    self._ApplicationException_Type = None
                    return
            Holder.__name__ = "ApplicationException_Holder"
            self.pyclass = Holder

    class AuthenticationError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "AuthenticationError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AuthenticationError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201101","AuthenticationError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AuthenticationError_Def.__bases__:
                bases = list(ns0.AuthenticationError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AuthenticationError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AuthorizationError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "AuthorizationError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AuthorizationError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201101","AuthorizationError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AuthorizationError_Def.__bases__:
                bases = list(ns0.AuthorizationError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AuthorizationError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BidLandscape_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "BidLandscape")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.BidLandscape_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"campaignId"), aname="_campaignId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"adGroupId"), aname="_adGroupId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"startDate"), aname="_startDate", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"endDate"), aname="_endDate", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201101","BidLandscape.LandscapePoint",lazy=False)(pname=(ns,"landscapePoints"), aname="_landscapePoints", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.DataEntry_Def not in ns0.BidLandscape_Def.__bases__:
                bases = list(ns0.BidLandscape_Def.__bases__)
                bases.insert(0, ns0.DataEntry_Def)
                ns0.BidLandscape_Def.__bases__ = tuple(bases)

            ns0.DataEntry_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BidLandscape_LandscapePoint_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "BidLandscape.LandscapePoint")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.BidLandscape_LandscapePoint_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201101","Money",lazy=False)(pname=(ns,"bid"), aname="_bid", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clicks"), aname="_clicks", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201101","Money",lazy=False)(pname=(ns,"cost"), aname="_cost", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201101","Money",lazy=False)(pname=(ns,"marginalCpc"), aname="_marginalCpc", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"impressions"), aname="_impressions", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._bid = None
                    self._clicks = None
                    self._cost = None
                    self._marginalCpc = None
                    self._impressions = None
                    return
            Holder.__name__ = "BidLandscape.LandscapePoint_Holder"
            self.pyclass = Holder

    class ClientTermsError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "ClientTermsError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ClientTermsError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201101","ClientTermsError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.ClientTermsError_Def.__bases__:
                bases = list(ns0.ClientTermsError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.ClientTermsError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ComparableValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "ComparableValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ComparableValue_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"ComparableValue.Type"), aname="_ComparableValue_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ComparableValue_Type = None
                    return
            Holder.__name__ = "ComparableValue_Holder"
            self.pyclass = Holder

    class Criterion_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "Criterion")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Criterion_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Criterion.Type"), aname="_Criterion_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._Criterion_Type = None
                    return
            Holder.__name__ = "Criterion_Holder"
            self.pyclass = Holder

    class CriterionBidLandscape_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "CriterionBidLandscape")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CriterionBidLandscape_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"criterionId"), aname="_criterionId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.BidLandscape_Def not in ns0.CriterionBidLandscape_Def.__bases__:
                bases = list(ns0.CriterionBidLandscape_Def.__bases__)
                bases.insert(0, ns0.BidLandscape_Def)
                ns0.CriterionBidLandscape_Def.__bases__ = tuple(bases)

            ns0.BidLandscape_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DatabaseError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "DatabaseError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DatabaseError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201101","DatabaseError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.DatabaseError_Def.__bases__:
                bases = list(ns0.DatabaseError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.DatabaseError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DoubleValue_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "DoubleValue")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DoubleValue_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"number"), aname="_number", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.NumberValue_Def not in ns0.DoubleValue_Def.__bases__:
                bases = list(ns0.DoubleValue_Def.__bases__)
                bases.insert(0, ns0.NumberValue_Def)
                ns0.DoubleValue_Def.__bases__ = tuple(bases)

            ns0.NumberValue_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class InternalApiError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "InternalApiError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.InternalApiError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201101","InternalApiError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.InternalApiError_Def.__bases__:
                bases = list(ns0.InternalApiError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.InternalApiError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Keyword_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "Keyword")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Keyword_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"text"), aname="_text", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201101","KeywordMatchType",lazy=False)(pname=(ns,"matchType"), aname="_matchType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Criterion_Def not in ns0.Keyword_Def.__bases__:
                bases = list(ns0.Keyword_Def.__bases__)
                bases.insert(0, ns0.Criterion_Def)
                ns0.Keyword_Def.__bases__ = tuple(bases)

            ns0.Criterion_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LongValue_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "LongValue")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.LongValue_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"number"), aname="_number", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.NumberValue_Def not in ns0.LongValue_Def.__bases__:
                bases = list(ns0.LongValue_Def.__bases__)
                bases.insert(0, ns0.NumberValue_Def)
                ns0.LongValue_Def.__bases__ = tuple(bases)

            ns0.NumberValue_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Money_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "Money")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Money_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"microAmount"), aname="_microAmount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ComparableValue_Def not in ns0.Money_Def.__bases__:
                bases = list(ns0.Money_Def.__bases__)
                bases.insert(0, ns0.ComparableValue_Def)
                ns0.Money_Def.__bases__ = tuple(bases)

            ns0.ComparableValue_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NotWhitelistedError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "NotWhitelistedError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NotWhitelistedError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201101","NotWhitelistedError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NotWhitelistedError_Def.__bases__:
                bases = list(ns0.NotWhitelistedError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NotWhitelistedError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NullError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "NullError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NullError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201101","NullError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NullError_Def.__bases__:
                bases = list(ns0.NullError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NullError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NumberValue_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "NumberValue")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NumberValue_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ComparableValue_Def not in ns0.NumberValue_Def.__bases__:
                bases = list(ns0.NumberValue_Def.__bases__)
                bases.insert(0, ns0.ComparableValue_Def)
                ns0.NumberValue_Def.__bases__ = tuple(bases)

            ns0.ComparableValue_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Paging_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "Paging")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Paging_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"startIndex"), aname="_startIndex", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"numberResults"), aname="_numberResults", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._startIndex = None
                    self._numberResults = None
                    return
            Holder.__name__ = "Paging_Holder"
            self.pyclass = Holder

    class Placement_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "Placement")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Placement_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"url"), aname="_url", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Criterion_Def not in ns0.Placement_Def.__bases__:
                bases = list(ns0.Placement_Def.__bases__)
                bases.insert(0, ns0.Criterion_Def)
                ns0.Placement_Def.__bases__ = tuple(bases)

            ns0.Criterion_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Product_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "Product")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Product_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201101","ProductCondition",lazy=False)(pname=(ns,"conditions"), aname="_conditions", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"text"), aname="_text", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Criterion_Def not in ns0.Product_Def.__bases__:
                bases = list(ns0.Product_Def.__bases__)
                bases.insert(0, ns0.Criterion_Def)
                ns0.Product_Def.__bases__ = tuple(bases)

            ns0.Criterion_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ProductCondition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "ProductCondition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ProductCondition_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"argument"), aname="_argument", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201101","ProductConditionOperand",lazy=False)(pname=(ns,"operand"), aname="_operand", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._argument = None
                    self._operand = None
                    return
            Holder.__name__ = "ProductCondition_Holder"
            self.pyclass = Holder

    class ProductConditionOperand_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "ProductConditionOperand")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ProductConditionOperand_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"operand"), aname="_operand", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._operand = None
                    return
            Holder.__name__ = "ProductConditionOperand_Holder"
            self.pyclass = Holder

    class QuotaCheckError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "QuotaCheckError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.QuotaCheckError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201101","QuotaCheckError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.QuotaCheckError_Def.__bases__:
                bases = list(ns0.QuotaCheckError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.QuotaCheckError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RateExceededError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "RateExceededError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RateExceededError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201101","RateExceededError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"rateName"), aname="_rateName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"rateScope"), aname="_rateScope", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"retryAfterSeconds"), aname="_retryAfterSeconds", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RateExceededError_Def.__bases__:
                bases = list(ns0.RateExceededError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RateExceededError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RequestError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "RequestError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RequestError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201101","RequestError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RequestError_Def.__bases__:
                bases = list(ns0.RequestError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RequestError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RequiredError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "RequiredError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RequiredError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201101","RequiredError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RequiredError_Def.__bases__:
                bases = list(ns0.RequiredError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RequiredError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SizeLimitError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "SizeLimitError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.SizeLimitError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201101","SizeLimitError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.SizeLimitError_Def.__bases__:
                bases = list(ns0.SizeLimitError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.SizeLimitError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SoapHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "SoapHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SoapHeader_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"authToken"), aname="_authToken", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clientCustomerId"), aname="_clientCustomerId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clientEmail"), aname="_clientEmail", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"developerToken"), aname="_developerToken", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userAgent"), aname="_userAgent", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"validateOnly"), aname="_validateOnly", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"partialFailure"), aname="_partialFailure", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._authToken = None
                    self._clientCustomerId = None
                    self._clientEmail = None
                    self._developerToken = None
                    self._userAgent = None
                    self._validateOnly = None
                    self._partialFailure = None
                    return
            Holder.__name__ = "SoapHeader_Holder"
            self.pyclass = Holder

    class SoapResponseHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "SoapResponseHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SoapResponseHeader_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"requestId"), aname="_requestId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"operations"), aname="_operations", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"responseTime"), aname="_responseTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"units"), aname="_units", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requestId = None
                    self._operations = None
                    self._responseTime = None
                    self._units = None
                    return
            Holder.__name__ = "SoapResponseHeader_Holder"
            self.pyclass = Holder

    class DataEntry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "DataEntry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DataEntry_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"DataEntry.Type"), aname="_DataEntry_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._DataEntry_Type = None
                    return
            Holder.__name__ = "DataEntry_Holder"
            self.pyclass = Holder

    class CriterionUserInterest_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "CriterionUserInterest")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CriterionUserInterest_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"userInterestId"), aname="_userInterestId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userInterestName"), aname="_userInterestName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Criterion_Def not in ns0.CriterionUserInterest_Def.__bases__:
                bases = list(ns0.CriterionUserInterest_Def.__bases__)
                bases.insert(0, ns0.Criterion_Def)
                ns0.CriterionUserInterest_Def.__bases__ = tuple(bases)

            ns0.Criterion_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CriterionUserList_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "CriterionUserList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CriterionUserList_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"userListId"), aname="_userListId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userListName"), aname="_userListName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201101","CriterionUserList.MembershipStatus",lazy=False)(pname=(ns,"userListMembershipStatus"), aname="_userListMembershipStatus", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Criterion_Def not in ns0.CriterionUserList_Def.__bases__:
                bases = list(ns0.CriterionUserList_Def.__bases__)
                bases.insert(0, ns0.Criterion_Def)
                ns0.CriterionUserList_Def.__bases__ = tuple(bases)

            ns0.Criterion_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Vertical_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "Vertical")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Vertical_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"path"), aname="_path", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Criterion_Def not in ns0.Vertical_Def.__bases__:
                bases = list(ns0.Vertical_Def.__bases__)
                bases.insert(0, ns0.Criterion_Def)
                ns0.Vertical_Def.__bases__ = tuple(bases)

            ns0.Criterion_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdGroupBidLandscape_Type_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "AdGroupBidLandscape.Type")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AuthenticationError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "AuthenticationError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AuthorizationError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "AuthorizationError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ClientTermsError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "ClientTermsError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DatabaseError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "DatabaseError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class InternalApiError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "InternalApiError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class KeywordMatchType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "KeywordMatchType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NotWhitelistedError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "NotWhitelistedError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NullError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "NullError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class QuotaCheckError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "QuotaCheckError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RateExceededError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "RateExceededError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RequestError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "RequestError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RequiredError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "RequiredError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SizeLimitError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "SizeLimitError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CriterionUserList_MembershipStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201101"
        type = (schema, "CriterionUserList.MembershipStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

# end class ns0 (tns: https://adwords.google.com/api/adwords/cm/v201101)

##############################
# targetNamespace
# https://adwords.google.com/api/adwords/o/v201101
##############################

class ns1:
    targetNamespace = "https://adwords.google.com/api/adwords/o/v201101"

    class AdFormatSpec_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "AdFormatSpec")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.AdFormatSpec_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201101","SiteConstants.AdFormat",lazy=False)(pname=(ns,"format"), aname="_format", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._format = None
                    return
            Holder.__name__ = "AdFormatSpec_Holder"
            self.pyclass = Holder

    class AdFormatSpecListAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "AdFormatSpecListAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.AdFormatSpecListAttribute_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201101","AdFormatSpec",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.AdFormatSpecListAttribute_Def.__bases__:
                bases = list(ns1.AdFormatSpecListAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.AdFormatSpecListAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Attribute_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "Attribute")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Attribute_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Attribute.Type"), aname="_Attribute_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Attribute_Type = None
                    return
            Holder.__name__ = "Attribute_Holder"
            self.pyclass = Holder

    class BidLandscapeAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "BidLandscapeAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.BidLandscapeAttribute_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201101","BidLandscape",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.BidLandscapeAttribute_Def.__bases__:
                bases = list(ns1.BidLandscapeAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.BidLandscapeAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BooleanAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "BooleanAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.BooleanAttribute_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.BooleanAttribute_Def.__bases__:
                bases = list(ns1.BooleanAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.BooleanAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BulkOpportunityPage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "BulkOpportunityPage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.BulkOpportunityPage_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201101","Opportunity",lazy=False)(pname=(ns,"entries"), aname="_entries", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"totalNumEntries"), aname="_totalNumEntries", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._entries = []
                    self._totalNumEntries = None
                    return
            Holder.__name__ = "BulkOpportunityPage_Holder"
            self.pyclass = Holder

    class BulkOpportunitySelector_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "BulkOpportunitySelector")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.BulkOpportunitySelector_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201101","OpportunityIdeaType",lazy=False)(pname=(ns,"ideaTypes"), aname="_ideaTypes", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/o/v201101","OpportunityAttributeType",lazy=False)(pname=(ns,"requestedAttributeTypes"), aname="_requestedAttributeTypes", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201101","Paging",lazy=False)(pname=(ns,"paging"), aname="_paging", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ideaTypes = []
                    self._requestedAttributeTypes = []
                    self._paging = None
                    return
            Holder.__name__ = "BulkOpportunitySelector_Holder"
            self.pyclass = Holder

    class BulkOpportunityServiceError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "BulkOpportunityServiceError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.BulkOpportunityServiceError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201101","BulkOpportunityServiceError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns1.BulkOpportunityServiceError_Def.__bases__:
                bases = list(ns1.BulkOpportunityServiceError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns1.BulkOpportunityServiceError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CriterionAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "CriterionAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.CriterionAttribute_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201101","Criterion",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.CriterionAttribute_Def.__bases__:
                bases = list(ns1.CriterionAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.CriterionAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DoubleAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "DoubleAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.DoubleAttribute_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.DoubleAttribute_Def.__bases__:
                bases = list(ns1.DoubleAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.DoubleAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class IdeaTypeAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "IdeaTypeAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.IdeaTypeAttribute_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201101","IdeaType",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.IdeaTypeAttribute_Def.__bases__:
                bases = list(ns1.IdeaTypeAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.IdeaTypeAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class InStreamAdInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "InStreamAdInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.InStreamAdInfo_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"maxAdDuration"), aname="_maxAdDuration", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"minAdDuration"), aname="_minAdDuration", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"medianAdDuration"), aname="_medianAdDuration", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"preRollPercent"), aname="_preRollPercent", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"midRollPercent"), aname="_midRollPercent", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"postRollPercent"), aname="_postRollPercent", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._maxAdDuration = None
                    self._minAdDuration = None
                    self._medianAdDuration = None
                    self._preRollPercent = None
                    self._midRollPercent = None
                    self._postRollPercent = None
                    return
            Holder.__name__ = "InStreamAdInfo_Holder"
            self.pyclass = Holder

    class InStreamAdInfoAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "InStreamAdInfoAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.InStreamAdInfoAttribute_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201101","InStreamAdInfo",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.InStreamAdInfoAttribute_Def.__bases__:
                bases = list(ns1.InStreamAdInfoAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.InStreamAdInfoAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class IntegerAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "IntegerAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.IntegerAttribute_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.IntegerAttribute_Def.__bases__:
                bases = list(ns1.IntegerAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.IntegerAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class IntegerSetAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "IntegerSetAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.IntegerSetAttribute_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.IntegerSetAttribute_Def.__bases__:
                bases = list(ns1.IntegerSetAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.IntegerSetAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class KeywordAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "KeywordAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.KeywordAttribute_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201101","Keyword",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.KeywordAttribute_Def.__bases__:
                bases = list(ns1.KeywordAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.KeywordAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LongAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "LongAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.LongAttribute_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.LongAttribute_Def.__bases__:
                bases = list(ns1.LongAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.LongAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LongRangeAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "LongRangeAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.LongRangeAttribute_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201101","Range",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.LongRangeAttribute_Def.__bases__:
                bases = list(ns1.LongRangeAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.LongRangeAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MoneyAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "MoneyAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.MoneyAttribute_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201101","Money",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.MoneyAttribute_Def.__bases__:
                bases = list(ns1.MoneyAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.MoneyAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MonthlySearchVolume_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "MonthlySearchVolume")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.MonthlySearchVolume_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"year"), aname="_year", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"month"), aname="_month", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"count"), aname="_count", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._year = None
                    self._month = None
                    self._count = None
                    return
            Holder.__name__ = "MonthlySearchVolume_Holder"
            self.pyclass = Holder

    class MonthlySearchVolumeAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "MonthlySearchVolumeAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.MonthlySearchVolumeAttribute_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201101","MonthlySearchVolume",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.MonthlySearchVolumeAttribute_Def.__bases__:
                bases = list(ns1.MonthlySearchVolumeAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.MonthlySearchVolumeAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Opportunity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "Opportunity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Opportunity_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201101","OpportunityIdea",lazy=False)(pname=(ns,"opportunityIdeas"), aname="_opportunityIdeas", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._opportunityIdeas = []
                    return
            Holder.__name__ = "Opportunity_Holder"
            self.pyclass = Holder

    class OpportunityAttribute_AttributeMapEntry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "OpportunityAttribute_AttributeMapEntry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.OpportunityAttribute_AttributeMapEntry_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201101","OpportunityAttributeType",lazy=False)(pname=(ns,"key"), aname="_key", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/o/v201101","Attribute",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._key = None
                    self._value = None
                    return
            Holder.__name__ = "OpportunityAttribute_AttributeMapEntry_Holder"
            self.pyclass = Holder

    class OpportunityError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "OpportunityError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.OpportunityError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201101","OpportunityError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns1.OpportunityError_Def.__bases__:
                bases = list(ns1.OpportunityError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns1.OpportunityError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class OpportunityIdea_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "OpportunityIdea")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.OpportunityIdea_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201101","OpportunityAttribute_AttributeMapEntry",lazy=False)(pname=(ns,"data"), aname="_data", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._data = []
                    return
            Holder.__name__ = "OpportunityIdea_Holder"
            self.pyclass = Holder

    class OpportunityIdeaTypeAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "OpportunityIdeaTypeAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.OpportunityIdeaTypeAttribute_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201101","OpportunityIdeaType",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.OpportunityIdeaTypeAttribute_Def.__bases__:
                bases = list(ns1.OpportunityIdeaTypeAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.OpportunityIdeaTypeAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PlacementAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "PlacementAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.PlacementAttribute_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201101","Placement",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.PlacementAttribute_Def.__bases__:
                bases = list(ns1.PlacementAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.PlacementAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PlacementTypeAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "PlacementTypeAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.PlacementTypeAttribute_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201101","SiteConstants.PlacementType",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.PlacementTypeAttribute_Def.__bases__:
                bases = list(ns1.PlacementTypeAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.PlacementTypeAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Range_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "Range")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Range_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201101","ComparableValue",lazy=False)(pname=(ns,"min"), aname="_min", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201101","ComparableValue",lazy=False)(pname=(ns,"max"), aname="_max", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._min = None
                    self._max = None
                    return
            Holder.__name__ = "Range_Holder"
            self.pyclass = Holder

    class StringAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "StringAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.StringAttribute_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.StringAttribute_Def.__bases__:
                bases = list(ns1.StringAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.StringAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class WebpageDescriptor_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "WebpageDescriptor")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.WebpageDescriptor_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"url"), aname="_url", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"title"), aname="_title", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._url = None
                    self._title = None
                    return
            Holder.__name__ = "WebpageDescriptor_Holder"
            self.pyclass = Holder

    class WebpageDescriptorAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "WebpageDescriptorAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.WebpageDescriptorAttribute_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201101","WebpageDescriptor",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.WebpageDescriptorAttribute_Def.__bases__:
                bases = list(ns1.WebpageDescriptorAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.WebpageDescriptorAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BulkOpportunityServiceError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "BulkOpportunityServiceError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class IdeaType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "IdeaType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class OpportunityAttributeType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "OpportunityAttributeType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class OpportunityError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "OpportunityError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class OpportunityIdeaType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "OpportunityIdeaType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SiteConstants_AdFormat_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "SiteConstants.AdFormat")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SiteConstants_PlacementType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        type = (schema, "SiteConstants.PlacementType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class getBulkOpportunity_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getBulkOpportunity"
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        def __init__(self, **kw):
            ns = ns1.getBulkOpportunity_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201101","BulkOpportunitySelector",lazy=False)(pname=(ns,"selector"), aname="_selector", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/o/v201101","get")
            kw["aname"] = "_get"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._selector = None
                    return
            Holder.__name__ = "get_Holder"
            self.pyclass = Holder

    class getBulkOpportunityResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getBulkOpportunityResponse"
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        def __init__(self, **kw):
            ns = ns1.getBulkOpportunityResponse_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201101","BulkOpportunityPage",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/o/v201101","getResponse")
            kw["aname"] = "_getResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = None
                    return
            Holder.__name__ = "getBulkOpportunityResponse_Holder"
            self.pyclass = Holder

    class ApiExceptionFault_Dec(ElementDeclaration):
        literal = "ApiExceptionFault"
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/o/v201101","ApiExceptionFault")
            kw["aname"] = "_ApiExceptionFault"
            if ns0.ApiException_Def not in ns1.ApiExceptionFault_Dec.__bases__:
                bases = list(ns1.ApiExceptionFault_Dec.__bases__)
                bases.insert(0, ns0.ApiException_Def)
                ns1.ApiExceptionFault_Dec.__bases__ = tuple(bases)

            ns0.ApiException_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ApiExceptionFault_Dec_Holder"

    class RequestHeader_Dec(ElementDeclaration):
        literal = "RequestHeader"
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/o/v201101","RequestHeader")
            kw["aname"] = "_RequestHeader"
            if ns0.SoapHeader_Def not in ns1.RequestHeader_Dec.__bases__:
                bases = list(ns1.RequestHeader_Dec.__bases__)
                bases.insert(0, ns0.SoapHeader_Def)
                ns1.RequestHeader_Dec.__bases__ = tuple(bases)

            ns0.SoapHeader_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "RequestHeader_Dec_Holder"

    class ResponseHeader_Dec(ElementDeclaration):
        literal = "ResponseHeader"
        schema = "https://adwords.google.com/api/adwords/o/v201101"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/o/v201101","ResponseHeader")
            kw["aname"] = "_ResponseHeader"
            if ns0.SoapResponseHeader_Def not in ns1.ResponseHeader_Dec.__bases__:
                bases = list(ns1.ResponseHeader_Dec.__bases__)
                bases.insert(0, ns0.SoapResponseHeader_Def)
                ns1.ResponseHeader_Dec.__bases__ = tuple(bases)

            ns0.SoapResponseHeader_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ResponseHeader_Dec_Holder"

# end class ns1 (tns: https://adwords.google.com/api/adwords/o/v201101)
