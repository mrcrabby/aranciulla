################################################## 
# TargetingIdeaService_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# https://adwords.google.com/api/adwords/o/v201003
##############################

class ns1:
    targetNamespace = "https://adwords.google.com/api/adwords/o/v201003"

    class AdFormatSpec_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "AdFormatSpec")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.AdFormatSpec_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201003","SiteConstants.AdFormat",lazy=False)(pname=(ns,"format"), aname="_format", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._format = None
                    return
            Holder.__name__ = "AdFormatSpec_Holder"
            self.pyclass = Holder

    class AdFormatSpecListAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "AdFormatSpecListAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.AdFormatSpecListAttribute_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201003","AdFormatSpec",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.AdFormatSpecListAttribute_Def.__bases__:
                bases = list(ns1.AdFormatSpecListAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.AdFormatSpecListAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdTypeSearchParameter_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "AdTypeSearchParameter")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.AdTypeSearchParameter_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201003","SiteConstants.AdType",lazy=False)(pname=(ns,"adTypes"), aname="_adTypes", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.SearchParameter_Def not in ns1.AdTypeSearchParameter_Def.__bases__:
                bases = list(ns1.AdTypeSearchParameter_Def.__bases__)
                bases.insert(0, ns1.SearchParameter_Def)
                ns1.AdTypeSearchParameter_Def.__bases__ = tuple(bases)

            ns1.SearchParameter_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BooleanAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "BooleanAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.BooleanAttribute_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.BooleanAttribute_Def.__bases__:
                bases = list(ns1.BooleanAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.BooleanAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CollectionSizeError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "CollectionSizeError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.CollectionSizeError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201003","CollectionSizeError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns1.CollectionSizeError_Def.__bases__:
                bases = list(ns1.CollectionSizeError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns1.CollectionSizeError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CompetitionSearchParameter_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "CompetitionSearchParameter")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.CompetitionSearchParameter_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201003","CompetitionSearchParameter.Level",lazy=False)(pname=(ns,"levels"), aname="_levels", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.SearchParameter_Def not in ns1.CompetitionSearchParameter_Def.__bases__:
                bases = list(ns1.CompetitionSearchParameter_Def.__bases__)
                bases.insert(0, ns1.SearchParameter_Def)
                ns1.CompetitionSearchParameter_Def.__bases__ = tuple(bases)

            ns1.SearchParameter_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DoubleAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "DoubleAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.DoubleAttribute_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.DoubleAttribute_Def.__bases__:
                bases = list(ns1.DoubleAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.DoubleAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DoubleComparisonOperation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "DoubleComparisonOperation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.DoubleComparisonOperation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"minimum"), aname="_minimum", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"maximum"), aname="_maximum", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"excludes"), aname="_excludes", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._minimum = None
                    self._maximum = None
                    self._excludes = []
                    return
            Holder.__name__ = "DoubleComparisonOperation_Holder"
            self.pyclass = Holder

    class IdeaTextMatchesSearchParameter_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "IdeaTextMatchesSearchParameter")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.IdeaTextMatchesSearchParameter_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"included"), aname="_included", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"excluded"), aname="_excluded", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/o/v201003","MatchAction",lazy=False)(pname=(ns,"priorityAction"), aname="_priorityAction", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.SearchParameter_Def not in ns1.IdeaTextMatchesSearchParameter_Def.__bases__:
                bases = list(ns1.IdeaTextMatchesSearchParameter_Def.__bases__)
                bases.insert(0, ns1.SearchParameter_Def)
                ns1.IdeaTextMatchesSearchParameter_Def.__bases__ = tuple(bases)

            ns1.SearchParameter_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class IdeaTypeAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "IdeaTypeAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.IdeaTypeAttribute_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201003","IdeaType",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.IdeaTypeAttribute_Def.__bases__:
                bases = list(ns1.IdeaTypeAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.IdeaTypeAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class InStreamAdInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "InStreamAdInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.InStreamAdInfo_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"maxAdDuration"), aname="_maxAdDuration", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"minAdDuration"), aname="_minAdDuration", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"medianAdDuration"), aname="_medianAdDuration", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"preRollPercent"), aname="_preRollPercent", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"midRollPercent"), aname="_midRollPercent", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"postRollPercent"), aname="_postRollPercent", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._maxAdDuration = None
                    self._minAdDuration = None
                    self._medianAdDuration = None
                    self._preRollPercent = None
                    self._midRollPercent = None
                    self._postRollPercent = None
                    return
            Holder.__name__ = "InStreamAdInfo_Holder"
            self.pyclass = Holder

    class InStreamAdInfoAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "InStreamAdInfoAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.InStreamAdInfoAttribute_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201003","InStreamAdInfo",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.InStreamAdInfoAttribute_Def.__bases__:
                bases = list(ns1.InStreamAdInfoAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.InStreamAdInfoAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class IncludeAdultContentSearchParameter_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "IncludeAdultContentSearchParameter")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.IncludeAdultContentSearchParameter_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.SearchParameter_Def not in ns1.IncludeAdultContentSearchParameter_Def.__bases__:
                bases = list(ns1.IncludeAdultContentSearchParameter_Def.__bases__)
                bases.insert(0, ns1.SearchParameter_Def)
                ns1.IncludeAdultContentSearchParameter_Def.__bases__ = tuple(bases)

            ns1.SearchParameter_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class IntegerAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "IntegerAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.IntegerAttribute_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.IntegerAttribute_Def.__bases__:
                bases = list(ns1.IntegerAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.IntegerAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class IntegerSetAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "IntegerSetAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.IntegerSetAttribute_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.IntegerSetAttribute_Def.__bases__:
                bases = list(ns1.IntegerSetAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.IntegerSetAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class KeywordCategoryIdSearchParameter_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "KeywordCategoryIdSearchParameter")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.KeywordCategoryIdSearchParameter_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"categoryId"), aname="_categoryId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.SearchParameter_Def not in ns1.KeywordCategoryIdSearchParameter_Def.__bases__:
                bases = list(ns1.KeywordCategoryIdSearchParameter_Def.__bases__)
                bases.insert(0, ns1.SearchParameter_Def)
                ns1.KeywordCategoryIdSearchParameter_Def.__bases__ = tuple(bases)

            ns1.SearchParameter_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class KeywordMatchTypeSearchParameter_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "KeywordMatchTypeSearchParameter")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.KeywordMatchTypeSearchParameter_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","KeywordMatchType",lazy=False)(pname=(ns,"keywordMatchTypes"), aname="_keywordMatchTypes", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.SearchParameter_Def not in ns1.KeywordMatchTypeSearchParameter_Def.__bases__:
                bases = list(ns1.KeywordMatchTypeSearchParameter_Def.__bases__)
                bases.insert(0, ns1.SearchParameter_Def)
                ns1.KeywordMatchTypeSearchParameter_Def.__bases__ = tuple(bases)

            ns1.SearchParameter_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LongAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "LongAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.LongAttribute_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.LongAttribute_Def.__bases__:
                bases = list(ns1.LongAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.LongAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LongComparisonOperation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "LongComparisonOperation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.LongComparisonOperation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"minimum"), aname="_minimum", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"maximum"), aname="_maximum", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"excludes"), aname="_excludes", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._minimum = None
                    self._maximum = None
                    self._excludes = []
                    return
            Holder.__name__ = "LongComparisonOperation_Holder"
            self.pyclass = Holder

    class MobileSearchParameter_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "MobileSearchParameter")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.MobileSearchParameter_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.SearchParameter_Def not in ns1.MobileSearchParameter_Def.__bases__:
                bases = list(ns1.MobileSearchParameter_Def.__bases__)
                bases.insert(0, ns1.SearchParameter_Def)
                ns1.MobileSearchParameter_Def.__bases__ = tuple(bases)

            ns1.SearchParameter_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MonthlySearchVolume_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "MonthlySearchVolume")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.MonthlySearchVolume_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"year"), aname="_year", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"month"), aname="_month", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"count"), aname="_count", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._year = None
                    self._month = None
                    self._count = None
                    return
            Holder.__name__ = "MonthlySearchVolume_Holder"
            self.pyclass = Holder

    class MonthlySearchVolumeAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "MonthlySearchVolumeAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.MonthlySearchVolumeAttribute_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201003","MonthlySearchVolume",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.MonthlySearchVolumeAttribute_Def.__bases__:
                bases = list(ns1.MonthlySearchVolumeAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.MonthlySearchVolumeAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PlacementTypeAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "PlacementTypeAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.PlacementTypeAttribute_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201003","SiteConstants.PlacementType",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.PlacementTypeAttribute_Def.__bases__:
                bases = list(ns1.PlacementTypeAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.PlacementTypeAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PlacementTypeSearchParameter_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "PlacementTypeSearchParameter")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.PlacementTypeSearchParameter_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201003","SiteConstants.PlacementType",lazy=False)(pname=(ns,"placementTypes"), aname="_placementTypes", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.SearchParameter_Def not in ns1.PlacementTypeSearchParameter_Def.__bases__:
                bases = list(ns1.PlacementTypeSearchParameter_Def.__bases__)
                bases.insert(0, ns1.SearchParameter_Def)
                ns1.PlacementTypeSearchParameter_Def.__bases__ = tuple(bases)

            ns1.SearchParameter_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RelatedToUrlSearchParameter_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "RelatedToUrlSearchParameter")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.RelatedToUrlSearchParameter_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"urls"), aname="_urls", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"includeSubUrls"), aname="_includeSubUrls", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.SearchParameter_Def not in ns1.RelatedToUrlSearchParameter_Def.__bases__:
                bases = list(ns1.RelatedToUrlSearchParameter_Def.__bases__)
                bases.insert(0, ns1.SearchParameter_Def)
                ns1.RelatedToUrlSearchParameter_Def.__bases__ = tuple(bases)

            ns1.SearchParameter_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SearchShareSearchParameter_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "SearchShareSearchParameter")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.SearchShareSearchParameter_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201003","DoubleComparisonOperation",lazy=False)(pname=(ns,"operation"), aname="_operation", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.SearchParameter_Def not in ns1.SearchShareSearchParameter_Def.__bases__:
                bases = list(ns1.SearchShareSearchParameter_Def.__bases__)
                bases.insert(0, ns1.SearchParameter_Def)
                ns1.SearchShareSearchParameter_Def.__bases__ = tuple(bases)

            ns1.SearchParameter_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SeedAdGroupIdSearchParameter_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "SeedAdGroupIdSearchParameter")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.SeedAdGroupIdSearchParameter_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"adGroupId"), aname="_adGroupId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.SearchParameter_Def not in ns1.SeedAdGroupIdSearchParameter_Def.__bases__:
                bases = list(ns1.SeedAdGroupIdSearchParameter_Def.__bases__)
                bases.insert(0, ns1.SearchParameter_Def)
                ns1.SeedAdGroupIdSearchParameter_Def.__bases__ = tuple(bases)

            ns1.SearchParameter_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class StringAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "StringAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.StringAttribute_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.StringAttribute_Def.__bases__:
                bases = list(ns1.StringAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.StringAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TargetingIdeaError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "TargetingIdeaError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.TargetingIdeaError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201003","TargetingIdeaError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns1.TargetingIdeaError_Def.__bases__:
                bases = list(ns1.TargetingIdeaError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns1.TargetingIdeaError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class WebpageDescriptor_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "WebpageDescriptor")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.WebpageDescriptor_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"url"), aname="_url", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"title"), aname="_title", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._url = None
                    self._title = None
                    return
            Holder.__name__ = "WebpageDescriptor_Holder"
            self.pyclass = Holder

    class WebpageDescriptorAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "WebpageDescriptorAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.WebpageDescriptorAttribute_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201003","WebpageDescriptor",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.WebpageDescriptorAttribute_Def.__bases__:
                bases = list(ns1.WebpageDescriptorAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.WebpageDescriptorAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdShareSearchParameter_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "AdShareSearchParameter")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.AdShareSearchParameter_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201003","DoubleComparisonOperation",lazy=False)(pname=(ns,"operation"), aname="_operation", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.SearchParameter_Def not in ns1.AdShareSearchParameter_Def.__bases__:
                bases = list(ns1.AdShareSearchParameter_Def.__bases__)
                bases.insert(0, ns1.SearchParameter_Def)
                ns1.AdShareSearchParameter_Def.__bases__ = tuple(bases)

            ns1.SearchParameter_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AverageTargetedMonthlySearchesSearchParameter_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "AverageTargetedMonthlySearchesSearchParameter")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.AverageTargetedMonthlySearchesSearchParameter_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201003","LongComparisonOperation",lazy=False)(pname=(ns,"operation"), aname="_operation", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.SearchParameter_Def not in ns1.AverageTargetedMonthlySearchesSearchParameter_Def.__bases__:
                bases = list(ns1.AverageTargetedMonthlySearchesSearchParameter_Def.__bases__)
                bases.insert(0, ns1.SearchParameter_Def)
                ns1.AverageTargetedMonthlySearchesSearchParameter_Def.__bases__ = tuple(bases)

            ns1.SearchParameter_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GlobalMonthlySearchesSearchParameter_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "GlobalMonthlySearchesSearchParameter")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.GlobalMonthlySearchesSearchParameter_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201003","LongComparisonOperation",lazy=False)(pname=(ns,"operation"), aname="_operation", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.SearchParameter_Def not in ns1.GlobalMonthlySearchesSearchParameter_Def.__bases__:
                bases = list(ns1.GlobalMonthlySearchesSearchParameter_Def.__bases__)
                bases.insert(0, ns1.SearchParameter_Def)
                ns1.GlobalMonthlySearchesSearchParameter_Def.__bases__ = tuple(bases)

            ns1.SearchParameter_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MoneyAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "MoneyAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.MoneyAttribute_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","Money",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.MoneyAttribute_Def.__bases__:
                bases = list(ns1.MoneyAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.MoneyAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Range_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "Range")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Range_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","ComparableValue",lazy=False)(pname=(ns,"min"), aname="_min", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","ComparableValue",lazy=False)(pname=(ns,"max"), aname="_max", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._min = None
                    self._max = None
                    return
            Holder.__name__ = "Range_Holder"
            self.pyclass = Holder

    class CountryTargetSearchParameter_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "CountryTargetSearchParameter")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.CountryTargetSearchParameter_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","CountryTarget",lazy=False)(pname=(ns,"countryTargets"), aname="_countryTargets", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.SearchParameter_Def not in ns1.CountryTargetSearchParameter_Def.__bases__:
                bases = list(ns1.CountryTargetSearchParameter_Def.__bases__)
                bases.insert(0, ns1.SearchParameter_Def)
                ns1.CountryTargetSearchParameter_Def.__bases__ = tuple(bases)

            ns1.SearchParameter_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LanguageTargetSearchParameter_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "LanguageTargetSearchParameter")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.LanguageTargetSearchParameter_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","LanguageTarget",lazy=False)(pname=(ns,"languageTargets"), aname="_languageTargets", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.SearchParameter_Def not in ns1.LanguageTargetSearchParameter_Def.__bases__:
                bases = list(ns1.LanguageTargetSearchParameter_Def.__bases__)
                bases.insert(0, ns1.SearchParameter_Def)
                ns1.LanguageTargetSearchParameter_Def.__bases__ = tuple(bases)

            ns1.SearchParameter_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LongRangeAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "LongRangeAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.LongRangeAttribute_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201003","Range",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.LongRangeAttribute_Def.__bases__:
                bases = list(ns1.LongRangeAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.LongRangeAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ExcludedKeywordSearchParameter_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "ExcludedKeywordSearchParameter")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.ExcludedKeywordSearchParameter_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","Keyword",lazy=False)(pname=(ns,"keywords"), aname="_keywords", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.SearchParameter_Def not in ns1.ExcludedKeywordSearchParameter_Def.__bases__:
                bases = list(ns1.ExcludedKeywordSearchParameter_Def.__bases__)
                bases.insert(0, ns1.SearchParameter_Def)
                ns1.ExcludedKeywordSearchParameter_Def.__bases__ = tuple(bases)

            ns1.SearchParameter_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class KeywordAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "KeywordAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.KeywordAttribute_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","Keyword",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.KeywordAttribute_Def.__bases__:
                bases = list(ns1.KeywordAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.KeywordAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PlacementAttribute_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "PlacementAttribute")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.PlacementAttribute_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","Placement",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Attribute_Def not in ns1.PlacementAttribute_Def.__bases__:
                bases = list(ns1.PlacementAttribute_Def.__bases__)
                bases.insert(0, ns1.Attribute_Def)
                ns1.PlacementAttribute_Def.__bases__ = tuple(bases)

            ns1.Attribute_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RelatedToKeywordSearchParameter_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "RelatedToKeywordSearchParameter")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.RelatedToKeywordSearchParameter_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","Keyword",lazy=False)(pname=(ns,"keywords"), aname="_keywords", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.SearchParameter_Def not in ns1.RelatedToKeywordSearchParameter_Def.__bases__:
                bases = list(ns1.RelatedToKeywordSearchParameter_Def.__bases__)
                bases.insert(0, ns1.SearchParameter_Def)
                ns1.RelatedToKeywordSearchParameter_Def.__bases__ = tuple(bases)

            ns1.SearchParameter_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SearchParameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "SearchParameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.SearchParameter_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"SearchParameter.Type"), aname="_SearchParameter_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SearchParameter_Type = None
                    return
            Holder.__name__ = "SearchParameter_Holder"
            self.pyclass = Holder

    class TargetingIdeaSelector_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "TargetingIdeaSelector")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.TargetingIdeaSelector_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201003","SearchParameter",lazy=False)(pname=(ns,"searchParameters"), aname="_searchParameters", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/o/v201003","IdeaType",lazy=False)(pname=(ns,"ideaType"), aname="_ideaType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/o/v201003","RequestType",lazy=False)(pname=(ns,"requestType"), aname="_requestType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/o/v201003","AttributeType",lazy=False)(pname=(ns,"requestedAttributeTypes"), aname="_requestedAttributeTypes", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","Paging",lazy=False)(pname=(ns,"paging"), aname="_paging", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"localeCode"), aname="_localeCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"currencyCode"), aname="_currencyCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._searchParameters = []
                    self._ideaType = None
                    self._requestType = None
                    self._requestedAttributeTypes = []
                    self._paging = None
                    self._localeCode = None
                    self._currencyCode = None
                    return
            Holder.__name__ = "TargetingIdeaSelector_Holder"
            self.pyclass = Holder

    class Attribute_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "Attribute")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Attribute_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Attribute.Type"), aname="_Attribute_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Attribute_Type = None
                    return
            Holder.__name__ = "Attribute_Holder"
            self.pyclass = Holder

    class Type_AttributeMapEntry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "Type_AttributeMapEntry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Type_AttributeMapEntry_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201003","AttributeType",lazy=False)(pname=(ns,"key"), aname="_key", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/o/v201003","Attribute",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._key = None
                    self._value = None
                    return
            Holder.__name__ = "Type_AttributeMapEntry_Holder"
            self.pyclass = Holder

    class TargetingIdea_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "TargetingIdea")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.TargetingIdea_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201003","Type_AttributeMapEntry",lazy=False)(pname=(ns,"data"), aname="_data", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._data = []
                    return
            Holder.__name__ = "TargetingIdea_Holder"
            self.pyclass = Holder

    class TargetingIdeaPage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "TargetingIdeaPage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.TargetingIdeaPage_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"totalNumEntries"), aname="_totalNumEntries", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/o/v201003","TargetingIdea",lazy=False)(pname=(ns,"entries"), aname="_entries", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._totalNumEntries = None
                    self._entries = []
                    return
            Holder.__name__ = "TargetingIdeaPage_Holder"
            self.pyclass = Holder

    class AttributeType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "AttributeType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CollectionSizeError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "CollectionSizeError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CompetitionSearchParameter_Level_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "CompetitionSearchParameter.Level")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class IdeaType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "IdeaType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MatchAction_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "MatchAction")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RequestType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "RequestType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SiteConstants_AdFormat_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "SiteConstants.AdFormat")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SiteConstants_AdType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "SiteConstants.AdType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SiteConstants_PlacementType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "SiteConstants.PlacementType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class TargetingIdeaError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        type = (schema, "TargetingIdeaError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class getTargetingIdea_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getTargetingIdea"
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        def __init__(self, **kw):
            ns = ns1.getTargetingIdea_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201003","TargetingIdeaSelector",lazy=False)(pname=(ns,"selector"), aname="_selector", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/o/v201003","get")
            kw["aname"] = "_get"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._selector = None
                    return
            Holder.__name__ = "get_Holder"
            self.pyclass = Holder

    class getTargetingIdeaResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getTargetingIdeaResponse"
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        def __init__(self, **kw):
            ns = ns1.getTargetingIdeaResponse_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201003","TargetingIdeaPage",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/o/v201003","getResponse")
            kw["aname"] = "_getResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = None
                    return
            Holder.__name__ = "getTargetingIdeaResponse_Holder"
            self.pyclass = Holder

    class ApiExceptionFault_Dec(ElementDeclaration):
        literal = "ApiExceptionFault"
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/o/v201003","ApiExceptionFault")
            kw["aname"] = "_ApiExceptionFault"
            if ns0.ApiException_Def not in ns1.ApiExceptionFault_Dec.__bases__:
                bases = list(ns1.ApiExceptionFault_Dec.__bases__)
                bases.insert(0, ns0.ApiException_Def)
                ns1.ApiExceptionFault_Dec.__bases__ = tuple(bases)

            ns0.ApiException_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ApiExceptionFault_Dec_Holder"

    class getBulkKeywordIdeas_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getBulkKeywordIdeas"
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        def __init__(self, **kw):
            ns = ns1.getBulkKeywordIdeas_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201003","TargetingIdeaSelector",lazy=False)(pname=(ns,"selector"), aname="_selector", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/o/v201003","getBulkKeywordIdeas")
            kw["aname"] = "_getBulkKeywordIdeas"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._selector = None
                    return
            Holder.__name__ = "getBulkKeywordIdeas_Holder"
            self.pyclass = Holder

    class getBulkKeywordIdeasResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getBulkKeywordIdeasResponse"
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        def __init__(self, **kw):
            ns = ns1.getBulkKeywordIdeasResponse_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/o/v201003","TargetingIdeaPage",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/o/v201003","getBulkKeywordIdeasResponse")
            kw["aname"] = "_getBulkKeywordIdeasResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = None
                    return
            Holder.__name__ = "getBulkKeywordIdeasResponse_Holder"
            self.pyclass = Holder

    class RequestHeader_Dec(ElementDeclaration):
        literal = "RequestHeader"
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/o/v201003","RequestHeader")
            kw["aname"] = "_RequestHeader"
            if ns0.SoapHeader_Def not in ns1.RequestHeader_Dec.__bases__:
                bases = list(ns1.RequestHeader_Dec.__bases__)
                bases.insert(0, ns0.SoapHeader_Def)
                ns1.RequestHeader_Dec.__bases__ = tuple(bases)

            ns0.SoapHeader_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "RequestHeader_Dec_Holder"

    class ResponseHeader_Dec(ElementDeclaration):
        literal = "ResponseHeader"
        schema = "https://adwords.google.com/api/adwords/o/v201003"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/o/v201003","ResponseHeader")
            kw["aname"] = "_ResponseHeader"
            if ns0.SoapResponseHeader_Def not in ns1.ResponseHeader_Dec.__bases__:
                bases = list(ns1.ResponseHeader_Dec.__bases__)
                bases.insert(0, ns0.SoapResponseHeader_Def)
                ns1.ResponseHeader_Dec.__bases__ = tuple(bases)

            ns0.SoapResponseHeader_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ResponseHeader_Dec_Holder"

# end class ns1 (tns: https://adwords.google.com/api/adwords/o/v201003)

##############################
# targetNamespace
# https://adwords.google.com/api/adwords/cm/v201003
##############################

class ns0:
    targetNamespace = "https://adwords.google.com/api/adwords/cm/v201003"

    class AdGroupCriterionError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AdGroupCriterionError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdGroupCriterionError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","AdGroupCriterionError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AdGroupCriterionError_Def.__bases__:
                bases = list(ns0.AdGroupCriterionError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AdGroupCriterionError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdGroupCriterionLimitExceeded_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AdGroupCriterionLimitExceeded")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdGroupCriterionLimitExceeded_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","AdGroupCriterionLimitExceeded.CriteriaLimitType",lazy=False)(pname=(ns,"limitType"), aname="_limitType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.EntityCountLimitExceeded_Def not in ns0.AdGroupCriterionLimitExceeded_Def.__bases__:
                bases = list(ns0.AdGroupCriterionLimitExceeded_Def.__bases__)
                bases.insert(0, ns0.EntityCountLimitExceeded_Def)
                ns0.AdGroupCriterionLimitExceeded_Def.__bases__ = tuple(bases)

            ns0.EntityCountLimitExceeded_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdScheduleTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AdScheduleTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdScheduleTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","DayOfWeek",lazy=False)(pname=(ns,"dayOfWeek"), aname="_dayOfWeek", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"startHour"), aname="_startHour", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","MinuteOfHour",lazy=False)(pname=(ns,"startMinute"), aname="_startMinute", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"endHour"), aname="_endHour", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","MinuteOfHour",lazy=False)(pname=(ns,"endMinute"), aname="_endMinute", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"bidMultiplier"), aname="_bidMultiplier", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.AdScheduleTarget_Def.__bases__:
                bases = list(ns0.AdScheduleTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.AdScheduleTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Address_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Address")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Address_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"streetAddress"), aname="_streetAddress", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"streetAddress2"), aname="_streetAddress2", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"cityName"), aname="_cityName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"provinceCode"), aname="_provinceCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"provinceName"), aname="_provinceName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"postalCode"), aname="_postalCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._streetAddress = None
                    self._streetAddress2 = None
                    self._cityName = None
                    self._provinceCode = None
                    self._provinceName = None
                    self._postalCode = None
                    self._countryCode = None
                    return
            Holder.__name__ = "Address_Holder"
            self.pyclass = Holder

    class AgeTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AgeTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AgeTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","AgeTarget.Age",lazy=False)(pname=(ns,"age"), aname="_age", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.DemographicTarget_Def not in ns0.AgeTarget_Def.__bases__:
                bases = list(ns0.AgeTarget_Def.__bases__)
                bases.insert(0, ns0.DemographicTarget_Def)
                ns0.AgeTarget_Def.__bases__ = tuple(bases)

            ns0.DemographicTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AuthenticationError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AuthenticationError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AuthenticationError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","AuthenticationError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AuthenticationError_Def.__bases__:
                bases = list(ns0.AuthenticationError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AuthenticationError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AuthorizationError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AuthorizationError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AuthorizationError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","AuthorizationError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AuthorizationError_Def.__bases__:
                bases = list(ns0.AuthorizationError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AuthorizationError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BiddingError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "BiddingError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.BiddingError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","BiddingError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.BiddingError_Def.__bases__:
                bases = list(ns0.BiddingError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.BiddingError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BudgetError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "BudgetError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.BudgetError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","BudgetError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.BudgetError_Def.__bases__:
                bases = list(ns0.BudgetError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.BudgetError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CityTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "CityTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CityTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"cityName"), aname="_cityName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"provinceCode"), aname="_provinceCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.GeoTarget_Def not in ns0.CityTarget_Def.__bases__:
                bases = list(ns0.CityTarget_Def.__bases__)
                bases.insert(0, ns0.GeoTarget_Def)
                ns0.CityTarget_Def.__bases__ = tuple(bases)

            ns0.GeoTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ClientTermsError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ClientTermsError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ClientTermsError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","ClientTermsError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.ClientTermsError_Def.__bases__:
                bases = list(ns0.ClientTermsError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.ClientTermsError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CountryTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "CountryTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CountryTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.GeoTarget_Def not in ns0.CountryTarget_Def.__bases__:
                bases = list(ns0.CountryTarget_Def.__bases__)
                bases.insert(0, ns0.GeoTarget_Def)
                ns0.CountryTarget_Def.__bases__ = tuple(bases)

            ns0.GeoTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CriterionPolicyError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "CriterionPolicyError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CriterionPolicyError_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.PolicyViolationError_Def not in ns0.CriterionPolicyError_Def.__bases__:
                bases = list(ns0.CriterionPolicyError_Def.__bases__)
                bases.insert(0, ns0.PolicyViolationError_Def)
                ns0.CriterionPolicyError_Def.__bases__ = tuple(bases)

            ns0.PolicyViolationError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DateError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "DateError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DateError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","DateError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.DateError_Def.__bases__:
                bases = list(ns0.DateError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.DateError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DistinctError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "DistinctError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DistinctError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","DistinctError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.DistinctError_Def.__bases__:
                bases = list(ns0.DistinctError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.DistinctError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DoubleValue_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "DoubleValue")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DoubleValue_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"number"), aname="_number", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.NumberValue_Def not in ns0.DoubleValue_Def.__bases__:
                bases = list(ns0.DoubleValue_Def.__bases__)
                bases.insert(0, ns0.NumberValue_Def)
                ns0.DoubleValue_Def.__bases__ = tuple(bases)

            ns0.NumberValue_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class EntityCountLimitExceeded_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "EntityCountLimitExceeded")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.EntityCountLimitExceeded_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","EntityCountLimitExceeded.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"enclosingId"), aname="_enclosingId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"limit"), aname="_limit", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.EntityCountLimitExceeded_Def.__bases__:
                bases = list(ns0.EntityCountLimitExceeded_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.EntityCountLimitExceeded_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class EntityNotFound_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "EntityNotFound")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.EntityNotFound_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","EntityNotFound.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.EntityNotFound_Def.__bases__:
                bases = list(ns0.EntityNotFound_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.EntityNotFound_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GenderTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "GenderTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.GenderTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","GenderTarget.Gender",lazy=False)(pname=(ns,"gender"), aname="_gender", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.DemographicTarget_Def not in ns0.GenderTarget_Def.__bases__:
                bases = list(ns0.GenderTarget_Def.__bases__)
                bases.insert(0, ns0.DemographicTarget_Def)
                ns0.GenderTarget_Def.__bases__ = tuple(bases)

            ns0.DemographicTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GeoPoint_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "GeoPoint")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GeoPoint_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"latitudeInMicroDegrees"), aname="_latitudeInMicroDegrees", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"longitudeInMicroDegrees"), aname="_longitudeInMicroDegrees", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._latitudeInMicroDegrees = None
                    self._longitudeInMicroDegrees = None
                    return
            Holder.__name__ = "GeoPoint_Holder"
            self.pyclass = Holder

    class InternalApiError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "InternalApiError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.InternalApiError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","InternalApiError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.InternalApiError_Def.__bases__:
                bases = list(ns0.InternalApiError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.InternalApiError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Keyword_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Keyword")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Keyword_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"text"), aname="_text", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","KeywordMatchType",lazy=False)(pname=(ns,"matchType"), aname="_matchType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Criterion_Def not in ns0.Keyword_Def.__bases__:
                bases = list(ns0.Keyword_Def.__bases__)
                bases.insert(0, ns0.Criterion_Def)
                ns0.Keyword_Def.__bases__ = tuple(bases)

            ns0.Criterion_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LanguageTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "LanguageTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.LanguageTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"languageCode"), aname="_languageCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.LanguageTarget_Def.__bases__:
                bases = list(ns0.LanguageTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.LanguageTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LongValue_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "LongValue")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.LongValue_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"number"), aname="_number", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.NumberValue_Def not in ns0.LongValue_Def.__bases__:
                bases = list(ns0.LongValue_Def.__bases__)
                bases.insert(0, ns0.NumberValue_Def)
                ns0.LongValue_Def.__bases__ = tuple(bases)

            ns0.NumberValue_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MetroTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "MetroTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MetroTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"metroCode"), aname="_metroCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.GeoTarget_Def not in ns0.MetroTarget_Def.__bases__:
                bases = list(ns0.MetroTarget_Def.__bases__)
                bases.insert(0, ns0.GeoTarget_Def)
                ns0.MetroTarget_Def.__bases__ = tuple(bases)

            ns0.GeoTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MobileCarrierTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "MobileCarrierTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MobileCarrierTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"carrierName"), aname="_carrierName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.MobileTarget_Def not in ns0.MobileCarrierTarget_Def.__bases__:
                bases = list(ns0.MobileCarrierTarget_Def.__bases__)
                bases.insert(0, ns0.MobileTarget_Def)
                ns0.MobileCarrierTarget_Def.__bases__ = tuple(bases)

            ns0.MobileTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MobilePlatformTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "MobilePlatformTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MobilePlatformTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"platformName"), aname="_platformName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.MobileTarget_Def not in ns0.MobilePlatformTarget_Def.__bases__:
                bases = list(ns0.MobilePlatformTarget_Def.__bases__)
                bases.insert(0, ns0.MobileTarget_Def)
                ns0.MobilePlatformTarget_Def.__bases__ = tuple(bases)

            ns0.MobileTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MobileTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "MobileTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MobileTarget_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.MobileTarget_Def.__bases__:
                bases = list(ns0.MobileTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.MobileTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Money_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Money")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Money_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"microAmount"), aname="_microAmount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ComparableValue_Def not in ns0.Money_Def.__bases__:
                bases = list(ns0.Money_Def.__bases__)
                bases.insert(0, ns0.ComparableValue_Def)
                ns0.Money_Def.__bases__ = tuple(bases)

            ns0.ComparableValue_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NetworkTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "NetworkTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NetworkTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","NetworkCoverageType",lazy=False)(pname=(ns,"networkCoverageType"), aname="_networkCoverageType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.NetworkTarget_Def.__bases__:
                bases = list(ns0.NetworkTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.NetworkTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NotEmptyError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "NotEmptyError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NotEmptyError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","NotEmptyError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NotEmptyError_Def.__bases__:
                bases = list(ns0.NotEmptyError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NotEmptyError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NotWhitelistedError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "NotWhitelistedError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NotWhitelistedError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","NotWhitelistedError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NotWhitelistedError_Def.__bases__:
                bases = list(ns0.NotWhitelistedError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NotWhitelistedError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NullError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "NullError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NullError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","NullError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NullError_Def.__bases__:
                bases = list(ns0.NullError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NullError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NumberValue_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "NumberValue")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NumberValue_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ComparableValue_Def not in ns0.NumberValue_Def.__bases__:
                bases = list(ns0.NumberValue_Def.__bases__)
                bases.insert(0, ns0.ComparableValue_Def)
                ns0.NumberValue_Def.__bases__ = tuple(bases)

            ns0.ComparableValue_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Paging_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Paging")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Paging_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"startIndex"), aname="_startIndex", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"numberResults"), aname="_numberResults", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._startIndex = None
                    self._numberResults = None
                    return
            Holder.__name__ = "Paging_Holder"
            self.pyclass = Holder

    class Placement_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Placement")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Placement_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"url"), aname="_url", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Criterion_Def not in ns0.Placement_Def.__bases__:
                bases = list(ns0.Placement_Def.__bases__)
                bases.insert(0, ns0.Criterion_Def)
                ns0.Placement_Def.__bases__ = tuple(bases)

            ns0.Criterion_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PlatformTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "PlatformTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.PlatformTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","PlatformType",lazy=False)(pname=(ns,"platformType"), aname="_platformType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.PlatformTarget_Def.__bases__:
                bases = list(ns0.PlatformTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.PlatformTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PolicyViolationError_Part_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "PolicyViolationError.Part")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PolicyViolationError_Part_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"index"), aname="_index", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"length"), aname="_length", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._index = None
                    self._length = None
                    return
            Holder.__name__ = "PolicyViolationError.Part_Holder"
            self.pyclass = Holder

    class PolicyViolationKey_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "PolicyViolationKey")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PolicyViolationKey_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"policyName"), aname="_policyName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"violatingText"), aname="_violatingText", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._policyName = None
                    self._violatingText = None
                    return
            Holder.__name__ = "PolicyViolationKey_Holder"
            self.pyclass = Holder

    class PolygonTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "PolygonTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.PolygonTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","GeoPoint",lazy=False)(pname=(ns,"vertices"), aname="_vertices", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.GeoTarget_Def not in ns0.PolygonTarget_Def.__bases__:
                bases = list(ns0.PolygonTarget_Def.__bases__)
                bases.insert(0, ns0.GeoTarget_Def)
                ns0.PolygonTarget_Def.__bases__ = tuple(bases)

            ns0.GeoTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ProvinceTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ProvinceTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ProvinceTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"provinceCode"), aname="_provinceCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.GeoTarget_Def not in ns0.ProvinceTarget_Def.__bases__:
                bases = list(ns0.ProvinceTarget_Def.__bases__)
                bases.insert(0, ns0.GeoTarget_Def)
                ns0.ProvinceTarget_Def.__bases__ = tuple(bases)

            ns0.GeoTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ProximityTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ProximityTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ProximityTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","GeoPoint",lazy=False)(pname=(ns,"geoPoint"), aname="_geoPoint", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","ProximityTarget.DistanceUnits",lazy=False)(pname=(ns,"radiusDistanceUnits"), aname="_radiusDistanceUnits", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"radiusInUnits"), aname="_radiusInUnits", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","Address",lazy=False)(pname=(ns,"address"), aname="_address", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"allowServiceOfAddress"), aname="_allowServiceOfAddress", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.GeoTarget_Def not in ns0.ProximityTarget_Def.__bases__:
                bases = list(ns0.ProximityTarget_Def.__bases__)
                bases.insert(0, ns0.GeoTarget_Def)
                ns0.ProximityTarget_Def.__bases__ = tuple(bases)

            ns0.GeoTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class QuotaCheckError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "QuotaCheckError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.QuotaCheckError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","QuotaCheckError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.QuotaCheckError_Def.__bases__:
                bases = list(ns0.QuotaCheckError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.QuotaCheckError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RangeError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "RangeError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RangeError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","RangeError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RangeError_Def.__bases__:
                bases = list(ns0.RangeError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RangeError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RateExceededError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "RateExceededError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RateExceededError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","RateExceededError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"rateName"), aname="_rateName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"rateScope"), aname="_rateScope", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"retryAfterSeconds"), aname="_retryAfterSeconds", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RateExceededError_Def.__bases__:
                bases = list(ns0.RateExceededError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RateExceededError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ReadOnlyError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ReadOnlyError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ReadOnlyError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","ReadOnlyError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.ReadOnlyError_Def.__bases__:
                bases = list(ns0.ReadOnlyError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.ReadOnlyError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RegionCodeError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "RegionCodeError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RegionCodeError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","RegionCodeError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RegionCodeError_Def.__bases__:
                bases = list(ns0.RegionCodeError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RegionCodeError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RequestError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "RequestError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RequestError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","RequestError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RequestError_Def.__bases__:
                bases = list(ns0.RequestError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RequestError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RequiredError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "RequiredError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RequiredError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","RequiredError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RequiredError_Def.__bases__:
                bases = list(ns0.RequiredError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RequiredError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SizeLimitError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "SizeLimitError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.SizeLimitError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","SizeLimitError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.SizeLimitError_Def.__bases__:
                bases = list(ns0.SizeLimitError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.SizeLimitError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SoapHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "SoapHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SoapHeader_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"authToken"), aname="_authToken", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clientCustomerId"), aname="_clientCustomerId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clientEmail"), aname="_clientEmail", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"developerToken"), aname="_developerToken", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userAgent"), aname="_userAgent", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"validateOnly"), aname="_validateOnly", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._authToken = None
                    self._clientCustomerId = None
                    self._clientEmail = None
                    self._developerToken = None
                    self._userAgent = None
                    self._validateOnly = None
                    return
            Holder.__name__ = "SoapHeader_Holder"
            self.pyclass = Holder

    class SoapResponseHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "SoapResponseHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SoapResponseHeader_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"requestId"), aname="_requestId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"operations"), aname="_operations", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"responseTime"), aname="_responseTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"units"), aname="_units", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requestId = None
                    self._operations = None
                    self._responseTime = None
                    self._units = None
                    return
            Holder.__name__ = "SoapResponseHeader_Holder"
            self.pyclass = Holder

    class StatsQueryError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "StatsQueryError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.StatsQueryError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","StatsQueryError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.StatsQueryError_Def.__bases__:
                bases = list(ns0.StatsQueryError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.StatsQueryError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class StringLengthError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "StringLengthError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.StringLengthError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","StringLengthError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.StringLengthError_Def.__bases__:
                bases = list(ns0.StringLengthError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.StringLengthError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TargetError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "TargetError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.TargetError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","TargetError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.TargetError_Def.__bases__:
                bases = list(ns0.TargetError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.TargetError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Vertical_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Vertical")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Vertical_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"path"), aname="_path", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Criterion_Def not in ns0.Vertical_Def.__bases__:
                bases = list(ns0.Vertical_Def.__bases__)
                bases.insert(0, ns0.Criterion_Def)
                ns0.Vertical_Def.__bases__ = tuple(bases)

            ns0.Criterion_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ComparableValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ComparableValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ComparableValue_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"ComparableValue.Type"), aname="_ComparableValue_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ComparableValue_Type = None
                    return
            Holder.__name__ = "ComparableValue_Holder"
            self.pyclass = Holder

    class DatabaseError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "DatabaseError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DatabaseError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","DatabaseError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.DatabaseError_Def.__bases__:
                bases = list(ns0.DatabaseError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.DatabaseError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DemographicTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "DemographicTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DemographicTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"bidModifier"), aname="_bidModifier", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.DemographicTarget_Def.__bases__:
                bases = list(ns0.DemographicTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.DemographicTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GeoTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "GeoTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.GeoTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"excluded"), aname="_excluded", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.GeoTarget_Def.__bases__:
                bases = list(ns0.GeoTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.GeoTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PolicyViolationError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "PolicyViolationError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.PolicyViolationError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","PolicyViolationKey",lazy=False)(pname=(ns,"key"), aname="_key", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"externalPolicyName"), aname="_externalPolicyName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"externalPolicyUrl"), aname="_externalPolicyUrl", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"externalPolicyDescription"), aname="_externalPolicyDescription", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"isExemptable"), aname="_isExemptable", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","PolicyViolationError.Part",lazy=False)(pname=(ns,"violatingParts"), aname="_violatingParts", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.PolicyViolationError_Def.__bases__:
                bases = list(ns0.PolicyViolationError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.PolicyViolationError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Target_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Target")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Target_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Target.Type"), aname="_Target_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Target_Type = None
                    return
            Holder.__name__ = "Target_Holder"
            self.pyclass = Holder

    class ApiError_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ApiError")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ApiError_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"fieldPath"), aname="_fieldPath", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"trigger"), aname="_trigger", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"errorString"), aname="_errorString", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ApiError.Type"), aname="_ApiError_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fieldPath = None
                    self._trigger = None
                    self._errorString = None
                    self._ApiError_Type = None
                    return
            Holder.__name__ = "ApiError_Holder"
            self.pyclass = Holder

    class ApiException_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ApiException")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ApiException_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","ApiError",lazy=False)(pname=(ns,"errors"), aname="_errors", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApplicationException_Def not in ns0.ApiException_Def.__bases__:
                bases = list(ns0.ApiException_Def.__bases__)
                bases.insert(0, ns0.ApplicationException_Def)
                ns0.ApiException_Def.__bases__ = tuple(bases)

            ns0.ApplicationException_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ApplicationException_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ApplicationException")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ApplicationException_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ApplicationException.Type"), aname="_ApplicationException_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    self._ApplicationException_Type = None
                    return
            Holder.__name__ = "ApplicationException_Holder"
            self.pyclass = Holder

    class Criterion_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Criterion")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Criterion_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Criterion.Type"), aname="_Criterion_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._Criterion_Type = None
                    return
            Holder.__name__ = "Criterion_Holder"
            self.pyclass = Holder

    class AdGroupCriterionError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AdGroupCriterionError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdGroupCriterionLimitExceeded_CriteriaLimitType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AdGroupCriterionLimitExceeded.CriteriaLimitType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AgeTarget_Age_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AgeTarget.Age")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AuthenticationError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AuthenticationError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AuthorizationError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AuthorizationError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class BiddingError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "BiddingError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class BudgetError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "BudgetError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ClientTermsError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ClientTermsError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DatabaseError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "DatabaseError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DateError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "DateError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DayOfWeek_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "DayOfWeek")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DistinctError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "DistinctError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class EntityCountLimitExceeded_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "EntityCountLimitExceeded.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class EntityNotFound_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "EntityNotFound.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GenderTarget_Gender_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "GenderTarget.Gender")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class InternalApiError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "InternalApiError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class KeywordMatchType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "KeywordMatchType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MinuteOfHour_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "MinuteOfHour")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NetworkCoverageType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "NetworkCoverageType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NotEmptyError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "NotEmptyError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NotWhitelistedError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "NotWhitelistedError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NullError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "NullError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PlatformType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "PlatformType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ProximityTarget_DistanceUnits_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ProximityTarget.DistanceUnits")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class QuotaCheckError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "QuotaCheckError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RangeError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "RangeError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RateExceededError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "RateExceededError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ReadOnlyError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ReadOnlyError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RegionCodeError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "RegionCodeError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RequestError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "RequestError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RequiredError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "RequiredError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SizeLimitError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "SizeLimitError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class StatsQueryError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "StatsQueryError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class StringLengthError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "StringLengthError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class TargetError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "TargetError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

# end class ns0 (tns: https://adwords.google.com/api/adwords/cm/v201003)
