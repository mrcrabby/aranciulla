################################################## 
# CampaignTargetService_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# https://adwords.google.com/api/adwords/cm/v201008
##############################

class ns0:
    targetNamespace = "https://adwords.google.com/api/adwords/cm/v201008"

    class AdScheduleTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdScheduleTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdScheduleTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","DayOfWeek",lazy=False)(pname=(ns,"dayOfWeek"), aname="_dayOfWeek", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"startHour"), aname="_startHour", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","MinuteOfHour",lazy=False)(pname=(ns,"startMinute"), aname="_startMinute", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"endHour"), aname="_endHour", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","MinuteOfHour",lazy=False)(pname=(ns,"endMinute"), aname="_endMinute", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"bidMultiplier"), aname="_bidMultiplier", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.AdScheduleTarget_Def.__bases__:
                bases = list(ns0.AdScheduleTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.AdScheduleTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Address_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Address")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Address_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"streetAddress"), aname="_streetAddress", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"streetAddress2"), aname="_streetAddress2", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"cityName"), aname="_cityName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"provinceCode"), aname="_provinceCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"provinceName"), aname="_provinceName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"postalCode"), aname="_postalCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._streetAddress = None
                    self._streetAddress2 = None
                    self._cityName = None
                    self._provinceCode = None
                    self._provinceName = None
                    self._postalCode = None
                    self._countryCode = None
                    return
            Holder.__name__ = "Address_Holder"
            self.pyclass = Holder

    class AgeTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AgeTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AgeTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","AgeTarget.Age",lazy=False)(pname=(ns,"age"), aname="_age", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.DemographicTarget_Def not in ns0.AgeTarget_Def.__bases__:
                bases = list(ns0.AgeTarget_Def.__bases__)
                bases.insert(0, ns0.DemographicTarget_Def)
                ns0.AgeTarget_Def.__bases__ = tuple(bases)

            ns0.DemographicTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AuthenticationError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AuthenticationError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AuthenticationError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","AuthenticationError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AuthenticationError_Def.__bases__:
                bases = list(ns0.AuthenticationError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AuthenticationError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AuthorizationError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AuthorizationError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AuthorizationError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","AuthorizationError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AuthorizationError_Def.__bases__:
                bases = list(ns0.AuthorizationError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AuthorizationError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BiddingError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BiddingError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.BiddingError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","BiddingError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.BiddingError_Def.__bases__:
                bases = list(ns0.BiddingError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.BiddingError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CampaignError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CampaignError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CampaignError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","CampaignError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.CampaignError_Def.__bases__:
                bases = list(ns0.CampaignError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.CampaignError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CityTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CityTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CityTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"cityName"), aname="_cityName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"provinceCode"), aname="_provinceCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.GeoTarget_Def not in ns0.CityTarget_Def.__bases__:
                bases = list(ns0.CityTarget_Def.__bases__)
                bases.insert(0, ns0.GeoTarget_Def)
                ns0.CityTarget_Def.__bases__ = tuple(bases)

            ns0.GeoTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ClientTermsError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ClientTermsError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ClientTermsError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","ClientTermsError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.ClientTermsError_Def.__bases__:
                bases = list(ns0.ClientTermsError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.ClientTermsError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CountryTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CountryTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CountryTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.GeoTarget_Def not in ns0.CountryTarget_Def.__bases__:
                bases = list(ns0.CountryTarget_Def.__bases__)
                bases.insert(0, ns0.GeoTarget_Def)
                ns0.CountryTarget_Def.__bases__ = tuple(bases)

            ns0.GeoTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DistinctError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "DistinctError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DistinctError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","DistinctError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.DistinctError_Def.__bases__:
                bases = list(ns0.DistinctError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.DistinctError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class EntityNotFound_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "EntityNotFound")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.EntityNotFound_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","EntityNotFound.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.EntityNotFound_Def.__bases__:
                bases = list(ns0.EntityNotFound_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.EntityNotFound_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GenderTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "GenderTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.GenderTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","GenderTarget.Gender",lazy=False)(pname=(ns,"gender"), aname="_gender", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.DemographicTarget_Def not in ns0.GenderTarget_Def.__bases__:
                bases = list(ns0.GenderTarget_Def.__bases__)
                bases.insert(0, ns0.DemographicTarget_Def)
                ns0.GenderTarget_Def.__bases__ = tuple(bases)

            ns0.DemographicTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GeoPoint_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "GeoPoint")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GeoPoint_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"latitudeInMicroDegrees"), aname="_latitudeInMicroDegrees", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"longitudeInMicroDegrees"), aname="_longitudeInMicroDegrees", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._latitudeInMicroDegrees = None
                    self._longitudeInMicroDegrees = None
                    return
            Holder.__name__ = "GeoPoint_Holder"
            self.pyclass = Holder

    class InternalApiError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "InternalApiError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.InternalApiError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","InternalApiError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.InternalApiError_Def.__bases__:
                bases = list(ns0.InternalApiError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.InternalApiError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LanguageTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "LanguageTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.LanguageTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"languageCode"), aname="_languageCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.LanguageTarget_Def.__bases__:
                bases = list(ns0.LanguageTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.LanguageTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MetroTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "MetroTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MetroTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"metroCode"), aname="_metroCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.GeoTarget_Def not in ns0.MetroTarget_Def.__bases__:
                bases = list(ns0.MetroTarget_Def.__bases__)
                bases.insert(0, ns0.GeoTarget_Def)
                ns0.MetroTarget_Def.__bases__ = tuple(bases)

            ns0.GeoTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MobileCarrierTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "MobileCarrierTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MobileCarrierTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"carrierName"), aname="_carrierName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.MobileTarget_Def not in ns0.MobileCarrierTarget_Def.__bases__:
                bases = list(ns0.MobileCarrierTarget_Def.__bases__)
                bases.insert(0, ns0.MobileTarget_Def)
                ns0.MobileCarrierTarget_Def.__bases__ = tuple(bases)

            ns0.MobileTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MobilePlatformTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "MobilePlatformTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MobilePlatformTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"platformName"), aname="_platformName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.MobileTarget_Def not in ns0.MobilePlatformTarget_Def.__bases__:
                bases = list(ns0.MobilePlatformTarget_Def.__bases__)
                bases.insert(0, ns0.MobileTarget_Def)
                ns0.MobilePlatformTarget_Def.__bases__ = tuple(bases)

            ns0.MobileTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MobileTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "MobileTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MobileTarget_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.MobileTarget_Def.__bases__:
                bases = list(ns0.MobileTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.MobileTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NetworkTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NetworkTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NetworkTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","NetworkCoverageType",lazy=False)(pname=(ns,"networkCoverageType"), aname="_networkCoverageType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.NetworkTarget_Def.__bases__:
                bases = list(ns0.NetworkTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.NetworkTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NotEmptyError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NotEmptyError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NotEmptyError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","NotEmptyError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NotEmptyError_Def.__bases__:
                bases = list(ns0.NotEmptyError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NotEmptyError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NotWhitelistedError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NotWhitelistedError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NotWhitelistedError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","NotWhitelistedError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NotWhitelistedError_Def.__bases__:
                bases = list(ns0.NotWhitelistedError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NotWhitelistedError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NullError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NullError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NullError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","NullError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NullError_Def.__bases__:
                bases = list(ns0.NullError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NullError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class OperationAccessDenied_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "OperationAccessDenied")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.OperationAccessDenied_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","OperationAccessDenied.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.OperationAccessDenied_Def.__bases__:
                bases = list(ns0.OperationAccessDenied_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.OperationAccessDenied_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class OperatorError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "OperatorError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.OperatorError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","OperatorError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.OperatorError_Def.__bases__:
                bases = list(ns0.OperatorError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.OperatorError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PlatformTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "PlatformTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.PlatformTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","PlatformType",lazy=False)(pname=(ns,"platformType"), aname="_platformType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.PlatformTarget_Def.__bases__:
                bases = list(ns0.PlatformTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.PlatformTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PolygonTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "PolygonTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.PolygonTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","GeoPoint",lazy=False)(pname=(ns,"vertices"), aname="_vertices", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.GeoTarget_Def not in ns0.PolygonTarget_Def.__bases__:
                bases = list(ns0.PolygonTarget_Def.__bases__)
                bases.insert(0, ns0.GeoTarget_Def)
                ns0.PolygonTarget_Def.__bases__ = tuple(bases)

            ns0.GeoTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ProvinceTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ProvinceTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ProvinceTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"provinceCode"), aname="_provinceCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.GeoTarget_Def not in ns0.ProvinceTarget_Def.__bases__:
                bases = list(ns0.ProvinceTarget_Def.__bases__)
                bases.insert(0, ns0.GeoTarget_Def)
                ns0.ProvinceTarget_Def.__bases__ = tuple(bases)

            ns0.GeoTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ProximityTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ProximityTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ProximityTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","GeoPoint",lazy=False)(pname=(ns,"geoPoint"), aname="_geoPoint", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","ProximityTarget.DistanceUnits",lazy=False)(pname=(ns,"radiusDistanceUnits"), aname="_radiusDistanceUnits", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"radiusInUnits"), aname="_radiusInUnits", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201008","Address",lazy=False)(pname=(ns,"address"), aname="_address", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"allowServiceOfAddress"), aname="_allowServiceOfAddress", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.GeoTarget_Def not in ns0.ProximityTarget_Def.__bases__:
                bases = list(ns0.ProximityTarget_Def.__bases__)
                bases.insert(0, ns0.GeoTarget_Def)
                ns0.ProximityTarget_Def.__bases__ = tuple(bases)

            ns0.GeoTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class QuotaCheckError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "QuotaCheckError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.QuotaCheckError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","QuotaCheckError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.QuotaCheckError_Def.__bases__:
                bases = list(ns0.QuotaCheckError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.QuotaCheckError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class QuotaError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "QuotaError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.QuotaError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","QuotaError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"limit"), aname="_limit", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.QuotaError_Def.__bases__:
                bases = list(ns0.QuotaError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.QuotaError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RangeError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RangeError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RangeError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","RangeError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RangeError_Def.__bases__:
                bases = list(ns0.RangeError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RangeError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RateExceededError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RateExceededError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RateExceededError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","RateExceededError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"rateName"), aname="_rateName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"rateScope"), aname="_rateScope", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"retryAfterSeconds"), aname="_retryAfterSeconds", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RateExceededError_Def.__bases__:
                bases = list(ns0.RateExceededError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RateExceededError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RegionCodeError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RegionCodeError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RegionCodeError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","RegionCodeError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RegionCodeError_Def.__bases__:
                bases = list(ns0.RegionCodeError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RegionCodeError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RejectedError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RejectedError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RejectedError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","RejectedError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RejectedError_Def.__bases__:
                bases = list(ns0.RejectedError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RejectedError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RequestError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RequestError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RequestError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","RequestError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RequestError_Def.__bases__:
                bases = list(ns0.RequestError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RequestError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RequiredError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RequiredError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RequiredError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","RequiredError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RequiredError_Def.__bases__:
                bases = list(ns0.RequiredError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RequiredError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SizeLimitError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "SizeLimitError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.SizeLimitError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","SizeLimitError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.SizeLimitError_Def.__bases__:
                bases = list(ns0.SizeLimitError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.SizeLimitError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SoapHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "SoapHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SoapHeader_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"authToken"), aname="_authToken", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clientCustomerId"), aname="_clientCustomerId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clientEmail"), aname="_clientEmail", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"developerToken"), aname="_developerToken", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userAgent"), aname="_userAgent", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"validateOnly"), aname="_validateOnly", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"partialFailure"), aname="_partialFailure", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._authToken = None
                    self._clientCustomerId = None
                    self._clientEmail = None
                    self._developerToken = None
                    self._userAgent = None
                    self._validateOnly = None
                    self._partialFailure = None
                    return
            Holder.__name__ = "SoapHeader_Holder"
            self.pyclass = Holder

    class SoapResponseHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "SoapResponseHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SoapResponseHeader_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"requestId"), aname="_requestId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"operations"), aname="_operations", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"responseTime"), aname="_responseTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"units"), aname="_units", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requestId = None
                    self._operations = None
                    self._responseTime = None
                    self._units = None
                    return
            Holder.__name__ = "SoapResponseHeader_Holder"
            self.pyclass = Holder

    class StringLengthError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "StringLengthError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.StringLengthError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","StringLengthError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.StringLengthError_Def.__bases__:
                bases = list(ns0.StringLengthError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.StringLengthError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TargetError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "TargetError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.TargetError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","TargetError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.TargetError_Def.__bases__:
                bases = list(ns0.TargetError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.TargetError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CampaignTargetSelector_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CampaignTargetSelector")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CampaignTargetSelector_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"campaignIds"), aname="_campaignIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._campaignIds = []
                    return
            Holder.__name__ = "CampaignTargetSelector_Holder"
            self.pyclass = Holder

    class DatabaseError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "DatabaseError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DatabaseError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","DatabaseError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.DatabaseError_Def.__bases__:
                bases = list(ns0.DatabaseError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.DatabaseError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DemographicTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "DemographicTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DemographicTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"bidModifier"), aname="_bidModifier", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.DemographicTarget_Def.__bases__:
                bases = list(ns0.DemographicTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.DemographicTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GeoTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "GeoTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.GeoTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"excluded"), aname="_excluded", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.GeoTarget_Def.__bases__:
                bases = list(ns0.GeoTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.GeoTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Target_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Target")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Target_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Target.Type"), aname="_Target_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Target_Type = None
                    return
            Holder.__name__ = "Target_Holder"
            self.pyclass = Holder

    class AdScheduleTargetList_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AdScheduleTargetList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdScheduleTargetList_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","AdScheduleTarget",lazy=False)(pname=(ns,"targets"), aname="_targets", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.TargetList_Def not in ns0.AdScheduleTargetList_Def.__bases__:
                bases = list(ns0.AdScheduleTargetList_Def.__bases__)
                bases.insert(0, ns0.TargetList_Def)
                ns0.AdScheduleTargetList_Def.__bases__ = tuple(bases)

            ns0.TargetList_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ApiError_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ApiError")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ApiError_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"fieldPath"), aname="_fieldPath", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"trigger"), aname="_trigger", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"errorString"), aname="_errorString", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ApiError.Type"), aname="_ApiError_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fieldPath = None
                    self._trigger = None
                    self._errorString = None
                    self._ApiError_Type = None
                    return
            Holder.__name__ = "ApiError_Holder"
            self.pyclass = Holder

    class ApiException_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ApiException")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ApiException_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","ApiError",lazy=False)(pname=(ns,"errors"), aname="_errors", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApplicationException_Def not in ns0.ApiException_Def.__bases__:
                bases = list(ns0.ApiException_Def.__bases__)
                bases.insert(0, ns0.ApplicationException_Def)
                ns0.ApiException_Def.__bases__ = tuple(bases)

            ns0.ApplicationException_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ApplicationException_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ApplicationException")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ApplicationException_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ApplicationException.Type"), aname="_ApplicationException_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    self._ApplicationException_Type = None
                    return
            Holder.__name__ = "ApplicationException_Holder"
            self.pyclass = Holder

    class DemographicTargetList_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "DemographicTargetList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DemographicTargetList_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","DemographicTarget",lazy=False)(pname=(ns,"targets"), aname="_targets", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.TargetList_Def not in ns0.DemographicTargetList_Def.__bases__:
                bases = list(ns0.DemographicTargetList_Def.__bases__)
                bases.insert(0, ns0.TargetList_Def)
                ns0.DemographicTargetList_Def.__bases__ = tuple(bases)

            ns0.TargetList_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GeoTargetList_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "GeoTargetList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.GeoTargetList_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","GeoTarget",lazy=False)(pname=(ns,"targets"), aname="_targets", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.TargetList_Def not in ns0.GeoTargetList_Def.__bases__:
                bases = list(ns0.GeoTargetList_Def.__bases__)
                bases.insert(0, ns0.TargetList_Def)
                ns0.GeoTargetList_Def.__bases__ = tuple(bases)

            ns0.TargetList_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LanguageTargetList_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "LanguageTargetList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.LanguageTargetList_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","LanguageTarget",lazy=False)(pname=(ns,"targets"), aname="_targets", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.TargetList_Def not in ns0.LanguageTargetList_Def.__bases__:
                bases = list(ns0.LanguageTargetList_Def.__bases__)
                bases.insert(0, ns0.TargetList_Def)
                ns0.LanguageTargetList_Def.__bases__ = tuple(bases)

            ns0.TargetList_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MobileTargetList_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "MobileTargetList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MobileTargetList_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","MobileTarget",lazy=False)(pname=(ns,"targets"), aname="_targets", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.TargetList_Def not in ns0.MobileTargetList_Def.__bases__:
                bases = list(ns0.MobileTargetList_Def.__bases__)
                bases.insert(0, ns0.TargetList_Def)
                ns0.MobileTargetList_Def.__bases__ = tuple(bases)

            ns0.TargetList_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NetworkTargetList_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NetworkTargetList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NetworkTargetList_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","NetworkTarget",lazy=False)(pname=(ns,"targets"), aname="_targets", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.TargetList_Def not in ns0.NetworkTargetList_Def.__bases__:
                bases = list(ns0.NetworkTargetList_Def.__bases__)
                bases.insert(0, ns0.TargetList_Def)
                ns0.NetworkTargetList_Def.__bases__ = tuple(bases)

            ns0.TargetList_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PlatformTargetList_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "PlatformTargetList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.PlatformTargetList_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","PlatformTarget",lazy=False)(pname=(ns,"targets"), aname="_targets", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.TargetList_Def not in ns0.PlatformTargetList_Def.__bases__:
                bases = list(ns0.PlatformTargetList_Def.__bases__)
                bases.insert(0, ns0.TargetList_Def)
                ns0.PlatformTargetList_Def.__bases__ = tuple(bases)

            ns0.TargetList_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TargetList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "TargetList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.TargetList_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"campaignId"), aname="_campaignId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"TargetList.Type"), aname="_TargetList_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._campaignId = None
                    self._TargetList_Type = None
                    return
            Holder.__name__ = "TargetList_Holder"
            self.pyclass = Holder

    class CampaignTargetOperation_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CampaignTargetOperation")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CampaignTargetOperation_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","TargetList",lazy=False)(pname=(ns,"operand"), aname="_operand", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Operation_Def not in ns0.CampaignTargetOperation_Def.__bases__:
                bases = list(ns0.CampaignTargetOperation_Def.__bases__)
                bases.insert(0, ns0.Operation_Def)
                ns0.CampaignTargetOperation_Def.__bases__ = tuple(bases)

            ns0.Operation_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CampaignTargetPage_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CampaignTargetPage")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CampaignTargetPage_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","TargetList",lazy=False)(pname=(ns,"entries"), aname="_entries", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Page_Def not in ns0.CampaignTargetPage_Def.__bases__:
                bases = list(ns0.CampaignTargetPage_Def.__bases__)
                bases.insert(0, ns0.Page_Def)
                ns0.CampaignTargetPage_Def.__bases__ = tuple(bases)

            ns0.Page_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CampaignTargetReturnValue_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CampaignTargetReturnValue")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CampaignTargetReturnValue_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","TargetList",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ListReturnValue_Def not in ns0.CampaignTargetReturnValue_Def.__bases__:
                bases = list(ns0.CampaignTargetReturnValue_Def.__bases__)
                bases.insert(0, ns0.ListReturnValue_Def)
                ns0.CampaignTargetReturnValue_Def.__bases__ = tuple(bases)

            ns0.ListReturnValue_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ListReturnValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ListReturnValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ListReturnValue_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"ListReturnValue.Type"), aname="_ListReturnValue_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ListReturnValue_Type = None
                    return
            Holder.__name__ = "ListReturnValue_Holder"
            self.pyclass = Holder

    class Operation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Operation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Operation_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","Operator",lazy=False)(pname=(ns,"operator"), aname="_operator", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Operation.Type"), aname="_Operation_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._operator = None
                    self._Operation_Type = None
                    return
            Holder.__name__ = "Operation_Holder"
            self.pyclass = Holder

    class Page_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Page")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Page_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"totalNumEntries"), aname="_totalNumEntries", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Page.Type"), aname="_Page_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._totalNumEntries = None
                    self._Page_Type = None
                    return
            Holder.__name__ = "Page_Holder"
            self.pyclass = Holder

    class AgeTarget_Age_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AgeTarget.Age")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AuthenticationError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AuthenticationError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AuthorizationError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "AuthorizationError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class BiddingError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "BiddingError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CampaignError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "CampaignError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ClientTermsError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ClientTermsError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DatabaseError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "DatabaseError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DayOfWeek_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "DayOfWeek")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DistinctError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "DistinctError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class EntityNotFound_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "EntityNotFound.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GenderTarget_Gender_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "GenderTarget.Gender")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class InternalApiError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "InternalApiError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MinuteOfHour_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "MinuteOfHour")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NetworkCoverageType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NetworkCoverageType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NotEmptyError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NotEmptyError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NotWhitelistedError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NotWhitelistedError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NullError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "NullError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class OperationAccessDenied_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "OperationAccessDenied.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Operator_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "Operator")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class OperatorError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "OperatorError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PlatformType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "PlatformType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ProximityTarget_DistanceUnits_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "ProximityTarget.DistanceUnits")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class QuotaCheckError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "QuotaCheckError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class QuotaError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "QuotaError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RangeError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RangeError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RateExceededError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RateExceededError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RegionCodeError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RegionCodeError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RejectedError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RejectedError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RequestError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RequestError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RequiredError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "RequiredError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SizeLimitError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "SizeLimitError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class StringLengthError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "StringLengthError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class TargetError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        type = (schema, "TargetError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class getCampaignTarget_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCampaignTarget"
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        def __init__(self, **kw):
            ns = ns0.getCampaignTarget_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","CampaignTargetSelector",lazy=False)(pname=(ns,"selector"), aname="_selector", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201008","get")
            kw["aname"] = "_get"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._selector = None
                    return
            Holder.__name__ = "get_Holder"
            self.pyclass = Holder

    class getCampaignTargetResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCampaignTargetResponse"
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        def __init__(self, **kw):
            ns = ns0.getCampaignTargetResponse_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","CampaignTargetPage",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201008","getResponse")
            kw["aname"] = "_getResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = None
                    return
            Holder.__name__ = "getCampaignTargetResponse_Holder"
            self.pyclass = Holder

    class ApiExceptionFault_Dec(ElementDeclaration):
        literal = "ApiExceptionFault"
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201008","ApiExceptionFault")
            kw["aname"] = "_ApiExceptionFault"
            if ns0.ApiException_Def not in ns0.ApiExceptionFault_Dec.__bases__:
                bases = list(ns0.ApiExceptionFault_Dec.__bases__)
                bases.insert(0, ns0.ApiException_Def)
                ns0.ApiExceptionFault_Dec.__bases__ = tuple(bases)

            ns0.ApiException_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ApiExceptionFault_Dec_Holder"

    class mutateCampaignTarget_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "mutateCampaignTarget"
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        def __init__(self, **kw):
            ns = ns0.mutateCampaignTarget_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","CampaignTargetOperation",lazy=False)(pname=(ns,"operations"), aname="_operations", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201008","mutate")
            kw["aname"] = "_mutate"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._operations = []
                    return
            Holder.__name__ = "mutate_Holder"
            self.pyclass = Holder

    class mutateCampaignTargetResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "mutateCampaignTargetResponse"
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        def __init__(self, **kw):
            ns = ns0.mutateCampaignTargetResponse_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201008","CampaignTargetReturnValue",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201008","mutateResponse")
            kw["aname"] = "_mutateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = None
                    return
            Holder.__name__ = "mutateCampaignTargetResponse_Holder"
            self.pyclass = Holder

    class RequestHeader_Dec(ElementDeclaration):
        literal = "RequestHeader"
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201008","RequestHeader")
            kw["aname"] = "_RequestHeader"
            if ns0.SoapHeader_Def not in ns0.RequestHeader_Dec.__bases__:
                bases = list(ns0.RequestHeader_Dec.__bases__)
                bases.insert(0, ns0.SoapHeader_Def)
                ns0.RequestHeader_Dec.__bases__ = tuple(bases)

            ns0.SoapHeader_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "RequestHeader_Dec_Holder"

    class ResponseHeader_Dec(ElementDeclaration):
        literal = "ResponseHeader"
        schema = "https://adwords.google.com/api/adwords/cm/v201008"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201008","ResponseHeader")
            kw["aname"] = "_ResponseHeader"
            if ns0.SoapResponseHeader_Def not in ns0.ResponseHeader_Dec.__bases__:
                bases = list(ns0.ResponseHeader_Dec.__bases__)
                bases.insert(0, ns0.SoapResponseHeader_Def)
                ns0.ResponseHeader_Dec.__bases__ = tuple(bases)

            ns0.SoapResponseHeader_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ResponseHeader_Dec_Holder"

# end class ns0 (tns: https://adwords.google.com/api/adwords/cm/v201008)
