################################################## 
# ReportService_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# https://adwords.google.com/api/adwords/v13
##############################

class ns0:
    targetNamespace = "https://adwords.google.com/api/adwords/v13"

    class AdGroupStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "AdGroupStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdWordsType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "AdWordsType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ApiError_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "ApiError")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ApiError_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"code"), aname="_code", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"detail"), aname="_detail", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"field"), aname="_field", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"index"), aname="_index", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"isExemptable"), aname="_isExemptable", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"textIndex"), aname="_textIndex", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"textLength"), aname="_textLength", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"trigger"), aname="_trigger", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._code = None
                    self._detail = None
                    self._field = None
                    self._index = None
                    self._isExemptable = None
                    self._textIndex = None
                    self._textLength = None
                    self._trigger = None
                    return
            Holder.__name__ = "ApiError_Holder"
            self.pyclass = Holder

    class ApiException_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "ApiException")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ApiException_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"code"), aname="_code", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/v13","ApiError",lazy=False)(pname=(ns,"errors"), aname="_errors", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"internal"), aname="_internal", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"trigger"), aname="_trigger", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._code = None
                    self._errors = []
                    self._internal = None
                    self._message = None
                    self._trigger = None
                    return
            Holder.__name__ = "ApiException_Holder"
            self.pyclass = Holder

    class CampaignStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "CampaignStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DefinedReportJob_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "DefinedReportJob")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DefinedReportJob_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/v13","AdGroupStatus",lazy=False)(pname=(ns,"adGroupStatuses"), aname="_adGroupStatuses", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"adGroups"), aname="_adGroups", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/v13","AdWordsType",lazy=False)(pname=(ns,"adWordsType"), aname="_adWordsType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"aggregationTypes"), aname="_aggregationTypes", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/v13","CampaignStatus",lazy=False)(pname=(ns,"campaignStatuses"), aname="_campaignStatuses", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"campaigns"), aname="_campaigns", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"includeZeroImpression"), aname="_includeZeroImpression", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/v13","KeywordStatus",lazy=False)(pname=(ns,"keywordStatuses"), aname="_keywordStatuses", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/v13","KeywordType",lazy=False)(pname=(ns,"keywordType"), aname="_keywordType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"keywords"), aname="_keywords", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"selectedColumns"), aname="_selectedColumns", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"selectedReportType"), aname="_selectedReportType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ReportJob_Def not in ns0.DefinedReportJob_Def.__bases__:
                bases = list(ns0.DefinedReportJob_Def.__bases__)
                bases.insert(0, ns0.ReportJob_Def)
                ns0.DefinedReportJob_Def.__bases__ = tuple(bases)

            ns0.ReportJob_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class KeywordStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "KeywordStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class KeywordType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "KeywordType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ReportJob_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "ReportJob")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ReportJob_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"clientEmails"), aname="_clientEmails", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"crossClient"), aname="_crossClient", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"endDay"), aname="_endDay", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"startDay"), aname="_startDay", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/v13","ReportJobStatus",lazy=False)(pname=(ns,"status"), aname="_status", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._clientEmails = []
                    self._crossClient = None
                    self._endDay = None
                    self._id = None
                    self._name = None
                    self._startDay = None
                    self._status = None
                    return
            Holder.__name__ = "ReportJob_Holder"
            self.pyclass = Holder

    class ReportJobStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "ReportJobStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class applicationToken_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "applicationToken"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","applicationToken")
            kw["aname"] = "_applicationToken"
            ZSI.TC.String.__init__(self, **kw)

    class clientCustomerId_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "clientCustomerId"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","clientCustomerId")
            kw["aname"] = "_clientCustomerId"
            ZSI.TC.String.__init__(self, **kw)

    class clientEmail_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "clientEmail"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","clientEmail")
            kw["aname"] = "_clientEmail"
            ZSI.TC.String.__init__(self, **kw)

    class deleteReport_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteReport"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.deleteReport_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"reportJobId"), aname="_reportJobId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","deleteReport")
            kw["aname"] = "_deleteReport"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._reportJobId = None
                    return
            Holder.__name__ = "deleteReport_Holder"
            self.pyclass = Holder

    class deleteReportResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteReportResponse"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.deleteReportResponse_Dec.schema
            TClist = []
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","deleteReportResponse")
            kw["aname"] = "_deleteReportResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "deleteReportResponse_Holder"
            self.pyclass = Holder

    class developerToken_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "developerToken"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","developerToken")
            kw["aname"] = "_developerToken"
            ZSI.TC.String.__init__(self, **kw)

    class email_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "email"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","email")
            kw["aname"] = "_email"
            ZSI.TC.String.__init__(self, **kw)

    class fault_Dec(ElementDeclaration):
        literal = "fault"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","fault")
            kw["aname"] = "_fault"
            if ns0.ApiException_Def not in ns0.fault_Dec.__bases__:
                bases = list(ns0.fault_Dec.__bases__)
                bases.insert(0, ns0.ApiException_Def)
                ns0.fault_Dec.__bases__ = tuple(bases)

            ns0.ApiException_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "fault_Dec_Holder"

    class getAllJobs_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAllJobs"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.getAllJobs_Dec.schema
            TClist = []
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","getAllJobs")
            kw["aname"] = "_getAllJobs"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getAllJobs_Holder"
            self.pyclass = Holder

    class getAllJobsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAllJobsResponse"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.getAllJobsResponse_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/v13","ReportJob",lazy=False)(pname=(ns,"getAllJobsReturn"), aname="_getAllJobsReturn", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","getAllJobsResponse")
            kw["aname"] = "_getAllJobsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getAllJobsReturn = []
                    return
            Holder.__name__ = "getAllJobsResponse_Holder"
            self.pyclass = Holder

    class getGzipReportDownloadUrl_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getGzipReportDownloadUrl"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.getGzipReportDownloadUrl_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"reportJobId"), aname="_reportJobId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","getGzipReportDownloadUrl")
            kw["aname"] = "_getGzipReportDownloadUrl"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._reportJobId = None
                    return
            Holder.__name__ = "getGzipReportDownloadUrl_Holder"
            self.pyclass = Holder

    class getGzipReportDownloadUrlResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getGzipReportDownloadUrlResponse"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.getGzipReportDownloadUrlResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"getGzipReportDownloadUrlReturn"), aname="_getGzipReportDownloadUrlReturn", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","getGzipReportDownloadUrlResponse")
            kw["aname"] = "_getGzipReportDownloadUrlResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getGzipReportDownloadUrlReturn = None
                    return
            Holder.__name__ = "getGzipReportDownloadUrlResponse_Holder"
            self.pyclass = Holder

    class getReportDownloadUrl_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getReportDownloadUrl"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.getReportDownloadUrl_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"reportJobId"), aname="_reportJobId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","getReportDownloadUrl")
            kw["aname"] = "_getReportDownloadUrl"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._reportJobId = None
                    return
            Holder.__name__ = "getReportDownloadUrl_Holder"
            self.pyclass = Holder

    class getReportDownloadUrlResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getReportDownloadUrlResponse"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.getReportDownloadUrlResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"getReportDownloadUrlReturn"), aname="_getReportDownloadUrlReturn", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","getReportDownloadUrlResponse")
            kw["aname"] = "_getReportDownloadUrlResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getReportDownloadUrlReturn = None
                    return
            Holder.__name__ = "getReportDownloadUrlResponse_Holder"
            self.pyclass = Holder

    class getReportJobStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getReportJobStatus"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.getReportJobStatus_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"reportJobId"), aname="_reportJobId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","getReportJobStatus")
            kw["aname"] = "_getReportJobStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._reportJobId = None
                    return
            Holder.__name__ = "getReportJobStatus_Holder"
            self.pyclass = Holder

    class getReportJobStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getReportJobStatusResponse"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.getReportJobStatusResponse_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/v13","ReportJobStatus",lazy=False)(pname=(ns,"getReportJobStatusReturn"), aname="_getReportJobStatusReturn", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","getReportJobStatusResponse")
            kw["aname"] = "_getReportJobStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getReportJobStatusReturn = None
                    return
            Holder.__name__ = "getReportJobStatusResponse_Holder"
            self.pyclass = Holder

    class operations_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "operations"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","operations")
            kw["aname"] = "_operations"
            ZSI.TC.String.__init__(self, **kw)

    class password_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "password"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","password")
            kw["aname"] = "_password"
            ZSI.TC.String.__init__(self, **kw)

    class requestId_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "requestId"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","requestId")
            kw["aname"] = "_requestId"
            ZSI.TC.String.__init__(self, **kw)

    class responseTime_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "responseTime"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","responseTime")
            kw["aname"] = "_responseTime"
            ZSI.TC.String.__init__(self, **kw)

    class scheduleReportJob_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "scheduleReportJob"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.scheduleReportJob_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/v13","ReportJob",lazy=False)(pname=(ns,"job"), aname="_job", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","scheduleReportJob")
            kw["aname"] = "_scheduleReportJob"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._job = None
                    return
            Holder.__name__ = "scheduleReportJob_Holder"
            self.pyclass = Holder

    class scheduleReportJobResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "scheduleReportJobResponse"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.scheduleReportJobResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"scheduleReportJobReturn"), aname="_scheduleReportJobReturn", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","scheduleReportJobResponse")
            kw["aname"] = "_scheduleReportJobResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._scheduleReportJobReturn = None
                    return
            Holder.__name__ = "scheduleReportJobResponse_Holder"
            self.pyclass = Holder

    class units_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "units"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","units")
            kw["aname"] = "_units"
            ZSI.TC.String.__init__(self, **kw)

    class useragent_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "useragent"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","useragent")
            kw["aname"] = "_useragent"
            ZSI.TC.String.__init__(self, **kw)

    class validateReportJob_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "validateReportJob"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.validateReportJob_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/v13","ReportJob",lazy=False)(pname=(ns,"job"), aname="_job", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","validateReportJob")
            kw["aname"] = "_validateReportJob"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._job = None
                    return
            Holder.__name__ = "validateReportJob_Holder"
            self.pyclass = Holder

    class validateReportJobResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "validateReportJobResponse"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.validateReportJobResponse_Dec.schema
            TClist = []
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","validateReportJobResponse")
            kw["aname"] = "_validateReportJobResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "validateReportJobResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: https://adwords.google.com/api/adwords/v13)
