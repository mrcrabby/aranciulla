################################################## 
# GeoLocationService_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# https://adwords.google.com/api/adwords/cm/v200909
##############################

class ns0:
    targetNamespace = "https://adwords.google.com/api/adwords/cm/v200909"

    class Address_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "Address")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Address_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"streetAddress"), aname="_streetAddress", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"streetAddress2"), aname="_streetAddress2", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"cityName"), aname="_cityName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"provinceCode"), aname="_provinceCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"provinceName"), aname="_provinceName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"postalCode"), aname="_postalCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._streetAddress = None
                    self._streetAddress2 = None
                    self._cityName = None
                    self._provinceCode = None
                    self._provinceName = None
                    self._postalCode = None
                    self._countryCode = None
                    return
            Holder.__name__ = "Address_Holder"
            self.pyclass = Holder

    class AuthenticationError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "AuthenticationError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AuthenticationError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v200909","AuthenticationError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AuthenticationError_Def.__bases__:
                bases = list(ns0.AuthenticationError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AuthenticationError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AuthorizationError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "AuthorizationError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AuthorizationError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v200909","AuthorizationError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AuthorizationError_Def.__bases__:
                bases = list(ns0.AuthorizationError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AuthorizationError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ClientTermsError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "ClientTermsError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ClientTermsError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v200909","ClientTermsError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.ClientTermsError_Def.__bases__:
                bases = list(ns0.ClientTermsError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.ClientTermsError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GeoLocationError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "GeoLocationError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.GeoLocationError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v200909","GeoLocationError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.GeoLocationError_Def.__bases__:
                bases = list(ns0.GeoLocationError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.GeoLocationError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GeoLocationSelector_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "GeoLocationSelector")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GeoLocationSelector_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v200909","Address",lazy=False)(pname=(ns,"addresses"), aname="_addresses", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._addresses = []
                    return
            Holder.__name__ = "GeoLocationSelector_Holder"
            self.pyclass = Holder

    class GeoPoint_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "GeoPoint")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GeoPoint_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"latitudeInMicroDegrees"), aname="_latitudeInMicroDegrees", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"longitudeInMicroDegrees"), aname="_longitudeInMicroDegrees", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._latitudeInMicroDegrees = None
                    self._longitudeInMicroDegrees = None
                    return
            Holder.__name__ = "GeoPoint_Holder"
            self.pyclass = Holder

    class InternalApiError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "InternalApiError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.InternalApiError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v200909","InternalApiError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.InternalApiError_Def.__bases__:
                bases = list(ns0.InternalApiError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.InternalApiError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class InvalidGeoLocation_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "InvalidGeoLocation")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.InvalidGeoLocation_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.GeoLocation_Def not in ns0.InvalidGeoLocation_Def.__bases__:
                bases = list(ns0.InvalidGeoLocation_Def.__bases__)
                bases.insert(0, ns0.GeoLocation_Def)
                ns0.InvalidGeoLocation_Def.__bases__ = tuple(bases)

            ns0.GeoLocation_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NotEmptyError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "NotEmptyError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NotEmptyError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v200909","NotEmptyError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NotEmptyError_Def.__bases__:
                bases = list(ns0.NotEmptyError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NotEmptyError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NotWhitelistedError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "NotWhitelistedError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NotWhitelistedError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v200909","NotWhitelistedError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NotWhitelistedError_Def.__bases__:
                bases = list(ns0.NotWhitelistedError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NotWhitelistedError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NullError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "NullError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NullError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v200909","NullError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NullError_Def.__bases__:
                bases = list(ns0.NullError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NullError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class QuotaCheckError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "QuotaCheckError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.QuotaCheckError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v200909","QuotaCheckError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.QuotaCheckError_Def.__bases__:
                bases = list(ns0.QuotaCheckError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.QuotaCheckError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class QuotaExceededError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "QuotaExceededError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.QuotaExceededError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v200909","QuotaExceededError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.QuotaExceededError_Def.__bases__:
                bases = list(ns0.QuotaExceededError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.QuotaExceededError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RangeError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "RangeError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RangeError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v200909","RangeError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RangeError_Def.__bases__:
                bases = list(ns0.RangeError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RangeError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RegionCodeError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "RegionCodeError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RegionCodeError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v200909","RegionCodeError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RegionCodeError_Def.__bases__:
                bases = list(ns0.RegionCodeError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RegionCodeError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RequiredError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "RequiredError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RequiredError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v200909","RequiredError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RequiredError_Def.__bases__:
                bases = list(ns0.RequiredError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RequiredError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SizeLimitError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "SizeLimitError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.SizeLimitError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v200909","SizeLimitError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.SizeLimitError_Def.__bases__:
                bases = list(ns0.SizeLimitError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.SizeLimitError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SoapHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "SoapHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SoapHeader_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"applicationToken"), aname="_applicationToken", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"authToken"), aname="_authToken", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clientCustomerId"), aname="_clientCustomerId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clientEmail"), aname="_clientEmail", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"developerToken"), aname="_developerToken", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userAgent"), aname="_userAgent", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"validateOnly"), aname="_validateOnly", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._applicationToken = None
                    self._authToken = None
                    self._clientCustomerId = None
                    self._clientEmail = None
                    self._developerToken = None
                    self._userAgent = None
                    self._validateOnly = None
                    return
            Holder.__name__ = "SoapHeader_Holder"
            self.pyclass = Holder

    class SoapResponseHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "SoapResponseHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SoapResponseHeader_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"requestId"), aname="_requestId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"operations"), aname="_operations", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"responseTime"), aname="_responseTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"units"), aname="_units", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requestId = None
                    self._operations = None
                    self._responseTime = None
                    self._units = None
                    return
            Holder.__name__ = "SoapResponseHeader_Holder"
            self.pyclass = Holder

    class StringLengthError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "StringLengthError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.StringLengthError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v200909","StringLengthError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.StringLengthError_Def.__bases__:
                bases = list(ns0.StringLengthError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.StringLengthError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GeoLocation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "GeoLocation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GeoLocation_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v200909","GeoPoint",lazy=False)(pname=(ns,"geoPoint"), aname="_geoPoint", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v200909","Address",lazy=False)(pname=(ns,"address"), aname="_address", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64String(pname=(ns,"encodedLocation"), aname="_encodedLocation", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"GeoLocation.Type"), aname="_GeoLocation_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._geoPoint = None
                    self._address = None
                    self._encodedLocation = None
                    self._GeoLocation_Type = None
                    return
            Holder.__name__ = "GeoLocation_Holder"
            self.pyclass = Holder

    class ApiError_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "ApiError")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ApiError_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"fieldPath"), aname="_fieldPath", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"trigger"), aname="_trigger", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ApiError.Type"), aname="_ApiError_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fieldPath = None
                    self._trigger = None
                    self._ApiError_Type = None
                    return
            Holder.__name__ = "ApiError_Holder"
            self.pyclass = Holder

    class ApiException_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "ApiException")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ApiException_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v200909","ApiError",lazy=False)(pname=(ns,"errors"), aname="_errors", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApplicationException_Def not in ns0.ApiException_Def.__bases__:
                bases = list(ns0.ApiException_Def.__bases__)
                bases.insert(0, ns0.ApplicationException_Def)
                ns0.ApiException_Def.__bases__ = tuple(bases)

            ns0.ApplicationException_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ApplicationException_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "ApplicationException")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ApplicationException_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ApplicationException.Type"), aname="_ApplicationException_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    self._ApplicationException_Type = None
                    return
            Holder.__name__ = "ApplicationException_Holder"
            self.pyclass = Holder

    class AuthenticationError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "AuthenticationError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AuthorizationError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "AuthorizationError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ClientTermsError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "ClientTermsError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GeoLocationError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "GeoLocationError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class InternalApiError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "InternalApiError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NotEmptyError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "NotEmptyError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NotWhitelistedError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "NotWhitelistedError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NullError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "NullError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class QuotaCheckError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "QuotaCheckError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class QuotaExceededError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "QuotaExceededError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RangeError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "RangeError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RegionCodeError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "RegionCodeError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RequiredError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "RequiredError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SizeLimitError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "SizeLimitError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class StringLengthError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        type = (schema, "StringLengthError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class getGeoLocation_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getGeoLocation"
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        def __init__(self, **kw):
            ns = ns0.getGeoLocation_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v200909","GeoLocationSelector",lazy=False)(pname=(ns,"selector"), aname="_selector", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v200909","get")
            kw["aname"] = "_get"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._selector = None
                    return
            Holder.__name__ = "get_Holder"
            self.pyclass = Holder

    class getGeoLocationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getGeoLocationResponse"
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        def __init__(self, **kw):
            ns = ns0.getGeoLocationResponse_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v200909","GeoLocation",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v200909","getResponse")
            kw["aname"] = "_getResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = []
                    return
            Holder.__name__ = "getGeoLocationResponse_Holder"
            self.pyclass = Holder

    class ApiExceptionFault_Dec(ElementDeclaration):
        literal = "ApiExceptionFault"
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v200909","ApiExceptionFault")
            kw["aname"] = "_ApiExceptionFault"
            if ns0.ApiException_Def not in ns0.ApiExceptionFault_Dec.__bases__:
                bases = list(ns0.ApiExceptionFault_Dec.__bases__)
                bases.insert(0, ns0.ApiException_Def)
                ns0.ApiExceptionFault_Dec.__bases__ = tuple(bases)

            ns0.ApiException_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ApiExceptionFault_Dec_Holder"

    class RequestHeader_Dec(ElementDeclaration):
        literal = "RequestHeader"
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v200909","RequestHeader")
            kw["aname"] = "_RequestHeader"
            if ns0.SoapHeader_Def not in ns0.RequestHeader_Dec.__bases__:
                bases = list(ns0.RequestHeader_Dec.__bases__)
                bases.insert(0, ns0.SoapHeader_Def)
                ns0.RequestHeader_Dec.__bases__ = tuple(bases)

            ns0.SoapHeader_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "RequestHeader_Dec_Holder"

    class ResponseHeader_Dec(ElementDeclaration):
        literal = "ResponseHeader"
        schema = "https://adwords.google.com/api/adwords/cm/v200909"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v200909","ResponseHeader")
            kw["aname"] = "_ResponseHeader"
            if ns0.SoapResponseHeader_Def not in ns0.ResponseHeader_Dec.__bases__:
                bases = list(ns0.ResponseHeader_Dec.__bases__)
                bases.insert(0, ns0.SoapResponseHeader_Def)
                ns0.ResponseHeader_Dec.__bases__ = tuple(bases)

            ns0.SoapResponseHeader_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ResponseHeader_Dec_Holder"

# end class ns0 (tns: https://adwords.google.com/api/adwords/cm/v200909)
