################################################## 
# AccountService_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# https://adwords.google.com/api/adwords/v13
##############################

class ns0:
    targetNamespace = "https://adwords.google.com/api/adwords/v13"

    class AccountInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "AccountInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AccountInfo_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/v13","Address",lazy=False)(pname=(ns,"billingAddress"), aname="_billingAddress", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"currencyCode"), aname="_currencyCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"customerId"), aname="_customerId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/v13","NetworkTarget",lazy=False)(pname=(ns,"defaultNetworkTargeting"), aname="_defaultNetworkTargeting", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"descriptiveName"), aname="_descriptiveName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/v13","EmailPromotionsPreferences",lazy=False)(pname=(ns,"emailPromotionsPreferences"), aname="_emailPromotionsPreferences", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"languagePreference"), aname="_languagePreference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/v13","Address",lazy=False)(pname=(ns,"primaryAddress"), aname="_primaryAddress", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"primaryBusinessCategory"), aname="_primaryBusinessCategory", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"timeZoneEffectiveDate"), aname="_timeZoneEffectiveDate", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"timeZoneId"), aname="_timeZoneId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._billingAddress = None
                    self._currencyCode = None
                    self._customerId = None
                    self._defaultNetworkTargeting = None
                    self._descriptiveName = None
                    self._emailPromotionsPreferences = None
                    self._languagePreference = None
                    self._primaryAddress = None
                    self._primaryBusinessCategory = None
                    self._timeZoneEffectiveDate = None
                    self._timeZoneId = None
                    return
            Holder.__name__ = "AccountInfo_Holder"
            self.pyclass = Holder

    class Address_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "Address")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Address_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"addressLine1"), aname="_addressLine1", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"addressLine2"), aname="_addressLine2", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"city"), aname="_city", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"companyName"), aname="_companyName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"emailAddress"), aname="_emailAddress", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"faxNumber"), aname="_faxNumber", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"phoneNumber"), aname="_phoneNumber", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"postalCode"), aname="_postalCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"state"), aname="_state", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._addressLine1 = None
                    self._addressLine2 = None
                    self._city = None
                    self._companyName = None
                    self._countryCode = None
                    self._emailAddress = None
                    self._faxNumber = None
                    self._name = None
                    self._phoneNumber = None
                    self._postalCode = None
                    self._state = None
                    return
            Holder.__name__ = "Address_Holder"
            self.pyclass = Holder

    class ApiError_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "ApiError")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ApiError_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"code"), aname="_code", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"detail"), aname="_detail", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"field"), aname="_field", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"index"), aname="_index", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"isExemptable"), aname="_isExemptable", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"textIndex"), aname="_textIndex", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"textLength"), aname="_textLength", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"trigger"), aname="_trigger", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._code = None
                    self._detail = None
                    self._field = None
                    self._index = None
                    self._isExemptable = None
                    self._textIndex = None
                    self._textLength = None
                    self._trigger = None
                    return
            Holder.__name__ = "ApiError_Holder"
            self.pyclass = Holder

    class ApiException_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "ApiException")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ApiException_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"code"), aname="_code", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/v13","ApiError",lazy=False)(pname=(ns,"errors"), aname="_errors", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"internal"), aname="_internal", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"trigger"), aname="_trigger", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._code = None
                    self._errors = []
                    self._internal = None
                    self._message = None
                    self._trigger = None
                    return
            Holder.__name__ = "ApiException_Holder"
            self.pyclass = Holder

    class ClientAccountInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "ClientAccountInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ClientAccountInfo_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"emailAddress"), aname="_emailAddress", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"isCustomerManager"), aname="_isCustomerManager", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._emailAddress = None
                    self._isCustomerManager = None
                    return
            Holder.__name__ = "ClientAccountInfo_Holder"
            self.pyclass = Holder

    class EmailPromotionsPreferences_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "EmailPromotionsPreferences")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.EmailPromotionsPreferences_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"accountPerformanceEnabled"), aname="_accountPerformanceEnabled", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"disapprovedAdsEnabled"), aname="_disapprovedAdsEnabled", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"marketResearchEnabled"), aname="_marketResearchEnabled", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"newsletterEnabled"), aname="_newsletterEnabled", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"promotionsEnabled"), aname="_promotionsEnabled", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._accountPerformanceEnabled = None
                    self._disapprovedAdsEnabled = None
                    self._marketResearchEnabled = None
                    self._newsletterEnabled = None
                    self._promotionsEnabled = None
                    return
            Holder.__name__ = "EmailPromotionsPreferences_Holder"
            self.pyclass = Holder

    class MccAlert_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "MccAlert")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.MccAlert_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"clientCompanyName"), aname="_clientCompanyName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clientCustomerId"), aname="_clientCustomerId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clientLogin"), aname="_clientLogin", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clientName"), aname="_clientName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/v13","MccAlertPriority",lazy=False)(pname=(ns,"priority"), aname="_priority", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"triggerTime"), aname="_triggerTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/v13","MccAlertType",lazy=False)(pname=(ns,"type"), aname="_type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._clientCompanyName = None
                    self._clientCustomerId = None
                    self._clientLogin = None
                    self._clientName = None
                    self._priority = None
                    self._triggerTime = None
                    self._type = None
                    return
            Holder.__name__ = "MccAlert_Holder"
            self.pyclass = Holder

    class MccAlertPriority_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "MccAlertPriority")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MccAlertType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "MccAlertType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NetworkTarget_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "NetworkTarget")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.NetworkTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/v13","NetworkType",lazy=False)(pname=(ns,"networkTypes"), aname="_networkTypes", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._networkTypes = []
                    return
            Holder.__name__ = "NetworkTarget_Holder"
            self.pyclass = Holder

    class NetworkType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "NetworkType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class applicationToken_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "applicationToken"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","applicationToken")
            kw["aname"] = "_applicationToken"
            ZSI.TC.String.__init__(self, **kw)

    class clientCustomerId_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "clientCustomerId"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","clientCustomerId")
            kw["aname"] = "_clientCustomerId"
            ZSI.TC.String.__init__(self, **kw)

    class clientEmail_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "clientEmail"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","clientEmail")
            kw["aname"] = "_clientEmail"
            ZSI.TC.String.__init__(self, **kw)

    class developerToken_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "developerToken"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","developerToken")
            kw["aname"] = "_developerToken"
            ZSI.TC.String.__init__(self, **kw)

    class email_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "email"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","email")
            kw["aname"] = "_email"
            ZSI.TC.String.__init__(self, **kw)

    class fault_Dec(ElementDeclaration):
        literal = "fault"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","fault")
            kw["aname"] = "_fault"
            if ns0.ApiException_Def not in ns0.fault_Dec.__bases__:
                bases = list(ns0.fault_Dec.__bases__)
                bases.insert(0, ns0.ApiException_Def)
                ns0.fault_Dec.__bases__ = tuple(bases)

            ns0.ApiException_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "fault_Dec_Holder"

    class getAccountInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAccountInfo"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.getAccountInfo_Dec.schema
            TClist = []
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","getAccountInfo")
            kw["aname"] = "_getAccountInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getAccountInfo_Holder"
            self.pyclass = Holder

    class getAccountInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAccountInfoResponse"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.getAccountInfoResponse_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/v13","AccountInfo",lazy=False)(pname=(ns,"getAccountInfoReturn"), aname="_getAccountInfoReturn", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","getAccountInfoResponse")
            kw["aname"] = "_getAccountInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getAccountInfoReturn = None
                    return
            Holder.__name__ = "getAccountInfoResponse_Holder"
            self.pyclass = Holder

    class getClientAccountInfos_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getClientAccountInfos"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.getClientAccountInfos_Dec.schema
            TClist = []
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","getClientAccountInfos")
            kw["aname"] = "_getClientAccountInfos"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getClientAccountInfos_Holder"
            self.pyclass = Holder

    class getClientAccountInfosResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getClientAccountInfosResponse"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.getClientAccountInfosResponse_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/v13","ClientAccountInfo",lazy=False)(pname=(ns,"getClientAccountInfosReturn"), aname="_getClientAccountInfosReturn", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","getClientAccountInfosResponse")
            kw["aname"] = "_getClientAccountInfosResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getClientAccountInfosReturn = []
                    return
            Holder.__name__ = "getClientAccountInfosResponse_Holder"
            self.pyclass = Holder

    class getClientAccounts_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getClientAccounts"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.getClientAccounts_Dec.schema
            TClist = []
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","getClientAccounts")
            kw["aname"] = "_getClientAccounts"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getClientAccounts_Holder"
            self.pyclass = Holder

    class getClientAccountsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getClientAccountsResponse"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.getClientAccountsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"getClientAccountsReturn"), aname="_getClientAccountsReturn", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","getClientAccountsResponse")
            kw["aname"] = "_getClientAccountsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getClientAccountsReturn = []
                    return
            Holder.__name__ = "getClientAccountsResponse_Holder"
            self.pyclass = Holder

    class getMccAlerts_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getMccAlerts"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.getMccAlerts_Dec.schema
            TClist = []
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","getMccAlerts")
            kw["aname"] = "_getMccAlerts"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getMccAlerts_Holder"
            self.pyclass = Holder

    class getMccAlertsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getMccAlertsResponse"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.getMccAlertsResponse_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/v13","MccAlert",lazy=False)(pname=(ns,"getMccAlertsReturn"), aname="_getMccAlertsReturn", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","getMccAlertsResponse")
            kw["aname"] = "_getMccAlertsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getMccAlertsReturn = []
                    return
            Holder.__name__ = "getMccAlertsResponse_Holder"
            self.pyclass = Holder

    class operations_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "operations"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","operations")
            kw["aname"] = "_operations"
            ZSI.TC.String.__init__(self, **kw)

    class password_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "password"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","password")
            kw["aname"] = "_password"
            ZSI.TC.String.__init__(self, **kw)

    class requestId_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "requestId"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","requestId")
            kw["aname"] = "_requestId"
            ZSI.TC.String.__init__(self, **kw)

    class responseTime_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "responseTime"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","responseTime")
            kw["aname"] = "_responseTime"
            ZSI.TC.String.__init__(self, **kw)

    class units_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "units"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","units")
            kw["aname"] = "_units"
            ZSI.TC.String.__init__(self, **kw)

    class updateAccountInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "updateAccountInfo"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.updateAccountInfo_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/v13","AccountInfo",lazy=False)(pname=(ns,"accountInfo"), aname="_accountInfo", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","updateAccountInfo")
            kw["aname"] = "_updateAccountInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._accountInfo = None
                    return
            Holder.__name__ = "updateAccountInfo_Holder"
            self.pyclass = Holder

    class updateAccountInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "updateAccountInfoResponse"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.updateAccountInfoResponse_Dec.schema
            TClist = []
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","updateAccountInfoResponse")
            kw["aname"] = "_updateAccountInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "updateAccountInfoResponse_Holder"
            self.pyclass = Holder

    class useragent_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "useragent"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","useragent")
            kw["aname"] = "_useragent"
            ZSI.TC.String.__init__(self, **kw)

# end class ns0 (tns: https://adwords.google.com/api/adwords/v13)
