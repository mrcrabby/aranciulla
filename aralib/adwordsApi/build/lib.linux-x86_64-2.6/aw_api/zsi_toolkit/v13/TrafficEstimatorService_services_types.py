################################################## 
# TrafficEstimatorService_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# https://adwords.google.com/api/adwords/v13
##############################

class ns0:
    targetNamespace = "https://adwords.google.com/api/adwords/v13"

    class AdGroupEstimate_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "AdGroupEstimate")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AdGroupEstimate_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/v13","KeywordEstimate",lazy=False)(pname=(ns,"keywordEstimates"), aname="_keywordEstimates", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._keywordEstimates = []
                    return
            Holder.__name__ = "AdGroupEstimate_Holder"
            self.pyclass = Holder

    class AdGroupRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "AdGroupRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AdGroupRequest_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/v13","KeywordRequest",lazy=False)(pname=(ns,"keywordRequests"), aname="_keywordRequests", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"maxCpc"), aname="_maxCpc", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._keywordRequests = []
                    self._maxCpc = None
                    return
            Holder.__name__ = "AdGroupRequest_Holder"
            self.pyclass = Holder

    class ApiError_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "ApiError")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ApiError_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"code"), aname="_code", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"detail"), aname="_detail", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"field"), aname="_field", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"index"), aname="_index", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"isExemptable"), aname="_isExemptable", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"textIndex"), aname="_textIndex", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"textLength"), aname="_textLength", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"trigger"), aname="_trigger", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._code = None
                    self._detail = None
                    self._field = None
                    self._index = None
                    self._isExemptable = None
                    self._textIndex = None
                    self._textLength = None
                    self._trigger = None
                    return
            Holder.__name__ = "ApiError_Holder"
            self.pyclass = Holder

    class ApiException_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "ApiException")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ApiException_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"code"), aname="_code", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/v13","ApiError",lazy=False)(pname=(ns,"errors"), aname="_errors", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"internal"), aname="_internal", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"trigger"), aname="_trigger", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._code = None
                    self._errors = []
                    self._internal = None
                    self._message = None
                    self._trigger = None
                    return
            Holder.__name__ = "ApiException_Holder"
            self.pyclass = Holder

    class CampaignEstimate_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "CampaignEstimate")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CampaignEstimate_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/v13","AdGroupEstimate",lazy=False)(pname=(ns,"adGroupEstimates"), aname="_adGroupEstimates", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._adGroupEstimates = []
                    self._id = None
                    return
            Holder.__name__ = "CampaignEstimate_Holder"
            self.pyclass = Holder

    class CampaignRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "CampaignRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CampaignRequest_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/v13","AdGroupRequest",lazy=False)(pname=(ns,"adGroupRequests"), aname="_adGroupRequests", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/v13","GeoTarget",lazy=False)(pname=(ns,"geoTargeting"), aname="_geoTargeting", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/v13","LanguageTarget",lazy=False)(pname=(ns,"languageTargeting"), aname="_languageTargeting", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/v13","NetworkTarget",lazy=False)(pname=(ns,"networkTargeting"), aname="_networkTargeting", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._adGroupRequests = []
                    self._geoTargeting = None
                    self._id = None
                    self._languageTargeting = None
                    self._networkTargeting = None
                    return
            Holder.__name__ = "CampaignRequest_Holder"
            self.pyclass = Holder

    class Circle_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "Circle")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Circle_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"latitudeMicroDegrees"), aname="_latitudeMicroDegrees", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"longitudeMicroDegrees"), aname="_longitudeMicroDegrees", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"radiusMeters"), aname="_radiusMeters", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._latitudeMicroDegrees = None
                    self._longitudeMicroDegrees = None
                    self._radiusMeters = None
                    return
            Holder.__name__ = "Circle_Holder"
            self.pyclass = Holder

    class CityTargets_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "CityTargets")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CityTargets_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"cities"), aname="_cities", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"excludedCities"), aname="_excludedCities", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._cities = []
                    self._excludedCities = []
                    return
            Holder.__name__ = "CityTargets_Holder"
            self.pyclass = Holder

    class CountryTargets_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "CountryTargets")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CountryTargets_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"countries"), aname="_countries", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"excludedCountries"), aname="_excludedCountries", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._countries = []
                    self._excludedCountries = []
                    return
            Holder.__name__ = "CountryTargets_Holder"
            self.pyclass = Holder

    class GeoTarget_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "GeoTarget")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GeoTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/v13","CityTargets",lazy=False)(pname=(ns,"cityTargets"), aname="_cityTargets", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/v13","CountryTargets",lazy=False)(pname=(ns,"countryTargets"), aname="_countryTargets", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/v13","MetroTargets",lazy=False)(pname=(ns,"metroTargets"), aname="_metroTargets", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/v13","ProximityTargets",lazy=False)(pname=(ns,"proximityTargets"), aname="_proximityTargets", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/v13","RegionTargets",lazy=False)(pname=(ns,"regionTargets"), aname="_regionTargets", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"targetAll"), aname="_targetAll", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._cityTargets = None
                    self._countryTargets = None
                    self._metroTargets = None
                    self._proximityTargets = None
                    self._regionTargets = None
                    self._targetAll = None
                    return
            Holder.__name__ = "GeoTarget_Holder"
            self.pyclass = Holder

    class KeywordEstimate_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "KeywordEstimate")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.KeywordEstimate_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname=(ns,"lowerAvgPosition"), aname="_lowerAvgPosition", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname=(ns,"lowerClicksPerDay"), aname="_lowerClicksPerDay", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"lowerCpc"), aname="_lowerCpc", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname=(ns,"upperAvgPosition"), aname="_upperAvgPosition", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname=(ns,"upperClicksPerDay"), aname="_upperClicksPerDay", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"upperCpc"), aname="_upperCpc", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._lowerAvgPosition = None
                    self._lowerClicksPerDay = None
                    self._lowerCpc = None
                    self._upperAvgPosition = None
                    self._upperClicksPerDay = None
                    self._upperCpc = None
                    return
            Holder.__name__ = "KeywordEstimate_Holder"
            self.pyclass = Holder

    class KeywordRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "KeywordRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.KeywordRequest_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"maxCpc"), aname="_maxCpc", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"negative"), aname="_negative", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"text"), aname="_text", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/v13","KeywordType",lazy=False)(pname=(ns,"type"), aname="_type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._maxCpc = None
                    self._negative = None
                    self._text = None
                    self._type = None
                    return
            Holder.__name__ = "KeywordRequest_Holder"
            self.pyclass = Holder

    class KeywordTraffic_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "KeywordTraffic")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class KeywordTrafficRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "KeywordTrafficRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.KeywordTrafficRequest_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"keywordText"), aname="_keywordText", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/v13","KeywordType",lazy=False)(pname=(ns,"keywordType"), aname="_keywordType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"language"), aname="_language", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._keywordText = None
                    self._keywordType = None
                    self._language = None
                    return
            Holder.__name__ = "KeywordTrafficRequest_Holder"
            self.pyclass = Holder

    class KeywordType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "KeywordType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LanguageTarget_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "LanguageTarget")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.LanguageTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"languages"), aname="_languages", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._languages = []
                    return
            Holder.__name__ = "LanguageTarget_Holder"
            self.pyclass = Holder

    class MetroTargets_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "MetroTargets")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.MetroTargets_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"excludedMetros"), aname="_excludedMetros", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"metros"), aname="_metros", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._excludedMetros = []
                    self._metros = []
                    return
            Holder.__name__ = "MetroTargets_Holder"
            self.pyclass = Holder

    class NetworkTarget_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "NetworkTarget")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.NetworkTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/v13","NetworkType",lazy=False)(pname=(ns,"networkTypes"), aname="_networkTypes", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._networkTypes = []
                    return
            Holder.__name__ = "NetworkTarget_Holder"
            self.pyclass = Holder

    class NetworkType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "NetworkType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ProximityTargets_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "ProximityTargets")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ProximityTargets_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/v13","Circle",lazy=False)(pname=(ns,"circles"), aname="_circles", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._circles = []
                    return
            Holder.__name__ = "ProximityTargets_Holder"
            self.pyclass = Holder

    class RegionTargets_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/v13"
        type = (schema, "RegionTargets")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RegionTargets_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"excludedRegions"), aname="_excludedRegions", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"regions"), aname="_regions", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._excludedRegions = []
                    self._regions = []
                    return
            Holder.__name__ = "RegionTargets_Holder"
            self.pyclass = Holder

    class applicationToken_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "applicationToken"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","applicationToken")
            kw["aname"] = "_applicationToken"
            ZSI.TC.String.__init__(self, **kw)

    class checkKeywordTraffic_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "checkKeywordTraffic"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.checkKeywordTraffic_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/v13","KeywordTrafficRequest",lazy=False)(pname=(ns,"requests"), aname="_requests", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","checkKeywordTraffic")
            kw["aname"] = "_checkKeywordTraffic"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requests = []
                    return
            Holder.__name__ = "checkKeywordTraffic_Holder"
            self.pyclass = Holder

    class checkKeywordTrafficResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "checkKeywordTrafficResponse"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.checkKeywordTrafficResponse_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/v13","KeywordTraffic",lazy=False)(pname=(ns,"checkKeywordTrafficReturn"), aname="_checkKeywordTrafficReturn", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","checkKeywordTrafficResponse")
            kw["aname"] = "_checkKeywordTrafficResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._checkKeywordTrafficReturn = []
                    return
            Holder.__name__ = "checkKeywordTrafficResponse_Holder"
            self.pyclass = Holder

    class clientCustomerId_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "clientCustomerId"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","clientCustomerId")
            kw["aname"] = "_clientCustomerId"
            ZSI.TC.String.__init__(self, **kw)

    class clientEmail_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "clientEmail"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","clientEmail")
            kw["aname"] = "_clientEmail"
            ZSI.TC.String.__init__(self, **kw)

    class developerToken_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "developerToken"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","developerToken")
            kw["aname"] = "_developerToken"
            ZSI.TC.String.__init__(self, **kw)

    class email_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "email"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","email")
            kw["aname"] = "_email"
            ZSI.TC.String.__init__(self, **kw)

    class estimateAdGroupList_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "estimateAdGroupList"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.estimateAdGroupList_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/v13","AdGroupRequest",lazy=False)(pname=(ns,"adGroupRequests"), aname="_adGroupRequests", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","estimateAdGroupList")
            kw["aname"] = "_estimateAdGroupList"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._adGroupRequests = []
                    return
            Holder.__name__ = "estimateAdGroupList_Holder"
            self.pyclass = Holder

    class estimateAdGroupListResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "estimateAdGroupListResponse"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.estimateAdGroupListResponse_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/v13","AdGroupEstimate",lazy=False)(pname=(ns,"estimateAdGroupListReturn"), aname="_estimateAdGroupListReturn", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","estimateAdGroupListResponse")
            kw["aname"] = "_estimateAdGroupListResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._estimateAdGroupListReturn = []
                    return
            Holder.__name__ = "estimateAdGroupListResponse_Holder"
            self.pyclass = Holder

    class estimateCampaignList_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "estimateCampaignList"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.estimateCampaignList_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/v13","CampaignRequest",lazy=False)(pname=(ns,"campaignRequests"), aname="_campaignRequests", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","estimateCampaignList")
            kw["aname"] = "_estimateCampaignList"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._campaignRequests = []
                    return
            Holder.__name__ = "estimateCampaignList_Holder"
            self.pyclass = Holder

    class estimateCampaignListResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "estimateCampaignListResponse"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.estimateCampaignListResponse_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/v13","CampaignEstimate",lazy=False)(pname=(ns,"estimateCampaignListReturn"), aname="_estimateCampaignListReturn", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","estimateCampaignListResponse")
            kw["aname"] = "_estimateCampaignListResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._estimateCampaignListReturn = []
                    return
            Holder.__name__ = "estimateCampaignListResponse_Holder"
            self.pyclass = Holder

    class estimateKeywordList_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "estimateKeywordList"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.estimateKeywordList_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/v13","KeywordRequest",lazy=False)(pname=(ns,"keywordRequests"), aname="_keywordRequests", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","estimateKeywordList")
            kw["aname"] = "_estimateKeywordList"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._keywordRequests = []
                    return
            Holder.__name__ = "estimateKeywordList_Holder"
            self.pyclass = Holder

    class estimateKeywordListResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "estimateKeywordListResponse"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            ns = ns0.estimateKeywordListResponse_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/v13","KeywordEstimate",lazy=False)(pname=(ns,"estimateKeywordListReturn"), aname="_estimateKeywordListReturn", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","estimateKeywordListResponse")
            kw["aname"] = "_estimateKeywordListResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._estimateKeywordListReturn = []
                    return
            Holder.__name__ = "estimateKeywordListResponse_Holder"
            self.pyclass = Holder

    class fault_Dec(ElementDeclaration):
        literal = "fault"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","fault")
            kw["aname"] = "_fault"
            if ns0.ApiException_Def not in ns0.fault_Dec.__bases__:
                bases = list(ns0.fault_Dec.__bases__)
                bases.insert(0, ns0.ApiException_Def)
                ns0.fault_Dec.__bases__ = tuple(bases)

            ns0.ApiException_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "fault_Dec_Holder"

    class operations_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "operations"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","operations")
            kw["aname"] = "_operations"
            ZSI.TC.String.__init__(self, **kw)

    class password_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "password"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","password")
            kw["aname"] = "_password"
            ZSI.TC.String.__init__(self, **kw)

    class requestId_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "requestId"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","requestId")
            kw["aname"] = "_requestId"
            ZSI.TC.String.__init__(self, **kw)

    class responseTime_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "responseTime"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","responseTime")
            kw["aname"] = "_responseTime"
            ZSI.TC.String.__init__(self, **kw)

    class units_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "units"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","units")
            kw["aname"] = "_units"
            ZSI.TC.String.__init__(self, **kw)

    class useragent_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "useragent"
        schema = "https://adwords.google.com/api/adwords/v13"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/v13","useragent")
            kw["aname"] = "_useragent"
            ZSI.TC.String.__init__(self, **kw)

# end class ns0 (tns: https://adwords.google.com/api/adwords/v13)
