################################################## 
# AdGroupAdService_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# https://adwords.google.com/api/adwords/cm/v201003
##############################

class ns0:
    targetNamespace = "https://adwords.google.com/api/adwords/cm/v201003"

    class AdError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AdError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","AdError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AdError_Def.__bases__:
                bases = list(ns0.AdError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AdError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdExtensionOverrideStats_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AdExtensionOverrideStats")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdExtensionOverrideStats_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Stats_Def not in ns0.AdExtensionOverrideStats_Def.__bases__:
                bases = list(ns0.AdExtensionOverrideStats_Def.__bases__)
                bases.insert(0, ns0.Stats_Def)
                ns0.AdExtensionOverrideStats_Def.__bases__ = tuple(bases)

            ns0.Stats_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdGroupAdCountLimitExceeded_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AdGroupAdCountLimitExceeded")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdGroupAdCountLimitExceeded_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.EntityCountLimitExceeded_Def not in ns0.AdGroupAdCountLimitExceeded_Def.__bases__:
                bases = list(ns0.AdGroupAdCountLimitExceeded_Def.__bases__)
                bases.insert(0, ns0.EntityCountLimitExceeded_Def)
                ns0.AdGroupAdCountLimitExceeded_Def.__bases__ = tuple(bases)

            ns0.EntityCountLimitExceeded_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdGroupAdError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AdGroupAdError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdGroupAdError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","AdGroupAdError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AdGroupAdError_Def.__bases__:
                bases = list(ns0.AdGroupAdError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AdGroupAdError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdScheduleTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AdScheduleTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdScheduleTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","DayOfWeek",lazy=False)(pname=(ns,"dayOfWeek"), aname="_dayOfWeek", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"startHour"), aname="_startHour", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","MinuteOfHour",lazy=False)(pname=(ns,"startMinute"), aname="_startMinute", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"endHour"), aname="_endHour", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","MinuteOfHour",lazy=False)(pname=(ns,"endMinute"), aname="_endMinute", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"bidMultiplier"), aname="_bidMultiplier", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.AdScheduleTarget_Def.__bases__:
                bases = list(ns0.AdScheduleTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.AdScheduleTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdStats_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AdStats")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdStats_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"percentServed"), aname="_percentServed", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Stats_Def not in ns0.AdStats_Def.__bases__:
                bases = list(ns0.AdStats_Def.__bases__)
                bases.insert(0, ns0.Stats_Def)
                ns0.AdStats_Def.__bases__ = tuple(bases)

            ns0.Stats_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdStatsSelector_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AdStatsSelector")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdStatsSelector_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.StatsSelector_Def not in ns0.AdStatsSelector_Def.__bases__:
                bases = list(ns0.AdStatsSelector_Def.__bases__)
                bases.insert(0, ns0.StatsSelector_Def)
                ns0.AdStatsSelector_Def.__bases__ = tuple(bases)

            ns0.StatsSelector_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Address_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Address")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Address_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"streetAddress"), aname="_streetAddress", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"streetAddress2"), aname="_streetAddress2", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"cityName"), aname="_cityName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"provinceCode"), aname="_provinceCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"provinceName"), aname="_provinceName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"postalCode"), aname="_postalCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._streetAddress = None
                    self._streetAddress2 = None
                    self._cityName = None
                    self._provinceCode = None
                    self._provinceName = None
                    self._postalCode = None
                    self._countryCode = None
                    return
            Holder.__name__ = "Address_Holder"
            self.pyclass = Holder

    class AgeTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AgeTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AgeTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","AgeTarget.Age",lazy=False)(pname=(ns,"age"), aname="_age", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.DemographicTarget_Def not in ns0.AgeTarget_Def.__bases__:
                bases = list(ns0.AgeTarget_Def.__bases__)
                bases.insert(0, ns0.DemographicTarget_Def)
                ns0.AgeTarget_Def.__bases__ = tuple(bases)

            ns0.DemographicTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Audio_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Audio")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Audio_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"durationMillis"), aname="_durationMillis", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"streamingUrl"), aname="_streamingUrl", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"readyToPlayOnTheWeb"), aname="_readyToPlayOnTheWeb", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Media_Def not in ns0.Audio_Def.__bases__:
                bases = list(ns0.Audio_Def.__bases__)
                bases.insert(0, ns0.Media_Def)
                ns0.Audio_Def.__bases__ = tuple(bases)

            ns0.Media_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AuthenticationError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AuthenticationError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AuthenticationError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","AuthenticationError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AuthenticationError_Def.__bases__:
                bases = list(ns0.AuthenticationError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AuthenticationError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AuthorizationError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AuthorizationError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AuthorizationError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","AuthorizationError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AuthorizationError_Def.__bases__:
                bases = list(ns0.AuthorizationError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AuthorizationError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CityTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "CityTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CityTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"cityName"), aname="_cityName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"provinceCode"), aname="_provinceCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.GeoTarget_Def not in ns0.CityTarget_Def.__bases__:
                bases = list(ns0.CityTarget_Def.__bases__)
                bases.insert(0, ns0.GeoTarget_Def)
                ns0.CityTarget_Def.__bases__ = tuple(bases)

            ns0.GeoTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ClientTermsError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ClientTermsError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ClientTermsError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","ClientTermsError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.ClientTermsError_Def.__bases__:
                bases = list(ns0.ClientTermsError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.ClientTermsError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CountryTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "CountryTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CountryTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.GeoTarget_Def not in ns0.CountryTarget_Def.__bases__:
                bases = list(ns0.CountryTarget_Def.__bases__)
                bases.insert(0, ns0.GeoTarget_Def)
                ns0.CountryTarget_Def.__bases__ = tuple(bases)

            ns0.GeoTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DateError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "DateError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DateError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","DateError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.DateError_Def.__bases__:
                bases = list(ns0.DateError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.DateError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DateRange_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "DateRange")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DateRange_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"min"), aname="_min", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"max"), aname="_max", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._min = None
                    self._max = None
                    return
            Holder.__name__ = "DateRange_Holder"
            self.pyclass = Holder

    class DeprecatedAd_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "DeprecatedAd")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DeprecatedAd_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","DeprecatedAd.Type",lazy=False)(pname=(ns,"type"), aname="_type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Ad_Def not in ns0.DeprecatedAd_Def.__bases__:
                bases = list(ns0.DeprecatedAd_Def.__bases__)
                bases.insert(0, ns0.Ad_Def)
                ns0.DeprecatedAd_Def.__bases__ = tuple(bases)

            ns0.Ad_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Dimensions_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Dimensions")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Dimensions_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"width"), aname="_width", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"height"), aname="_height", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._width = None
                    self._height = None
                    return
            Holder.__name__ = "Dimensions_Holder"
            self.pyclass = Holder

    class DistinctError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "DistinctError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DistinctError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","DistinctError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.DistinctError_Def.__bases__:
                bases = list(ns0.DistinctError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.DistinctError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DoubleValue_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "DoubleValue")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DoubleValue_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"number"), aname="_number", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.NumberValue_Def not in ns0.DoubleValue_Def.__bases__:
                bases = list(ns0.DoubleValue_Def.__bases__)
                bases.insert(0, ns0.NumberValue_Def)
                ns0.DoubleValue_Def.__bases__ = tuple(bases)

            ns0.NumberValue_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class EntityCountLimitExceeded_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "EntityCountLimitExceeded")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.EntityCountLimitExceeded_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","EntityCountLimitExceeded.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"enclosingId"), aname="_enclosingId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"limit"), aname="_limit", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.EntityCountLimitExceeded_Def.__bases__:
                bases = list(ns0.EntityCountLimitExceeded_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.EntityCountLimitExceeded_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class EntityNotFound_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "EntityNotFound")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.EntityNotFound_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","EntityNotFound.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.EntityNotFound_Def.__bases__:
                bases = list(ns0.EntityNotFound_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.EntityNotFound_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GenderTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "GenderTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.GenderTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","GenderTarget.Gender",lazy=False)(pname=(ns,"gender"), aname="_gender", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.DemographicTarget_Def not in ns0.GenderTarget_Def.__bases__:
                bases = list(ns0.GenderTarget_Def.__bases__)
                bases.insert(0, ns0.DemographicTarget_Def)
                ns0.GenderTarget_Def.__bases__ = tuple(bases)

            ns0.DemographicTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GeoPoint_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "GeoPoint")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GeoPoint_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"latitudeInMicroDegrees"), aname="_latitudeInMicroDegrees", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"longitudeInMicroDegrees"), aname="_longitudeInMicroDegrees", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._latitudeInMicroDegrees = None
                    self._longitudeInMicroDegrees = None
                    return
            Holder.__name__ = "GeoPoint_Holder"
            self.pyclass = Holder

    class IdError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "IdError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.IdError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","IdError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.IdError_Def.__bases__:
                bases = list(ns0.IdError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.IdError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Image_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Image")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Image_Def.schema
            TClist = [ZSI.TC.Base64String(pname=(ns,"data"), aname="_data", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Media_Def not in ns0.Image_Def.__bases__:
                bases = list(ns0.Image_Def.__bases__)
                bases.insert(0, ns0.Media_Def)
                ns0.Image_Def.__bases__ = tuple(bases)

            ns0.Media_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ImageError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ImageError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ImageError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","ImageError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.ImageError_Def.__bases__:
                bases = list(ns0.ImageError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.ImageError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class InternalApiError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "InternalApiError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.InternalApiError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","InternalApiError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.InternalApiError_Def.__bases__:
                bases = list(ns0.InternalApiError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.InternalApiError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LanguageTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "LanguageTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.LanguageTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"languageCode"), aname="_languageCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.LanguageTarget_Def.__bases__:
                bases = list(ns0.LanguageTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.LanguageTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LongValue_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "LongValue")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.LongValue_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"number"), aname="_number", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.NumberValue_Def not in ns0.LongValue_Def.__bases__:
                bases = list(ns0.LongValue_Def.__bases__)
                bases.insert(0, ns0.NumberValue_Def)
                ns0.LongValue_Def.__bases__ = tuple(bases)

            ns0.NumberValue_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MediaError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "MediaError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MediaError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","MediaError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.MediaError_Def.__bases__:
                bases = list(ns0.MediaError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.MediaError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Media_MediaExtendedCapabilityType_Media_MediaExtendedCapabilityStateMapEntry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Media_MediaExtendedCapabilityType_Media_MediaExtendedCapabilityStateMapEntry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Media_MediaExtendedCapabilityType_Media_MediaExtendedCapabilityStateMapEntry_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","Media.MediaExtendedCapabilityType",lazy=False)(pname=(ns,"key"), aname="_key", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","Media.MediaExtendedCapabilityState",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._key = None
                    self._value = None
                    return
            Holder.__name__ = "Media_MediaExtendedCapabilityType_Media_MediaExtendedCapabilityStateMapEntry_Holder"
            self.pyclass = Holder

    class Media_Size_DimensionsMapEntry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Media_Size_DimensionsMapEntry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Media_Size_DimensionsMapEntry_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","Media.Size",lazy=False)(pname=(ns,"key"), aname="_key", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","Dimensions",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._key = None
                    self._value = None
                    return
            Holder.__name__ = "Media_Size_DimensionsMapEntry_Holder"
            self.pyclass = Holder

    class Media_Size_StringMapEntry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Media_Size_StringMapEntry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Media_Size_StringMapEntry_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","Media.Size",lazy=False)(pname=(ns,"key"), aname="_key", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._key = None
                    self._value = None
                    return
            Holder.__name__ = "Media_Size_StringMapEntry_Holder"
            self.pyclass = Holder

    class MetroTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "MetroTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MetroTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"metroCode"), aname="_metroCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.GeoTarget_Def not in ns0.MetroTarget_Def.__bases__:
                bases = list(ns0.MetroTarget_Def.__bases__)
                bases.insert(0, ns0.GeoTarget_Def)
                ns0.MetroTarget_Def.__bases__ = tuple(bases)

            ns0.GeoTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MobileAd_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "MobileAd")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MobileAd_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"headline"), aname="_headline", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","MarkupLanguageType",lazy=False)(pname=(ns,"markupLanguages"), aname="_markupLanguages", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"mobileCarriers"), aname="_mobileCarriers", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"businessName"), aname="_businessName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"phoneNumber"), aname="_phoneNumber", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Ad_Def not in ns0.MobileAd_Def.__bases__:
                bases = list(ns0.MobileAd_Def.__bases__)
                bases.insert(0, ns0.Ad_Def)
                ns0.MobileAd_Def.__bases__ = tuple(bases)

            ns0.Ad_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MobileCarrierTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "MobileCarrierTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MobileCarrierTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"carrierName"), aname="_carrierName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.MobileTarget_Def not in ns0.MobileCarrierTarget_Def.__bases__:
                bases = list(ns0.MobileCarrierTarget_Def.__bases__)
                bases.insert(0, ns0.MobileTarget_Def)
                ns0.MobileCarrierTarget_Def.__bases__ = tuple(bases)

            ns0.MobileTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MobilePlatformTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "MobilePlatformTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MobilePlatformTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"platformName"), aname="_platformName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.MobileTarget_Def not in ns0.MobilePlatformTarget_Def.__bases__:
                bases = list(ns0.MobilePlatformTarget_Def.__bases__)
                bases.insert(0, ns0.MobileTarget_Def)
                ns0.MobilePlatformTarget_Def.__bases__ = tuple(bases)

            ns0.MobileTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MobileTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "MobileTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MobileTarget_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.MobileTarget_Def.__bases__:
                bases = list(ns0.MobileTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.MobileTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Money_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Money")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Money_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"microAmount"), aname="_microAmount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ComparableValue_Def not in ns0.Money_Def.__bases__:
                bases = list(ns0.Money_Def.__bases__)
                bases.insert(0, ns0.ComparableValue_Def)
                ns0.Money_Def.__bases__ = tuple(bases)

            ns0.ComparableValue_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NetworkTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "NetworkTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NetworkTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","NetworkCoverageType",lazy=False)(pname=(ns,"networkCoverageType"), aname="_networkCoverageType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.NetworkTarget_Def.__bases__:
                bases = list(ns0.NetworkTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.NetworkTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NewEntityCreationError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "NewEntityCreationError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NewEntityCreationError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","NewEntityCreationError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NewEntityCreationError_Def.__bases__:
                bases = list(ns0.NewEntityCreationError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NewEntityCreationError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NotEmptyError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "NotEmptyError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NotEmptyError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","NotEmptyError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NotEmptyError_Def.__bases__:
                bases = list(ns0.NotEmptyError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NotEmptyError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NotWhitelistedError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "NotWhitelistedError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NotWhitelistedError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","NotWhitelistedError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NotWhitelistedError_Def.__bases__:
                bases = list(ns0.NotWhitelistedError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NotWhitelistedError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NullError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "NullError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NullError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","NullError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NullError_Def.__bases__:
                bases = list(ns0.NullError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NullError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NumberValue_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "NumberValue")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NumberValue_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ComparableValue_Def not in ns0.NumberValue_Def.__bases__:
                bases = list(ns0.NumberValue_Def.__bases__)
                bases.insert(0, ns0.ComparableValue_Def)
                ns0.NumberValue_Def.__bases__ = tuple(bases)

            ns0.ComparableValue_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class OperationAccessDenied_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "OperationAccessDenied")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.OperationAccessDenied_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","OperationAccessDenied.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.OperationAccessDenied_Def.__bases__:
                bases = list(ns0.OperationAccessDenied_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.OperationAccessDenied_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Paging_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Paging")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Paging_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"startIndex"), aname="_startIndex", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"numberResults"), aname="_numberResults", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._startIndex = None
                    self._numberResults = None
                    return
            Holder.__name__ = "Paging_Holder"
            self.pyclass = Holder

    class PagingError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "PagingError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.PagingError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","PagingError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.PagingError_Def.__bases__:
                bases = list(ns0.PagingError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.PagingError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PlatformTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "PlatformTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.PlatformTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","PlatformType",lazy=False)(pname=(ns,"platformType"), aname="_platformType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.PlatformTarget_Def.__bases__:
                bases = list(ns0.PlatformTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.PlatformTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PolicyViolationError_Part_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "PolicyViolationError.Part")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PolicyViolationError_Part_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"index"), aname="_index", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"length"), aname="_length", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._index = None
                    self._length = None
                    return
            Holder.__name__ = "PolicyViolationError.Part_Holder"
            self.pyclass = Holder

    class PolicyViolationKey_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "PolicyViolationKey")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PolicyViolationKey_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"policyName"), aname="_policyName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"violatingText"), aname="_violatingText", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._policyName = None
                    self._violatingText = None
                    return
            Holder.__name__ = "PolicyViolationKey_Holder"
            self.pyclass = Holder

    class PolygonTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "PolygonTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.PolygonTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","GeoPoint",lazy=False)(pname=(ns,"vertices"), aname="_vertices", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.GeoTarget_Def not in ns0.PolygonTarget_Def.__bases__:
                bases = list(ns0.PolygonTarget_Def.__bases__)
                bases.insert(0, ns0.GeoTarget_Def)
                ns0.PolygonTarget_Def.__bases__ = tuple(bases)

            ns0.GeoTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ProvinceTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ProvinceTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ProvinceTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"provinceCode"), aname="_provinceCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.GeoTarget_Def not in ns0.ProvinceTarget_Def.__bases__:
                bases = list(ns0.ProvinceTarget_Def.__bases__)
                bases.insert(0, ns0.GeoTarget_Def)
                ns0.ProvinceTarget_Def.__bases__ = tuple(bases)

            ns0.GeoTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ProximityTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ProximityTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ProximityTarget_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","GeoPoint",lazy=False)(pname=(ns,"geoPoint"), aname="_geoPoint", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","ProximityTarget.DistanceUnits",lazy=False)(pname=(ns,"radiusDistanceUnits"), aname="_radiusDistanceUnits", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"radiusInUnits"), aname="_radiusInUnits", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","Address",lazy=False)(pname=(ns,"address"), aname="_address", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"allowServiceOfAddress"), aname="_allowServiceOfAddress", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.GeoTarget_Def not in ns0.ProximityTarget_Def.__bases__:
                bases = list(ns0.ProximityTarget_Def.__bases__)
                bases.insert(0, ns0.GeoTarget_Def)
                ns0.ProximityTarget_Def.__bases__ = tuple(bases)

            ns0.GeoTarget_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class QuotaCheckError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "QuotaCheckError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.QuotaCheckError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","QuotaCheckError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.QuotaCheckError_Def.__bases__:
                bases = list(ns0.QuotaCheckError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.QuotaCheckError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RangeError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "RangeError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RangeError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","RangeError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RangeError_Def.__bases__:
                bases = list(ns0.RangeError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RangeError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RateExceededError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "RateExceededError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RateExceededError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","RateExceededError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"rateName"), aname="_rateName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"rateScope"), aname="_rateScope", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"retryAfterSeconds"), aname="_retryAfterSeconds", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RateExceededError_Def.__bases__:
                bases = list(ns0.RateExceededError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RateExceededError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ReadOnlyError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ReadOnlyError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ReadOnlyError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","ReadOnlyError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.ReadOnlyError_Def.__bases__:
                bases = list(ns0.ReadOnlyError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.ReadOnlyError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RequestError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "RequestError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RequestError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","RequestError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RequestError_Def.__bases__:
                bases = list(ns0.RequestError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RequestError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RequiredError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "RequiredError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RequiredError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","RequiredError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RequiredError_Def.__bases__:
                bases = list(ns0.RequiredError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RequiredError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SizeLimitError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "SizeLimitError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.SizeLimitError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","SizeLimitError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.SizeLimitError_Def.__bases__:
                bases = list(ns0.SizeLimitError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.SizeLimitError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SoapHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "SoapHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SoapHeader_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"authToken"), aname="_authToken", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clientCustomerId"), aname="_clientCustomerId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clientEmail"), aname="_clientEmail", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"developerToken"), aname="_developerToken", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userAgent"), aname="_userAgent", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"validateOnly"), aname="_validateOnly", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._authToken = None
                    self._clientCustomerId = None
                    self._clientEmail = None
                    self._developerToken = None
                    self._userAgent = None
                    self._validateOnly = None
                    return
            Holder.__name__ = "SoapHeader_Holder"
            self.pyclass = Holder

    class SoapResponseHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "SoapResponseHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SoapResponseHeader_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"requestId"), aname="_requestId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"operations"), aname="_operations", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"responseTime"), aname="_responseTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"units"), aname="_units", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requestId = None
                    self._operations = None
                    self._responseTime = None
                    self._units = None
                    return
            Holder.__name__ = "SoapResponseHeader_Holder"
            self.pyclass = Holder

    class StatsQueryError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "StatsQueryError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.StatsQueryError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","StatsQueryError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.StatsQueryError_Def.__bases__:
                bases = list(ns0.StatsQueryError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.StatsQueryError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class StatsSelector_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "StatsSelector")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.StatsSelector_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","DateRange",lazy=False)(pname=(ns,"dateRange"), aname="_dateRange", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"StatsSelector.Type"), aname="_StatsSelector_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._dateRange = None
                    self._StatsSelector_Type = None
                    return
            Holder.__name__ = "StatsSelector_Holder"
            self.pyclass = Holder

    class TempAdUnionId_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "TempAdUnionId")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.TempAdUnionId_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.AdUnionId_Def not in ns0.TempAdUnionId_Def.__bases__:
                bases = list(ns0.TempAdUnionId_Def.__bases__)
                bases.insert(0, ns0.AdUnionId_Def)
                ns0.TempAdUnionId_Def.__bases__ = tuple(bases)

            ns0.AdUnionId_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TextAd_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "TextAd")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.TextAd_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"headline"), aname="_headline", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description1"), aname="_description1", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description2"), aname="_description2", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Ad_Def not in ns0.TextAd_Def.__bases__:
                bases = list(ns0.TextAd_Def.__bases__)
                bases.insert(0, ns0.Ad_Def)
                ns0.TextAd_Def.__bases__ = tuple(bases)

            ns0.Ad_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ThirdPartyRedirectAd_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ThirdPartyRedirectAd")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ThirdPartyRedirectAd_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"isCookieTargeted"), aname="_isCookieTargeted", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"isUserInterestTargeted"), aname="_isUserInterestTargeted", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"isTagged"), aname="_isTagged", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","VideoType",lazy=False)(pname=(ns,"videoTypes"), aname="_videoTypes", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.RichMediaAd_Def not in ns0.ThirdPartyRedirectAd_Def.__bases__:
                bases = list(ns0.ThirdPartyRedirectAd_Def.__bases__)
                bases.insert(0, ns0.RichMediaAd_Def)
                ns0.ThirdPartyRedirectAd_Def.__bases__ = tuple(bases)

            ns0.RichMediaAd_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Video_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Video")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Video_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"durationMillis"), aname="_durationMillis", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"streamingUrl"), aname="_streamingUrl", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"readyToPlayOnTheWeb"), aname="_readyToPlayOnTheWeb", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"industryStandardCommercialIdentifier"), aname="_industryStandardCommercialIdentifier", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"advertisingId"), aname="_advertisingId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Media_Def not in ns0.Video_Def.__bases__:
                bases = list(ns0.Video_Def.__bases__)
                bases.insert(0, ns0.Media_Def)
                ns0.Video_Def.__bases__ = tuple(bases)

            ns0.Media_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdUnionId_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AdUnionId")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AdUnionId_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AdUnionId.Type"), aname="_AdUnionId_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._AdUnionId_Type = None
                    return
            Holder.__name__ = "AdUnionId_Holder"
            self.pyclass = Holder

    class ComparableValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ComparableValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ComparableValue_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"ComparableValue.Type"), aname="_ComparableValue_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ComparableValue_Type = None
                    return
            Holder.__name__ = "ComparableValue_Holder"
            self.pyclass = Holder

    class DatabaseError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "DatabaseError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DatabaseError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","DatabaseError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.DatabaseError_Def.__bases__:
                bases = list(ns0.DatabaseError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.DatabaseError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DemographicTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "DemographicTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DemographicTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"bidModifier"), aname="_bidModifier", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.DemographicTarget_Def.__bases__:
                bases = list(ns0.DemographicTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.DemographicTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ExemptionRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ExemptionRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ExemptionRequest_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","PolicyViolationKey",lazy=False)(pname=(ns,"key"), aname="_key", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._key = None
                    return
            Holder.__name__ = "ExemptionRequest_Holder"
            self.pyclass = Holder

    class GeoTarget_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "GeoTarget")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.GeoTarget_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"excluded"), aname="_excluded", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Target_Def not in ns0.GeoTarget_Def.__bases__:
                bases = list(ns0.GeoTarget_Def.__bases__)
                bases.insert(0, ns0.Target_Def)
                ns0.GeoTarget_Def.__bases__ = tuple(bases)

            ns0.Target_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Media_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Media")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Media_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"mediaId"), aname="_mediaId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","Media.MediaType",lazy=False)(pname=(ns,"mediaTypeDb"), aname="_mediaTypeDb", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"referenceId"), aname="_referenceId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","Media_Size_DimensionsMapEntry",lazy=False)(pname=(ns,"dimensions"), aname="_dimensions", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","Media_Size_StringMapEntry",lazy=False)(pname=(ns,"urls"), aname="_urls", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","Media.MimeType",lazy=False)(pname=(ns,"mimeType"), aname="_mimeType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sourceUrl"), aname="_sourceUrl", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","Media.MediaSubType",lazy=False)(pname=(ns,"mediaSubType"), aname="_mediaSubType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fileSize"), aname="_fileSize", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","Media_MediaExtendedCapabilityType_Media_MediaExtendedCapabilityStateMapEntry",lazy=False)(pname=(ns,"extendedCapabilities"), aname="_extendedCapabilities", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"creationTime"), aname="_creationTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Media.Type"), aname="_Media_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._mediaId = None
                    self._mediaTypeDb = None
                    self._referenceId = None
                    self._dimensions = []
                    self._urls = []
                    self._mimeType = None
                    self._sourceUrl = None
                    self._mediaSubType = None
                    self._name = None
                    self._fileSize = None
                    self._extendedCapabilities = []
                    self._creationTime = None
                    self._Media_Type = None
                    return
            Holder.__name__ = "Media_Holder"
            self.pyclass = Holder

    class MobileImageAd_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "MobileImageAd")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MobileImageAd_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","MarkupLanguageType",lazy=False)(pname=(ns,"markupLanguages"), aname="_markupLanguages", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"mobileCarriers"), aname="_mobileCarriers", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","Image",lazy=False)(pname=(ns,"image"), aname="_image", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Ad_Def not in ns0.MobileImageAd_Def.__bases__:
                bases = list(ns0.MobileImageAd_Def.__bases__)
                bases.insert(0, ns0.Ad_Def)
                ns0.MobileImageAd_Def.__bases__ = tuple(bases)

            ns0.Ad_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PolicyViolationError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "PolicyViolationError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.PolicyViolationError_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","PolicyViolationKey",lazy=False)(pname=(ns,"key"), aname="_key", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"externalPolicyName"), aname="_externalPolicyName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"externalPolicyUrl"), aname="_externalPolicyUrl", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"externalPolicyDescription"), aname="_externalPolicyDescription", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"isExemptable"), aname="_isExemptable", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","PolicyViolationError.Part",lazy=False)(pname=(ns,"violatingParts"), aname="_violatingParts", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.PolicyViolationError_Def.__bases__:
                bases = list(ns0.PolicyViolationError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.PolicyViolationError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RichMediaAd_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "RichMediaAd")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RichMediaAd_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","Dimensions",lazy=False)(pname=(ns,"dimensions"), aname="_dimensions", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"snippet"), aname="_snippet", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"impressionBeaconUrl"), aname="_impressionBeaconUrl", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"certifiedVendorFormatId"), aname="_certifiedVendorFormatId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Ad_Def not in ns0.RichMediaAd_Def.__bases__:
                bases = list(ns0.RichMediaAd_Def.__bases__)
                bases.insert(0, ns0.Ad_Def)
                ns0.RichMediaAd_Def.__bases__ = tuple(bases)

            ns0.Ad_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Stats_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Stats")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Stats_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"startDate"), aname="_startDate", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"endDate"), aname="_endDate", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","Stats.Network",lazy=False)(pname=(ns,"network"), aname="_network", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clicks"), aname="_clicks", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"impressions"), aname="_impressions", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","Money",lazy=False)(pname=(ns,"cost"), aname="_cost", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"averagePosition"), aname="_averagePosition", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","Money",lazy=False)(pname=(ns,"averageCpc"), aname="_averageCpc", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","Money",lazy=False)(pname=(ns,"averageCpm"), aname="_averageCpm", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ctr"), aname="_ctr", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"conversions"), aname="_conversions", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"conversionRate"), aname="_conversionRate", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","Money",lazy=False)(pname=(ns,"costPerConversion"), aname="_costPerConversion", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"conversionsManyPerClick"), aname="_conversionsManyPerClick", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"conversionRateManyPerClick"), aname="_conversionRateManyPerClick", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","Money",lazy=False)(pname=(ns,"costPerConversionManyPerClick"), aname="_costPerConversionManyPerClick", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Stats.Type"), aname="_Stats_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._startDate = None
                    self._endDate = None
                    self._network = None
                    self._clicks = None
                    self._impressions = None
                    self._cost = None
                    self._averagePosition = None
                    self._averageCpc = None
                    self._averageCpm = None
                    self._ctr = None
                    self._conversions = None
                    self._conversionRate = None
                    self._costPerConversion = None
                    self._conversionsManyPerClick = None
                    self._conversionRateManyPerClick = None
                    self._costPerConversionManyPerClick = None
                    self._Stats_Type = None
                    return
            Holder.__name__ = "Stats_Holder"
            self.pyclass = Holder

    class Target_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Target")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Target_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Target.Type"), aname="_Target_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Target_Type = None
                    return
            Holder.__name__ = "Target_Holder"
            self.pyclass = Holder

    class TemplateElementField_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "TemplateElementField")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.TemplateElementField_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","TemplateElementField.Type",lazy=False)(pname=(ns,"type"), aname="_type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fieldText"), aname="_fieldText", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","Media",lazy=False)(pname=(ns,"fieldMedia"), aname="_fieldMedia", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._type = None
                    self._fieldText = None
                    self._fieldMedia = None
                    return
            Holder.__name__ = "TemplateElementField_Holder"
            self.pyclass = Holder

    class ApiError_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ApiError")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ApiError_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"fieldPath"), aname="_fieldPath", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"trigger"), aname="_trigger", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"errorString"), aname="_errorString", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ApiError.Type"), aname="_ApiError_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fieldPath = None
                    self._trigger = None
                    self._errorString = None
                    self._ApiError_Type = None
                    return
            Holder.__name__ = "ApiError_Holder"
            self.pyclass = Holder

    class ApiException_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ApiException")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ApiException_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","ApiError",lazy=False)(pname=(ns,"errors"), aname="_errors", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApplicationException_Def not in ns0.ApiException_Def.__bases__:
                bases = list(ns0.ApiException_Def.__bases__)
                bases.insert(0, ns0.ApplicationException_Def)
                ns0.ApiException_Def.__bases__ = tuple(bases)

            ns0.ApplicationException_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ApplicationException_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ApplicationException")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ApplicationException_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ApplicationException.Type"), aname="_ApplicationException_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    self._ApplicationException_Type = None
                    return
            Holder.__name__ = "ApplicationException_Holder"
            self.pyclass = Holder

    class ImageAd_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ImageAd")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ImageAd_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","Image",lazy=False)(pname=(ns,"image"), aname="_image", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Ad_Def not in ns0.ImageAd_Def.__bases__:
                bases = list(ns0.ImageAd_Def.__bases__)
                bases.insert(0, ns0.Ad_Def)
                ns0.ImageAd_Def.__bases__ = tuple(bases)

            ns0.Ad_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LocalBusinessAd_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "LocalBusinessAd")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.LocalBusinessAd_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"fullBusinessName"), aname="_fullBusinessName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"phoneNumber"), aname="_phoneNumber", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"streetAddress"), aname="_streetAddress", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"city"), aname="_city", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"region"), aname="_region", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"regionCode"), aname="_regionCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"postalCode"), aname="_postalCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"businessName"), aname="_businessName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description1"), aname="_description1", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description2"), aname="_description2", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","ProximityTarget",lazy=False)(pname=(ns,"target"), aname="_target", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","Image",lazy=False)(pname=(ns,"businessImage"), aname="_businessImage", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","Image",lazy=False)(pname=(ns,"icon"), aname="_icon", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Ad_Def not in ns0.LocalBusinessAd_Def.__bases__:
                bases = list(ns0.LocalBusinessAd_Def.__bases__)
                bases.insert(0, ns0.Ad_Def)
                ns0.LocalBusinessAd_Def.__bases__ = tuple(bases)

            ns0.Ad_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TemplateElement_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "TemplateElement")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.TemplateElement_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"uniqueName"), aname="_uniqueName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","TemplateElementField",lazy=False)(pname=(ns,"fields"), aname="_fields", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._uniqueName = None
                    self._fields = []
                    return
            Holder.__name__ = "TemplateElement_Holder"
            self.pyclass = Holder

    class AdGroupAdSelector_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AdGroupAdSelector")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AdGroupAdSelector_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"campaignIds"), aname="_campaignIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"adGroupIds"), aname="_adGroupIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"adIds"), aname="_adIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","AdGroupAd.Status",lazy=False)(pname=(ns,"statuses"), aname="_statuses", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","AdStatsSelector",lazy=False)(pname=(ns,"statsSelector"), aname="_statsSelector", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","Paging",lazy=False)(pname=(ns,"paging"), aname="_paging", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._campaignIds = []
                    self._adGroupIds = []
                    self._adIds = []
                    self._statuses = []
                    self._statsSelector = None
                    self._paging = None
                    return
            Holder.__name__ = "AdGroupAdSelector_Holder"
            self.pyclass = Holder

    class TemplateAd_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "TemplateAd")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.TemplateAd_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"templateId"), aname="_templateId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","AdUnionId",lazy=False)(pname=(ns,"adUnionId"), aname="_adUnionId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","TemplateElement",lazy=False)(pname=(ns,"templateElements"), aname="_templateElements", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","Dimensions",lazy=False)(pname=(ns,"dimensions"), aname="_dimensions", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"duration"), aname="_duration", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Ad_Def not in ns0.TemplateAd_Def.__bases__:
                bases = list(ns0.TemplateAd_Def.__bases__)
                bases.insert(0, ns0.Ad_Def)
                ns0.TemplateAd_Def.__bases__ = tuple(bases)

            ns0.Ad_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Ad_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Ad")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Ad_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"url"), aname="_url", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"displayUrl"), aname="_displayUrl", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","Ad.ApprovalStatus",lazy=False)(pname=(ns,"approvalStatus"), aname="_approvalStatus", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"disapprovalReasons"), aname="_disapprovalReasons", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"trademarkDisapproved"), aname="_trademarkDisapproved", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Ad.Type"), aname="_Ad_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._url = None
                    self._displayUrl = None
                    self._approvalStatus = None
                    self._disapprovalReasons = []
                    self._trademarkDisapproved = None
                    self._Ad_Type = None
                    return
            Holder.__name__ = "Ad_Holder"
            self.pyclass = Holder

    class AdGroupAd_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AdGroupAd")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AdGroupAd_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"adGroupId"), aname="_adGroupId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","Ad",lazy=False)(pname=(ns,"ad"), aname="_ad", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","AdGroupAd.Status",lazy=False)(pname=(ns,"status"), aname="_status", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","AdStats",lazy=False)(pname=(ns,"stats"), aname="_stats", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._adGroupId = None
                    self._ad = None
                    self._status = None
                    self._stats = None
                    return
            Holder.__name__ = "AdGroupAd_Holder"
            self.pyclass = Holder

    class AdGroupAdOperation_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AdGroupAdOperation")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdGroupAdOperation_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","AdGroupAd",lazy=False)(pname=(ns,"operand"), aname="_operand", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://adwords.google.com/api/adwords/cm/v201003","ExemptionRequest",lazy=False)(pname=(ns,"exemptionRequests"), aname="_exemptionRequests", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Operation_Def not in ns0.AdGroupAdOperation_Def.__bases__:
                bases = list(ns0.AdGroupAdOperation_Def.__bases__)
                bases.insert(0, ns0.Operation_Def)
                ns0.AdGroupAdOperation_Def.__bases__ = tuple(bases)

            ns0.Operation_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdGroupAdPage_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AdGroupAdPage")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdGroupAdPage_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","AdGroupAd",lazy=False)(pname=(ns,"entries"), aname="_entries", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Page_Def not in ns0.AdGroupAdPage_Def.__bases__:
                bases = list(ns0.AdGroupAdPage_Def.__bases__)
                bases.insert(0, ns0.Page_Def)
                ns0.AdGroupAdPage_Def.__bases__ = tuple(bases)

            ns0.Page_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdGroupAdReturnValue_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AdGroupAdReturnValue")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdGroupAdReturnValue_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","AdGroupAd",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ListReturnValue_Def not in ns0.AdGroupAdReturnValue_Def.__bases__:
                bases = list(ns0.AdGroupAdReturnValue_Def.__bases__)
                bases.insert(0, ns0.ListReturnValue_Def)
                ns0.AdGroupAdReturnValue_Def.__bases__ = tuple(bases)

            ns0.ListReturnValue_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ListReturnValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ListReturnValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ListReturnValue_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"ListReturnValue.Type"), aname="_ListReturnValue_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ListReturnValue_Type = None
                    return
            Holder.__name__ = "ListReturnValue_Holder"
            self.pyclass = Holder

    class Operation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Operation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Operation_Def.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","Operator",lazy=False)(pname=(ns,"operator"), aname="_operator", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Operation.Type"), aname="_Operation_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._operator = None
                    self._Operation_Type = None
                    return
            Holder.__name__ = "Operation_Holder"
            self.pyclass = Holder

    class Page_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Page")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Page_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"totalNumEntries"), aname="_totalNumEntries", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Page.Type"), aname="_Page_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._totalNumEntries = None
                    self._Page_Type = None
                    return
            Holder.__name__ = "Page_Holder"
            self.pyclass = Holder

    class Ad_ApprovalStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Ad.ApprovalStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AdError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdGroupAd_Status_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AdGroupAd.Status")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdGroupAdError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AdGroupAdError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AgeTarget_Age_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AgeTarget.Age")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AuthenticationError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AuthenticationError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AuthorizationError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "AuthorizationError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ClientTermsError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ClientTermsError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DatabaseError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "DatabaseError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DateError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "DateError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DayOfWeek_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "DayOfWeek")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DeprecatedAd_Type_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "DeprecatedAd.Type")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DistinctError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "DistinctError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class EntityCountLimitExceeded_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "EntityCountLimitExceeded.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class EntityNotFound_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "EntityNotFound.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GenderTarget_Gender_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "GenderTarget.Gender")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class IdError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "IdError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ImageError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ImageError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class InternalApiError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "InternalApiError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MarkupLanguageType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "MarkupLanguageType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Media_MediaExtendedCapabilityState_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Media.MediaExtendedCapabilityState")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Media_MediaExtendedCapabilityType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Media.MediaExtendedCapabilityType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Media_MediaSubType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Media.MediaSubType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Media_MediaType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Media.MediaType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Media_MimeType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Media.MimeType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Media_Size_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Media.Size")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MediaError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "MediaError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MinuteOfHour_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "MinuteOfHour")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NetworkCoverageType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "NetworkCoverageType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NewEntityCreationError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "NewEntityCreationError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NotEmptyError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "NotEmptyError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NotWhitelistedError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "NotWhitelistedError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NullError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "NullError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class OperationAccessDenied_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "OperationAccessDenied.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Operator_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Operator")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PagingError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "PagingError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PlatformType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "PlatformType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ProximityTarget_DistanceUnits_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ProximityTarget.DistanceUnits")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class QuotaCheckError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "QuotaCheckError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RangeError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "RangeError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RateExceededError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "RateExceededError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ReadOnlyError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "ReadOnlyError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RequestError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "RequestError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RequiredError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "RequiredError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SizeLimitError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "SizeLimitError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Stats_Network_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "Stats.Network")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class StatsQueryError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "StatsQueryError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class TemplateElementField_Type_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "TemplateElementField.Type")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class VideoType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        type = (schema, "VideoType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class getAdGroupAd_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAdGroupAd"
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        def __init__(self, **kw):
            ns = ns0.getAdGroupAd_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","AdGroupAdSelector",lazy=False)(pname=(ns,"selector"), aname="_selector", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201003","get")
            kw["aname"] = "_get"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._selector = None
                    return
            Holder.__name__ = "get_Holder"
            self.pyclass = Holder

    class getAdGroupAdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAdGroupAdResponse"
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        def __init__(self, **kw):
            ns = ns0.getAdGroupAdResponse_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","AdGroupAdPage",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201003","getResponse")
            kw["aname"] = "_getResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = None
                    return
            Holder.__name__ = "getAdGroupAdResponse_Holder"
            self.pyclass = Holder

    class ApiExceptionFault_Dec(ElementDeclaration):
        literal = "ApiExceptionFault"
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201003","ApiExceptionFault")
            kw["aname"] = "_ApiExceptionFault"
            if ns0.ApiException_Def not in ns0.ApiExceptionFault_Dec.__bases__:
                bases = list(ns0.ApiExceptionFault_Dec.__bases__)
                bases.insert(0, ns0.ApiException_Def)
                ns0.ApiExceptionFault_Dec.__bases__ = tuple(bases)

            ns0.ApiException_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ApiExceptionFault_Dec_Holder"

    class mutateAdGroupAd_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "mutateAdGroupAd"
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        def __init__(self, **kw):
            ns = ns0.mutateAdGroupAd_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","AdGroupAdOperation",lazy=False)(pname=(ns,"operations"), aname="_operations", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201003","mutate")
            kw["aname"] = "_mutate"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._operations = []
                    return
            Holder.__name__ = "mutate_Holder"
            self.pyclass = Holder

    class mutateAdGroupAdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "mutateAdGroupAdResponse"
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        def __init__(self, **kw):
            ns = ns0.mutateAdGroupAdResponse_Dec.schema
            TClist = [GTD("https://adwords.google.com/api/adwords/cm/v201003","AdGroupAdReturnValue",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201003","mutateResponse")
            kw["aname"] = "_mutateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = None
                    return
            Holder.__name__ = "mutateAdGroupAdResponse_Holder"
            self.pyclass = Holder

    class RequestHeader_Dec(ElementDeclaration):
        literal = "RequestHeader"
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201003","RequestHeader")
            kw["aname"] = "_RequestHeader"
            if ns0.SoapHeader_Def not in ns0.RequestHeader_Dec.__bases__:
                bases = list(ns0.RequestHeader_Dec.__bases__)
                bases.insert(0, ns0.SoapHeader_Def)
                ns0.RequestHeader_Dec.__bases__ = tuple(bases)

            ns0.SoapHeader_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "RequestHeader_Dec_Holder"

    class ResponseHeader_Dec(ElementDeclaration):
        literal = "ResponseHeader"
        schema = "https://adwords.google.com/api/adwords/cm/v201003"
        def __init__(self, **kw):
            kw["pname"] = ("https://adwords.google.com/api/adwords/cm/v201003","ResponseHeader")
            kw["aname"] = "_ResponseHeader"
            if ns0.SoapResponseHeader_Def not in ns0.ResponseHeader_Dec.__bases__:
                bases = list(ns0.ResponseHeader_Dec.__bases__)
                bases.insert(0, ns0.SoapResponseHeader_Def)
                ns0.ResponseHeader_Dec.__bases__ = tuple(bases)

            ns0.SoapResponseHeader_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ResponseHeader_Dec_Holder"

# end class ns0 (tns: https://adwords.google.com/api/adwords/cm/v201003)
